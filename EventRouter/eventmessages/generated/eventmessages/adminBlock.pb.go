// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventmessages/adminBlock.proto

package eventmessages

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/bi-foundation/protobuf-graphql-extension/graphqlproto"
	types "github.com/bi-foundation/protobuf-graphql-extension/graphqlproto/types"
	github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars "github.com/bi-foundation/protobuf-graphql-extension/plugin/graphql/scalars"
	proto "github.com/gogo/protobuf/proto"
	github_com_graphql_go_graphql "github.com/graphql-go/graphql"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AdminBlock struct {
	Header               *AdminBlockHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Entries              []*AdminBlockEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AdminBlock) Reset()         { *m = AdminBlock{} }
func (m *AdminBlock) String() string { return proto.CompactTextString(m) }
func (*AdminBlock) ProtoMessage()    {}
func (*AdminBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{0}
}
func (m *AdminBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminBlock.Merge(m, src)
}
func (m *AdminBlock) XXX_Size() int {
	return m.Size()
}
func (m *AdminBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminBlock.DiscardUnknown(m)
}

var xxx_messageInfo_AdminBlock proto.InternalMessageInfo

func (m *AdminBlock) GetHeader() *AdminBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AdminBlock) GetEntries() []*AdminBlockEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AdminBlockHeader struct {
	PreviousBackRefHash  *Hash    `protobuf:"bytes,1,opt,name=previousBackRefHash,proto3" json:"previousBackRefHash,omitempty"`
	BlockHeight          uint32   `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminBlockHeader) Reset()         { *m = AdminBlockHeader{} }
func (m *AdminBlockHeader) String() string { return proto.CompactTextString(m) }
func (*AdminBlockHeader) ProtoMessage()    {}
func (*AdminBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{1}
}
func (m *AdminBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminBlockHeader.Merge(m, src)
}
func (m *AdminBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *AdminBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_AdminBlockHeader proto.InternalMessageInfo

func (m *AdminBlockHeader) GetPreviousBackRefHash() *Hash {
	if m != nil {
		return m.PreviousBackRefHash
	}
	return nil
}

func (m *AdminBlockHeader) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type AdminBlockEntry struct {
	// Types that are valid to be assigned to Value:
	//	*AdminBlockEntry_AddAuditServer
	//	*AdminBlockEntry_AddEfficiency
	//	*AdminBlockEntry_AddFactoidAddress
	//	*AdminBlockEntry_AddFederatedServer
	//	*AdminBlockEntry_AddFederatedServerBitcoinAnchorKey
	//	*AdminBlockEntry_AddFederatedServerSigningKey
	//	*AdminBlockEntry_AddReplaceMatryoshkaHash
	//	*AdminBlockEntry_CancelCoinbaseDescriptor
	//	*AdminBlockEntry_CoinbaseDescriptor
	//	*AdminBlockEntry_DirectoryBlockSignatureEntry
	//	*AdminBlockEntry_EndOfMinuteEntry
	//	*AdminBlockEntry_ForwardCompatibleEntry
	//	*AdminBlockEntry_IncreaseServerCount
	//	*AdminBlockEntry_RemoveFederatedServer
	//	*AdminBlockEntry_RevealMatryoshkaHash
	//	*AdminBlockEntry_ServerFault
	Value                isAdminBlockEntry_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AdminBlockEntry) Reset()         { *m = AdminBlockEntry{} }
func (m *AdminBlockEntry) String() string { return proto.CompactTextString(m) }
func (*AdminBlockEntry) ProtoMessage()    {}
func (*AdminBlockEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{2}
}
func (m *AdminBlockEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminBlockEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminBlockEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminBlockEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminBlockEntry.Merge(m, src)
}
func (m *AdminBlockEntry) XXX_Size() int {
	return m.Size()
}
func (m *AdminBlockEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminBlockEntry.DiscardUnknown(m)
}

var xxx_messageInfo_AdminBlockEntry proto.InternalMessageInfo

type isAdminBlockEntry_Value interface {
	isAdminBlockEntry_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdminBlockEntry_AddAuditServer struct {
	AddAuditServer *AddAuditServer `protobuf:"bytes,1,opt,name=addAuditServer,proto3,oneof"`
}
type AdminBlockEntry_AddEfficiency struct {
	AddEfficiency *AddEfficiency `protobuf:"bytes,2,opt,name=addEfficiency,proto3,oneof"`
}
type AdminBlockEntry_AddFactoidAddress struct {
	AddFactoidAddress *AddFactoidAddress `protobuf:"bytes,3,opt,name=addFactoidAddress,proto3,oneof"`
}
type AdminBlockEntry_AddFederatedServer struct {
	AddFederatedServer *AddFederatedServer `protobuf:"bytes,4,opt,name=addFederatedServer,proto3,oneof"`
}
type AdminBlockEntry_AddFederatedServerBitcoinAnchorKey struct {
	AddFederatedServerBitcoinAnchorKey *AddFederatedServerBitcoinAnchorKey `protobuf:"bytes,5,opt,name=addFederatedServerBitcoinAnchorKey,proto3,oneof"`
}
type AdminBlockEntry_AddFederatedServerSigningKey struct {
	AddFederatedServerSigningKey *AddFederatedServerSigningKey `protobuf:"bytes,6,opt,name=addFederatedServerSigningKey,proto3,oneof"`
}
type AdminBlockEntry_AddReplaceMatryoshkaHash struct {
	AddReplaceMatryoshkaHash *AddReplaceMatryoshkaHash `protobuf:"bytes,7,opt,name=addReplaceMatryoshkaHash,proto3,oneof"`
}
type AdminBlockEntry_CancelCoinbaseDescriptor struct {
	CancelCoinbaseDescriptor *CancelCoinbaseDescriptor `protobuf:"bytes,8,opt,name=cancelCoinbaseDescriptor,proto3,oneof"`
}
type AdminBlockEntry_CoinbaseDescriptor struct {
	CoinbaseDescriptor *CoinbaseDescriptor `protobuf:"bytes,9,opt,name=coinbaseDescriptor,proto3,oneof"`
}
type AdminBlockEntry_DirectoryBlockSignatureEntry struct {
	DirectoryBlockSignatureEntry *DirectoryBlockSignatureEntry `protobuf:"bytes,10,opt,name=directoryBlockSignatureEntry,proto3,oneof"`
}
type AdminBlockEntry_EndOfMinuteEntry struct {
	EndOfMinuteEntry *EndOfMinuteEntry `protobuf:"bytes,11,opt,name=endOfMinuteEntry,proto3,oneof"`
}
type AdminBlockEntry_ForwardCompatibleEntry struct {
	ForwardCompatibleEntry *ForwardCompatibleEntry `protobuf:"bytes,12,opt,name=forwardCompatibleEntry,proto3,oneof"`
}
type AdminBlockEntry_IncreaseServerCount struct {
	IncreaseServerCount *IncreaseServerCount `protobuf:"bytes,13,opt,name=increaseServerCount,proto3,oneof"`
}
type AdminBlockEntry_RemoveFederatedServer struct {
	RemoveFederatedServer *RemoveFederatedServer `protobuf:"bytes,14,opt,name=removeFederatedServer,proto3,oneof"`
}
type AdminBlockEntry_RevealMatryoshkaHash struct {
	RevealMatryoshkaHash *RevealMatryoshkaHash `protobuf:"bytes,15,opt,name=revealMatryoshkaHash,proto3,oneof"`
}
type AdminBlockEntry_ServerFault struct {
	ServerFault *ServerFault `protobuf:"bytes,16,opt,name=serverFault,proto3,oneof"`
}

func (*AdminBlockEntry_AddAuditServer) isAdminBlockEntry_Value()                     {}
func (*AdminBlockEntry_AddEfficiency) isAdminBlockEntry_Value()                      {}
func (*AdminBlockEntry_AddFactoidAddress) isAdminBlockEntry_Value()                  {}
func (*AdminBlockEntry_AddFederatedServer) isAdminBlockEntry_Value()                 {}
func (*AdminBlockEntry_AddFederatedServerBitcoinAnchorKey) isAdminBlockEntry_Value() {}
func (*AdminBlockEntry_AddFederatedServerSigningKey) isAdminBlockEntry_Value()       {}
func (*AdminBlockEntry_AddReplaceMatryoshkaHash) isAdminBlockEntry_Value()           {}
func (*AdminBlockEntry_CancelCoinbaseDescriptor) isAdminBlockEntry_Value()           {}
func (*AdminBlockEntry_CoinbaseDescriptor) isAdminBlockEntry_Value()                 {}
func (*AdminBlockEntry_DirectoryBlockSignatureEntry) isAdminBlockEntry_Value()       {}
func (*AdminBlockEntry_EndOfMinuteEntry) isAdminBlockEntry_Value()                   {}
func (*AdminBlockEntry_ForwardCompatibleEntry) isAdminBlockEntry_Value()             {}
func (*AdminBlockEntry_IncreaseServerCount) isAdminBlockEntry_Value()                {}
func (*AdminBlockEntry_RemoveFederatedServer) isAdminBlockEntry_Value()              {}
func (*AdminBlockEntry_RevealMatryoshkaHash) isAdminBlockEntry_Value()               {}
func (*AdminBlockEntry_ServerFault) isAdminBlockEntry_Value()                        {}

func (m *AdminBlockEntry) GetValue() isAdminBlockEntry_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *AdminBlockEntry) GetAddAuditServer() *AddAuditServer {
	if x, ok := m.GetValue().(*AdminBlockEntry_AddAuditServer); ok {
		return x.AddAuditServer
	}
	return nil
}

func (m *AdminBlockEntry) GetAddEfficiency() *AddEfficiency {
	if x, ok := m.GetValue().(*AdminBlockEntry_AddEfficiency); ok {
		return x.AddEfficiency
	}
	return nil
}

func (m *AdminBlockEntry) GetAddFactoidAddress() *AddFactoidAddress {
	if x, ok := m.GetValue().(*AdminBlockEntry_AddFactoidAddress); ok {
		return x.AddFactoidAddress
	}
	return nil
}

func (m *AdminBlockEntry) GetAddFederatedServer() *AddFederatedServer {
	if x, ok := m.GetValue().(*AdminBlockEntry_AddFederatedServer); ok {
		return x.AddFederatedServer
	}
	return nil
}

func (m *AdminBlockEntry) GetAddFederatedServerBitcoinAnchorKey() *AddFederatedServerBitcoinAnchorKey {
	if x, ok := m.GetValue().(*AdminBlockEntry_AddFederatedServerBitcoinAnchorKey); ok {
		return x.AddFederatedServerBitcoinAnchorKey
	}
	return nil
}

func (m *AdminBlockEntry) GetAddFederatedServerSigningKey() *AddFederatedServerSigningKey {
	if x, ok := m.GetValue().(*AdminBlockEntry_AddFederatedServerSigningKey); ok {
		return x.AddFederatedServerSigningKey
	}
	return nil
}

func (m *AdminBlockEntry) GetAddReplaceMatryoshkaHash() *AddReplaceMatryoshkaHash {
	if x, ok := m.GetValue().(*AdminBlockEntry_AddReplaceMatryoshkaHash); ok {
		return x.AddReplaceMatryoshkaHash
	}
	return nil
}

func (m *AdminBlockEntry) GetCancelCoinbaseDescriptor() *CancelCoinbaseDescriptor {
	if x, ok := m.GetValue().(*AdminBlockEntry_CancelCoinbaseDescriptor); ok {
		return x.CancelCoinbaseDescriptor
	}
	return nil
}

func (m *AdminBlockEntry) GetCoinbaseDescriptor() *CoinbaseDescriptor {
	if x, ok := m.GetValue().(*AdminBlockEntry_CoinbaseDescriptor); ok {
		return x.CoinbaseDescriptor
	}
	return nil
}

func (m *AdminBlockEntry) GetDirectoryBlockSignatureEntry() *DirectoryBlockSignatureEntry {
	if x, ok := m.GetValue().(*AdminBlockEntry_DirectoryBlockSignatureEntry); ok {
		return x.DirectoryBlockSignatureEntry
	}
	return nil
}

func (m *AdminBlockEntry) GetEndOfMinuteEntry() *EndOfMinuteEntry {
	if x, ok := m.GetValue().(*AdminBlockEntry_EndOfMinuteEntry); ok {
		return x.EndOfMinuteEntry
	}
	return nil
}

func (m *AdminBlockEntry) GetForwardCompatibleEntry() *ForwardCompatibleEntry {
	if x, ok := m.GetValue().(*AdminBlockEntry_ForwardCompatibleEntry); ok {
		return x.ForwardCompatibleEntry
	}
	return nil
}

func (m *AdminBlockEntry) GetIncreaseServerCount() *IncreaseServerCount {
	if x, ok := m.GetValue().(*AdminBlockEntry_IncreaseServerCount); ok {
		return x.IncreaseServerCount
	}
	return nil
}

func (m *AdminBlockEntry) GetRemoveFederatedServer() *RemoveFederatedServer {
	if x, ok := m.GetValue().(*AdminBlockEntry_RemoveFederatedServer); ok {
		return x.RemoveFederatedServer
	}
	return nil
}

func (m *AdminBlockEntry) GetRevealMatryoshkaHash() *RevealMatryoshkaHash {
	if x, ok := m.GetValue().(*AdminBlockEntry_RevealMatryoshkaHash); ok {
		return x.RevealMatryoshkaHash
	}
	return nil
}

func (m *AdminBlockEntry) GetServerFault() *ServerFault {
	if x, ok := m.GetValue().(*AdminBlockEntry_ServerFault); ok {
		return x.ServerFault
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AdminBlockEntry) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AdminBlockEntry_AddAuditServer)(nil),
		(*AdminBlockEntry_AddEfficiency)(nil),
		(*AdminBlockEntry_AddFactoidAddress)(nil),
		(*AdminBlockEntry_AddFederatedServer)(nil),
		(*AdminBlockEntry_AddFederatedServerBitcoinAnchorKey)(nil),
		(*AdminBlockEntry_AddFederatedServerSigningKey)(nil),
		(*AdminBlockEntry_AddReplaceMatryoshkaHash)(nil),
		(*AdminBlockEntry_CancelCoinbaseDescriptor)(nil),
		(*AdminBlockEntry_CoinbaseDescriptor)(nil),
		(*AdminBlockEntry_DirectoryBlockSignatureEntry)(nil),
		(*AdminBlockEntry_EndOfMinuteEntry)(nil),
		(*AdminBlockEntry_ForwardCompatibleEntry)(nil),
		(*AdminBlockEntry_IncreaseServerCount)(nil),
		(*AdminBlockEntry_RemoveFederatedServer)(nil),
		(*AdminBlockEntry_RevealMatryoshkaHash)(nil),
		(*AdminBlockEntry_ServerFault)(nil),
	}
}

type AddAuditServer struct {
	IdentityChainID      *Hash    `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	BlockHeight          uint32   `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddAuditServer) Reset()         { *m = AddAuditServer{} }
func (m *AddAuditServer) String() string { return proto.CompactTextString(m) }
func (*AddAuditServer) ProtoMessage()    {}
func (*AddAuditServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{3}
}
func (m *AddAuditServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddAuditServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddAuditServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddAuditServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAuditServer.Merge(m, src)
}
func (m *AddAuditServer) XXX_Size() int {
	return m.Size()
}
func (m *AddAuditServer) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAuditServer.DiscardUnknown(m)
}

var xxx_messageInfo_AddAuditServer proto.InternalMessageInfo

func (m *AddAuditServer) GetIdentityChainID() *Hash {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddAuditServer) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type AddEfficiency struct {
	IdentityChainID      *Hash    `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	Efficiency           uint32   `protobuf:"varint,2,opt,name=efficiency,proto3" json:"efficiency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddEfficiency) Reset()         { *m = AddEfficiency{} }
func (m *AddEfficiency) String() string { return proto.CompactTextString(m) }
func (*AddEfficiency) ProtoMessage()    {}
func (*AddEfficiency) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{4}
}
func (m *AddEfficiency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddEfficiency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddEfficiency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddEfficiency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEfficiency.Merge(m, src)
}
func (m *AddEfficiency) XXX_Size() int {
	return m.Size()
}
func (m *AddEfficiency) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEfficiency.DiscardUnknown(m)
}

var xxx_messageInfo_AddEfficiency proto.InternalMessageInfo

func (m *AddEfficiency) GetIdentityChainID() *Hash {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddEfficiency) GetEfficiency() uint32 {
	if m != nil {
		return m.Efficiency
	}
	return 0
}

type AddFactoidAddress struct {
	IdentityChainID      *Hash    `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	Address              *Hash    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddFactoidAddress) Reset()         { *m = AddFactoidAddress{} }
func (m *AddFactoidAddress) String() string { return proto.CompactTextString(m) }
func (*AddFactoidAddress) ProtoMessage()    {}
func (*AddFactoidAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{5}
}
func (m *AddFactoidAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFactoidAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFactoidAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFactoidAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFactoidAddress.Merge(m, src)
}
func (m *AddFactoidAddress) XXX_Size() int {
	return m.Size()
}
func (m *AddFactoidAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFactoidAddress.DiscardUnknown(m)
}

var xxx_messageInfo_AddFactoidAddress proto.InternalMessageInfo

func (m *AddFactoidAddress) GetIdentityChainID() *Hash {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddFactoidAddress) GetAddress() *Hash {
	if m != nil {
		return m.Address
	}
	return nil
}

type AddFederatedServer struct {
	IdentityChainID      *Hash    `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	BlockHeight          uint32   `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddFederatedServer) Reset()         { *m = AddFederatedServer{} }
func (m *AddFederatedServer) String() string { return proto.CompactTextString(m) }
func (*AddFederatedServer) ProtoMessage()    {}
func (*AddFederatedServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{6}
}
func (m *AddFederatedServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFederatedServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFederatedServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFederatedServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFederatedServer.Merge(m, src)
}
func (m *AddFederatedServer) XXX_Size() int {
	return m.Size()
}
func (m *AddFederatedServer) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFederatedServer.DiscardUnknown(m)
}

var xxx_messageInfo_AddFederatedServer proto.InternalMessageInfo

func (m *AddFederatedServer) GetIdentityChainID() *Hash {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddFederatedServer) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type AddFederatedServerBitcoinAnchorKey struct {
	IdentityChainID      *Hash    `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	KeyPriority          uint32   `protobuf:"varint,2,opt,name=keyPriority,proto3" json:"keyPriority,omitempty"`
	KeyType              uint32   `protobuf:"varint,3,opt,name=keyType,proto3" json:"keyType,omitempty"`
	EcdsaPublicKey       []byte   `protobuf:"bytes,4,opt,name=ecdsaPublicKey,proto3" json:"ecdsaPublicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddFederatedServerBitcoinAnchorKey) Reset()         { *m = AddFederatedServerBitcoinAnchorKey{} }
func (m *AddFederatedServerBitcoinAnchorKey) String() string { return proto.CompactTextString(m) }
func (*AddFederatedServerBitcoinAnchorKey) ProtoMessage()    {}
func (*AddFederatedServerBitcoinAnchorKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{7}
}
func (m *AddFederatedServerBitcoinAnchorKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFederatedServerBitcoinAnchorKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFederatedServerBitcoinAnchorKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFederatedServerBitcoinAnchorKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFederatedServerBitcoinAnchorKey.Merge(m, src)
}
func (m *AddFederatedServerBitcoinAnchorKey) XXX_Size() int {
	return m.Size()
}
func (m *AddFederatedServerBitcoinAnchorKey) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFederatedServerBitcoinAnchorKey.DiscardUnknown(m)
}

var xxx_messageInfo_AddFederatedServerBitcoinAnchorKey proto.InternalMessageInfo

func (m *AddFederatedServerBitcoinAnchorKey) GetIdentityChainID() *Hash {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddFederatedServerBitcoinAnchorKey) GetKeyPriority() uint32 {
	if m != nil {
		return m.KeyPriority
	}
	return 0
}

func (m *AddFederatedServerBitcoinAnchorKey) GetKeyType() uint32 {
	if m != nil {
		return m.KeyType
	}
	return 0
}

func (m *AddFederatedServerBitcoinAnchorKey) GetEcdsaPublicKey() []byte {
	if m != nil {
		return m.EcdsaPublicKey
	}
	return nil
}

type AddFederatedServerSigningKey struct {
	IdentityChainID      *Hash    `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	KeyPriority          uint32   `protobuf:"varint,2,opt,name=keyPriority,proto3" json:"keyPriority,omitempty"`
	PublicKey            []byte   `protobuf:"bytes,3,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	BlockHeight          uint32   `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddFederatedServerSigningKey) Reset()         { *m = AddFederatedServerSigningKey{} }
func (m *AddFederatedServerSigningKey) String() string { return proto.CompactTextString(m) }
func (*AddFederatedServerSigningKey) ProtoMessage()    {}
func (*AddFederatedServerSigningKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{8}
}
func (m *AddFederatedServerSigningKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFederatedServerSigningKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFederatedServerSigningKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFederatedServerSigningKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFederatedServerSigningKey.Merge(m, src)
}
func (m *AddFederatedServerSigningKey) XXX_Size() int {
	return m.Size()
}
func (m *AddFederatedServerSigningKey) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFederatedServerSigningKey.DiscardUnknown(m)
}

var xxx_messageInfo_AddFederatedServerSigningKey proto.InternalMessageInfo

func (m *AddFederatedServerSigningKey) GetIdentityChainID() *Hash {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddFederatedServerSigningKey) GetKeyPriority() uint32 {
	if m != nil {
		return m.KeyPriority
	}
	return 0
}

func (m *AddFederatedServerSigningKey) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *AddFederatedServerSigningKey) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type AddReplaceMatryoshkaHash struct {
	IdentityChainID      *Hash                 `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	MatryoshkaHash       *Hash                 `protobuf:"bytes,2,opt,name=matryoshkaHash,proto3" json:"matryoshkaHash,omitempty"`
	FactoidOutputs       []*TransactionAddress `protobuf:"bytes,3,rep,name=factoidOutputs,proto3" json:"factoidOutputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AddReplaceMatryoshkaHash) Reset()         { *m = AddReplaceMatryoshkaHash{} }
func (m *AddReplaceMatryoshkaHash) String() string { return proto.CompactTextString(m) }
func (*AddReplaceMatryoshkaHash) ProtoMessage()    {}
func (*AddReplaceMatryoshkaHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{9}
}
func (m *AddReplaceMatryoshkaHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddReplaceMatryoshkaHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddReplaceMatryoshkaHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddReplaceMatryoshkaHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReplaceMatryoshkaHash.Merge(m, src)
}
func (m *AddReplaceMatryoshkaHash) XXX_Size() int {
	return m.Size()
}
func (m *AddReplaceMatryoshkaHash) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReplaceMatryoshkaHash.DiscardUnknown(m)
}

var xxx_messageInfo_AddReplaceMatryoshkaHash proto.InternalMessageInfo

func (m *AddReplaceMatryoshkaHash) GetIdentityChainID() *Hash {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddReplaceMatryoshkaHash) GetMatryoshkaHash() *Hash {
	if m != nil {
		return m.MatryoshkaHash
	}
	return nil
}

func (m *AddReplaceMatryoshkaHash) GetFactoidOutputs() []*TransactionAddress {
	if m != nil {
		return m.FactoidOutputs
	}
	return nil
}

type CancelCoinbaseDescriptor struct {
	DescriptorHeight     uint32   `protobuf:"varint,1,opt,name=descriptorHeight,proto3" json:"descriptorHeight,omitempty"`
	DescriptorIndex      uint32   `protobuf:"varint,2,opt,name=descriptorIndex,proto3" json:"descriptorIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelCoinbaseDescriptor) Reset()         { *m = CancelCoinbaseDescriptor{} }
func (m *CancelCoinbaseDescriptor) String() string { return proto.CompactTextString(m) }
func (*CancelCoinbaseDescriptor) ProtoMessage()    {}
func (*CancelCoinbaseDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{10}
}
func (m *CancelCoinbaseDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelCoinbaseDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelCoinbaseDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelCoinbaseDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelCoinbaseDescriptor.Merge(m, src)
}
func (m *CancelCoinbaseDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *CancelCoinbaseDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelCoinbaseDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_CancelCoinbaseDescriptor proto.InternalMessageInfo

func (m *CancelCoinbaseDescriptor) GetDescriptorHeight() uint32 {
	if m != nil {
		return m.DescriptorHeight
	}
	return 0
}

func (m *CancelCoinbaseDescriptor) GetDescriptorIndex() uint32 {
	if m != nil {
		return m.DescriptorIndex
	}
	return 0
}

type CoinbaseDescriptor struct {
	FactoidOutputs       []*TransAddress `protobuf:"bytes,1,rep,name=factoidOutputs,proto3" json:"factoidOutputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CoinbaseDescriptor) Reset()         { *m = CoinbaseDescriptor{} }
func (m *CoinbaseDescriptor) String() string { return proto.CompactTextString(m) }
func (*CoinbaseDescriptor) ProtoMessage()    {}
func (*CoinbaseDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{11}
}
func (m *CoinbaseDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinbaseDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinbaseDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinbaseDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinbaseDescriptor.Merge(m, src)
}
func (m *CoinbaseDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *CoinbaseDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinbaseDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_CoinbaseDescriptor proto.InternalMessageInfo

func (m *CoinbaseDescriptor) GetFactoidOutputs() []*TransAddress {
	if m != nil {
		return m.FactoidOutputs
	}
	return nil
}

type DirectoryBlockSignatureEntry struct {
	IdentityAdminChainID            *Hash      `protobuf:"bytes,1,opt,name=identityAdminChainID,proto3" json:"identityAdminChainID,omitempty"`
	PreviousDirectoryBlockSignature *Signature `protobuf:"bytes,2,opt,name=previousDirectoryBlockSignature,proto3" json:"previousDirectoryBlockSignature,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}   `json:"-"`
	XXX_unrecognized                []byte     `json:"-"`
	XXX_sizecache                   int32      `json:"-"`
}

func (m *DirectoryBlockSignatureEntry) Reset()         { *m = DirectoryBlockSignatureEntry{} }
func (m *DirectoryBlockSignatureEntry) String() string { return proto.CompactTextString(m) }
func (*DirectoryBlockSignatureEntry) ProtoMessage()    {}
func (*DirectoryBlockSignatureEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{12}
}
func (m *DirectoryBlockSignatureEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryBlockSignatureEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryBlockSignatureEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryBlockSignatureEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryBlockSignatureEntry.Merge(m, src)
}
func (m *DirectoryBlockSignatureEntry) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryBlockSignatureEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryBlockSignatureEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryBlockSignatureEntry proto.InternalMessageInfo

func (m *DirectoryBlockSignatureEntry) GetIdentityAdminChainID() *Hash {
	if m != nil {
		return m.IdentityAdminChainID
	}
	return nil
}

func (m *DirectoryBlockSignatureEntry) GetPreviousDirectoryBlockSignature() *Signature {
	if m != nil {
		return m.PreviousDirectoryBlockSignature
	}
	return nil
}

type EndOfMinuteEntry struct {
	MinuteNumber         uint32   `protobuf:"varint,1,opt,name=minuteNumber,proto3" json:"minuteNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndOfMinuteEntry) Reset()         { *m = EndOfMinuteEntry{} }
func (m *EndOfMinuteEntry) String() string { return proto.CompactTextString(m) }
func (*EndOfMinuteEntry) ProtoMessage()    {}
func (*EndOfMinuteEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{13}
}
func (m *EndOfMinuteEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndOfMinuteEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndOfMinuteEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndOfMinuteEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndOfMinuteEntry.Merge(m, src)
}
func (m *EndOfMinuteEntry) XXX_Size() int {
	return m.Size()
}
func (m *EndOfMinuteEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EndOfMinuteEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EndOfMinuteEntry proto.InternalMessageInfo

func (m *EndOfMinuteEntry) GetMinuteNumber() uint32 {
	if m != nil {
		return m.MinuteNumber
	}
	return 0
}

type ForwardCompatibleEntry struct {
	Size_                uint32   `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForwardCompatibleEntry) Reset()         { *m = ForwardCompatibleEntry{} }
func (m *ForwardCompatibleEntry) String() string { return proto.CompactTextString(m) }
func (*ForwardCompatibleEntry) ProtoMessage()    {}
func (*ForwardCompatibleEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{14}
}
func (m *ForwardCompatibleEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardCompatibleEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForwardCompatibleEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForwardCompatibleEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardCompatibleEntry.Merge(m, src)
}
func (m *ForwardCompatibleEntry) XXX_Size() int {
	return m.Size()
}
func (m *ForwardCompatibleEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardCompatibleEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardCompatibleEntry proto.InternalMessageInfo

func (m *ForwardCompatibleEntry) GetSize_() uint32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ForwardCompatibleEntry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type IncreaseServerCount struct {
	Amount               uint32   `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncreaseServerCount) Reset()         { *m = IncreaseServerCount{} }
func (m *IncreaseServerCount) String() string { return proto.CompactTextString(m) }
func (*IncreaseServerCount) ProtoMessage()    {}
func (*IncreaseServerCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{15}
}
func (m *IncreaseServerCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncreaseServerCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncreaseServerCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncreaseServerCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncreaseServerCount.Merge(m, src)
}
func (m *IncreaseServerCount) XXX_Size() int {
	return m.Size()
}
func (m *IncreaseServerCount) XXX_DiscardUnknown() {
	xxx_messageInfo_IncreaseServerCount.DiscardUnknown(m)
}

var xxx_messageInfo_IncreaseServerCount proto.InternalMessageInfo

func (m *IncreaseServerCount) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type RemoveFederatedServer struct {
	IdentityChainID      *Hash    `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	BlockHeight          uint32   `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveFederatedServer) Reset()         { *m = RemoveFederatedServer{} }
func (m *RemoveFederatedServer) String() string { return proto.CompactTextString(m) }
func (*RemoveFederatedServer) ProtoMessage()    {}
func (*RemoveFederatedServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{16}
}
func (m *RemoveFederatedServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveFederatedServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveFederatedServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveFederatedServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveFederatedServer.Merge(m, src)
}
func (m *RemoveFederatedServer) XXX_Size() int {
	return m.Size()
}
func (m *RemoveFederatedServer) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveFederatedServer.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveFederatedServer proto.InternalMessageInfo

func (m *RemoveFederatedServer) GetIdentityChainID() *Hash {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *RemoveFederatedServer) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type RevealMatryoshkaHash struct {
	IdentityChainID      *Hash    `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	MatryoshkaHash       *Hash    `protobuf:"bytes,2,opt,name=matryoshkaHash,proto3" json:"matryoshkaHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevealMatryoshkaHash) Reset()         { *m = RevealMatryoshkaHash{} }
func (m *RevealMatryoshkaHash) String() string { return proto.CompactTextString(m) }
func (*RevealMatryoshkaHash) ProtoMessage()    {}
func (*RevealMatryoshkaHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{17}
}
func (m *RevealMatryoshkaHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevealMatryoshkaHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevealMatryoshkaHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevealMatryoshkaHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevealMatryoshkaHash.Merge(m, src)
}
func (m *RevealMatryoshkaHash) XXX_Size() int {
	return m.Size()
}
func (m *RevealMatryoshkaHash) XXX_DiscardUnknown() {
	xxx_messageInfo_RevealMatryoshkaHash.DiscardUnknown(m)
}

var xxx_messageInfo_RevealMatryoshkaHash proto.InternalMessageInfo

func (m *RevealMatryoshkaHash) GetIdentityChainID() *Hash {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *RevealMatryoshkaHash) GetMatryoshkaHash() *Hash {
	if m != nil {
		return m.MatryoshkaHash
	}
	return nil
}

type ServerFault struct {
	Timestamp            *types.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ServerID             *Hash            `protobuf:"bytes,2,opt,name=serverID,proto3" json:"serverID,omitempty"`
	AuditServerID        *Hash            `protobuf:"bytes,3,opt,name=auditServerID,proto3" json:"auditServerID,omitempty"`
	VmIndex              uint32           `protobuf:"varint,4,opt,name=vmIndex,proto3" json:"vmIndex,omitempty"`
	BlockHeight          uint32           `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	MessageEntryHeight   uint32           `protobuf:"varint,6,opt,name=messageEntryHeight,proto3" json:"messageEntryHeight,omitempty"`
	SignatureList        []*Signature     `protobuf:"bytes,7,rep,name=signatureList,proto3" json:"signatureList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ServerFault) Reset()         { *m = ServerFault{} }
func (m *ServerFault) String() string { return proto.CompactTextString(m) }
func (*ServerFault) ProtoMessage()    {}
func (*ServerFault) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{18}
}
func (m *ServerFault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerFault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerFault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerFault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerFault.Merge(m, src)
}
func (m *ServerFault) XXX_Size() int {
	return m.Size()
}
func (m *ServerFault) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerFault.DiscardUnknown(m)
}

var xxx_messageInfo_ServerFault proto.InternalMessageInfo

func (m *ServerFault) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ServerFault) GetServerID() *Hash {
	if m != nil {
		return m.ServerID
	}
	return nil
}

func (m *ServerFault) GetAuditServerID() *Hash {
	if m != nil {
		return m.AuditServerID
	}
	return nil
}

func (m *ServerFault) GetVmIndex() uint32 {
	if m != nil {
		return m.VmIndex
	}
	return 0
}

func (m *ServerFault) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ServerFault) GetMessageEntryHeight() uint32 {
	if m != nil {
		return m.MessageEntryHeight
	}
	return 0
}

func (m *ServerFault) GetSignatureList() []*Signature {
	if m != nil {
		return m.SignatureList
	}
	return nil
}

func init() {
	proto.RegisterType((*AdminBlock)(nil), "eventmessages.AdminBlock")
	proto.RegisterType((*AdminBlockHeader)(nil), "eventmessages.AdminBlockHeader")
	proto.RegisterType((*AdminBlockEntry)(nil), "eventmessages.AdminBlockEntry")
	proto.RegisterType((*AddAuditServer)(nil), "eventmessages.AddAuditServer")
	proto.RegisterType((*AddEfficiency)(nil), "eventmessages.AddEfficiency")
	proto.RegisterType((*AddFactoidAddress)(nil), "eventmessages.AddFactoidAddress")
	proto.RegisterType((*AddFederatedServer)(nil), "eventmessages.AddFederatedServer")
	proto.RegisterType((*AddFederatedServerBitcoinAnchorKey)(nil), "eventmessages.AddFederatedServerBitcoinAnchorKey")
	proto.RegisterType((*AddFederatedServerSigningKey)(nil), "eventmessages.AddFederatedServerSigningKey")
	proto.RegisterType((*AddReplaceMatryoshkaHash)(nil), "eventmessages.AddReplaceMatryoshkaHash")
	proto.RegisterType((*CancelCoinbaseDescriptor)(nil), "eventmessages.CancelCoinbaseDescriptor")
	proto.RegisterType((*CoinbaseDescriptor)(nil), "eventmessages.CoinbaseDescriptor")
	proto.RegisterType((*DirectoryBlockSignatureEntry)(nil), "eventmessages.DirectoryBlockSignatureEntry")
	proto.RegisterType((*EndOfMinuteEntry)(nil), "eventmessages.EndOfMinuteEntry")
	proto.RegisterType((*ForwardCompatibleEntry)(nil), "eventmessages.ForwardCompatibleEntry")
	proto.RegisterType((*IncreaseServerCount)(nil), "eventmessages.IncreaseServerCount")
	proto.RegisterType((*RemoveFederatedServer)(nil), "eventmessages.RemoveFederatedServer")
	proto.RegisterType((*RevealMatryoshkaHash)(nil), "eventmessages.RevealMatryoshkaHash")
	proto.RegisterType((*ServerFault)(nil), "eventmessages.ServerFault")
}

func init() { proto.RegisterFile("eventmessages/adminBlock.proto", fileDescriptor_974412be9cb81647) }

var fileDescriptor_974412be9cb81647 = []byte{
	// 1269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xdd, 0x6e, 0xdb, 0xb6,
	0x17, 0x97, 0x92, 0x36, 0x69, 0x8f, 0xe3, 0x24, 0x65, 0xda, 0x42, 0xe8, 0x3f, 0x7f, 0xd7, 0xd3,
	0xbe, 0x82, 0x0d, 0x71, 0xb0, 0x0e, 0xd8, 0x07, 0x8a, 0x15, 0xcb, 0x57, 0xab, 0x60, 0x4b, 0x5b,
	0x30, 0x45, 0x81, 0x0e, 0x03, 0x06, 0x5a, 0xa4, 0x6d, 0x22, 0x16, 0xe5, 0x52, 0x94, 0x57, 0x6f,
	0x17, 0xc3, 0xb0, 0x37, 0xd8, 0x23, 0xec, 0x6a, 0x8f, 0xb0, 0xbb, 0xed, 0x6e, 0x03, 0x76, 0xb3,
	0x47, 0x68, 0xf3, 0x14, 0xbb, 0x1c, 0x44, 0x49, 0xb1, 0x25, 0xd1, 0x4e, 0x81, 0xac, 0xd8, 0x55,
	0xac, 0xc3, 0xdf, 0xf9, 0x1d, 0x92, 0x87, 0x3c, 0xbf, 0xc3, 0x40, 0x83, 0x0d, 0x99, 0x50, 0x01,
	0x8b, 0x22, 0xd2, 0x65, 0xd1, 0x16, 0xa1, 0x01, 0x17, 0x3b, 0xfd, 0xd0, 0x3f, 0x6e, 0x0d, 0x64,
	0xa8, 0x42, 0x54, 0x2f, 0x8c, 0xdf, 0x68, 0x16, 0xe1, 0x5d, 0x26, 0x98, 0x24, 0xfd, 0x47, 0xa3,
	0x01, 0x8b, 0x52, 0x87, 0x32, 0xa2, 0x43, 0x7c, 0x15, 0x72, 0x3a, 0x41, 0x79, 0xe3, 0x7e, 0x97,
	0xab, 0x5e, 0xdc, 0x6e, 0xf9, 0x61, 0xb0, 0xd5, 0xe6, 0x9b, 0x9d, 0x30, 0x16, 0x94, 0x28, 0x1e,
	0x8a, 0x2d, 0x3d, 0xde, 0x8e, 0x3b, 0x9b, 0x5d, 0x49, 0x06, 0xbd, 0xa7, 0xfd, 0x4d, 0xf6, 0x4c,
	0x31, 0x11, 0x25, 0x43, 0x99, 0x45, 0x23, 0xf2, 0x8f, 0x8c, 0xef, 0xf1, 0xb9, 0xf9, 0x54, 0x32,
	0xff, 0x2d, 0xc5, 0x03, 0x16, 0x29, 0x12, 0x0c, 0x52, 0x5e, 0xf7, 0x3b, 0x80, 0xed, 0xd3, 0xed,
	0x40, 0x1f, 0xc2, 0x42, 0x8f, 0x11, 0xca, 0xa4, 0x63, 0x37, 0xed, 0x8d, 0xda, 0xad, 0x9b, 0xad,
	0xc2, 0x42, 0x5b, 0x63, 0xa8, 0xa7, 0x61, 0x38, 0x83, 0xa3, 0x8f, 0x60, 0x91, 0x09, 0x25, 0x39,
	0x8b, 0x9c, 0xb9, 0xe6, 0xfc, 0x46, 0xed, 0x56, 0x63, 0xaa, 0xe7, 0xbe, 0x50, 0x72, 0x84, 0x73,
	0xb8, 0xfb, 0x2d, 0xac, 0x96, 0x59, 0xd1, 0x3e, 0xac, 0x0d, 0x24, 0x1b, 0xf2, 0x30, 0x8e, 0x76,
	0x88, 0x7f, 0x8c, 0x59, 0xc7, 0x23, 0x51, 0x2f, 0x9b, 0xd3, 0x5a, 0x89, 0x39, 0x19, 0xc2, 0x26,
	0x3c, 0x6a, 0x42, 0xad, 0x9d, 0xb2, 0xf2, 0x6e, 0x4f, 0x39, 0x73, 0x4d, 0x7b, 0xa3, 0x8e, 0x27,
	0x4d, 0xee, 0xf3, 0x1a, 0xac, 0x94, 0x66, 0x86, 0xee, 0xc1, 0x32, 0xa1, 0x74, 0x3b, 0xa6, 0x5c,
	0x1d, 0x31, 0x39, 0x3c, 0xdd, 0x8b, 0xff, 0x57, 0x56, 0x34, 0x09, 0xf2, 0x2c, 0x5c, 0x72, 0x43,
	0x7b, 0x50, 0x27, 0x94, 0xee, 0x77, 0x3a, 0xdc, 0xe7, 0x4c, 0xf8, 0x23, 0x3d, 0x81, 0xda, 0xad,
	0xf5, 0x2a, 0xcf, 0x18, 0xe3, 0x59, 0xb8, 0xe8, 0x84, 0x1e, 0xc2, 0x15, 0x42, 0xe9, 0xdd, 0xf4,
	0x84, 0x6d, 0x53, 0x2a, 0x59, 0x14, 0x39, 0xf3, 0x9a, 0xa9, 0x59, 0x65, 0x2a, 0xe2, 0x3c, 0x0b,
	0x57, 0x9d, 0xd1, 0x11, 0xa0, 0xc4, 0xc8, 0x28, 0x93, 0x44, 0x31, 0x9a, 0x2d, 0xf2, 0x82, 0xa6,
	0x7c, 0xcd, 0x40, 0x59, 0x04, 0x7a, 0x16, 0x36, 0xb8, 0xa3, 0x1f, 0x6c, 0x70, 0xab, 0xe6, 0x1d,
	0xae, 0xfc, 0x90, 0x8b, 0x6d, 0xe1, 0xf7, 0x42, 0xf9, 0x19, 0x1b, 0x39, 0x17, 0x75, 0x94, 0xf7,
	0xce, 0x8c, 0x52, 0x76, 0xf4, 0x2c, 0xfc, 0x12, 0xf4, 0xe8, 0x29, 0xac, 0x57, 0x51, 0x47, 0xbc,
	0x2b, 0xb8, 0xe8, 0x26, 0xe1, 0x17, 0x74, 0xf8, 0x77, 0xcf, 0x0c, 0x3f, 0x76, 0xf1, 0x2c, 0x3c,
	0x93, 0x12, 0x31, 0x70, 0x08, 0xa5, 0x98, 0x0d, 0xfa, 0xc4, 0x67, 0x87, 0x44, 0xc9, 0x51, 0x18,
	0xf5, 0x8e, 0x89, 0x3e, 0xb0, 0x8b, 0x3a, 0xdc, 0xdb, 0xd5, 0x70, 0x46, 0xb8, 0x67, 0xe1, 0xa9,
	0x54, 0x49, 0x18, 0x9f, 0x08, 0x9f, 0xf5, 0x77, 0x43, 0x2e, 0xda, 0x24, 0x62, 0x7b, 0x2c, 0xf2,
	0x25, 0x1f, 0xa8, 0x50, 0x3a, 0x97, 0x8c, 0x61, 0x76, 0xa7, 0xc0, 0x93, 0x30, 0xd3, 0xa8, 0x92,
	0xb3, 0xe1, 0x57, 0x03, 0x5c, 0x36, 0x9e, 0x0d, 0x23, 0xb5, 0xc1, 0x3d, 0xc9, 0x0a, 0xe5, 0x92,
	0xf9, 0x2a, 0x94, 0x23, 0x7d, 0xd1, 0x92, 0xed, 0x23, 0x2a, 0x96, 0x4c, 0xdf, 0x38, 0x07, 0x8c,
	0x59, 0xd9, 0x9b, 0xe1, 0x92, 0x64, 0x65, 0x16, 0x25, 0x3a, 0x84, 0x55, 0x26, 0xe8, 0x83, 0xce,
	0x21, 0x17, 0xb1, 0xca, 0xc2, 0xd4, 0x8c, 0x25, 0x6d, 0xbf, 0x04, 0xf3, 0x2c, 0x5c, 0x71, 0x45,
	0x5f, 0xc1, 0xf5, 0x4e, 0x28, 0xbf, 0x26, 0x92, 0xee, 0x86, 0xc1, 0x80, 0x28, 0xde, 0xee, 0x67,
	0xa4, 0x4b, 0x9a, 0xf4, 0xcd, 0x12, 0xe9, 0x5d, 0x23, 0xd8, 0xb3, 0xf0, 0x14, 0x1a, 0xf4, 0x18,
	0xd6, 0xb8, 0xf0, 0x25, 0x23, 0x11, 0x4b, 0x4f, 0xd8, 0x6e, 0x18, 0x0b, 0xe5, 0xd4, 0x35, 0xbb,
	0x5b, 0x62, 0x3f, 0xa8, 0x22, 0x3d, 0x0b, 0x9b, 0x08, 0xd0, 0x97, 0x70, 0x4d, 0xb2, 0x20, 0x1c,
	0xb2, 0xf2, 0x75, 0x5f, 0xd6, 0xcc, 0x6f, 0x94, 0x98, 0xb1, 0x09, 0xeb, 0x59, 0xd8, 0x4c, 0x82,
	0x9e, 0xc0, 0x55, 0xc9, 0x86, 0x8c, 0xf4, 0x4b, 0xe7, 0x7e, 0x45, 0x93, 0xbf, 0x5e, 0x21, 0xaf,
	0x42, 0x3d, 0x0b, 0x1b, 0x29, 0xd0, 0x1d, 0xa8, 0x45, 0x3a, 0xc8, 0x5d, 0x12, 0xf7, 0x95, 0xb3,
	0xaa, 0x19, 0x6f, 0x94, 0x18, 0x8f, 0xc6, 0x08, 0xcf, 0xc2, 0x93, 0x0e, 0x3b, 0x8b, 0x70, 0x71,
	0x48, 0xfa, 0x31, 0x73, 0x9f, 0xc2, 0x72, 0xb1, 0x52, 0xa3, 0x4f, 0x60, 0x85, 0x53, 0x26, 0x14,
	0x57, 0xa3, 0xdd, 0x1e, 0xe1, 0xe2, 0x60, 0x6f, 0x96, 0xb2, 0x94, 0xb1, 0x2f, 0xa1, 0x2a, 0x02,
	0xea, 0x85, 0xa2, 0x7e, 0xde, 0x88, 0x0d, 0x00, 0x56, 0x54, 0x91, 0x3a, 0x9e, 0xb0, 0xb8, 0xdf,
	0xdb, 0x70, 0xa5, 0x52, 0xfb, 0xcf, 0x1b, 0x74, 0x13, 0x16, 0x49, 0xa6, 0x36, 0x73, 0xd3, 0xdd,
	0x72, 0x8c, 0x1b, 0x03, 0xaa, 0x96, 0xd1, 0x57, 0xbf, 0xd5, 0xbf, 0xdb, 0xe0, 0x9e, 0xad, 0x1e,
	0xff, 0xc2, 0x3c, 0x8e, 0xd9, 0xe8, 0xa1, 0xe4, 0xa1, 0xe4, 0x2a, 0xcf, 0xc0, 0xa4, 0x09, 0x39,
	0xb0, 0x78, 0xcc, 0x46, 0x49, 0x8b, 0xa8, 0xb5, 0xb9, 0x8e, 0xf3, 0x4f, 0xf4, 0x16, 0x2c, 0x33,
	0x9f, 0x46, 0xe4, 0x61, 0xdc, 0xee, 0x73, 0x3f, 0x11, 0xa1, 0x44, 0x69, 0x97, 0x70, 0xc9, 0xea,
	0xfe, 0x6a, 0xc3, 0xfa, 0x2c, 0x21, 0x7a, 0xf5, 0x6b, 0x58, 0x87, 0xcb, 0x83, 0xd3, 0x49, 0xce,
	0xeb, 0x49, 0x8e, 0x0d, 0xe5, 0x5c, 0x5c, 0xa8, 0xe6, 0xe2, 0x85, 0x0d, 0xce, 0x34, 0x6d, 0x3b,
	0xef, 0xec, 0x6f, 0xc3, 0x72, 0x50, 0xac, 0x31, 0x33, 0x0e, 0x65, 0x09, 0x8a, 0x0e, 0x60, 0x39,
	0xeb, 0xd0, 0x1f, 0xc4, 0x6a, 0x10, 0xab, 0xa4, 0x7f, 0x9a, 0x37, 0x08, 0xda, 0x23, 0x49, 0x44,
	0x44, 0xfc, 0xa4, 0xab, 0xce, 0x2e, 0x11, 0x2e, 0x39, 0xba, 0x03, 0x70, 0xa6, 0xe9, 0x2a, 0x7a,
	0x07, 0x56, 0xe9, 0x58, 0x0a, 0xd3, 0x6d, 0xb2, 0xf5, 0x36, 0x55, 0xec, 0x68, 0x03, 0x56, 0xc6,
	0xb6, 0x03, 0x41, 0xd9, 0xb3, 0x2c, 0x23, 0x65, 0xb3, 0xfb, 0x04, 0x90, 0x21, 0xd6, 0x6e, 0x65,
	0x49, 0xb6, 0x5e, 0xd2, 0xff, 0x4c, 0x4b, 0x9a, 0xb6, 0x98, 0x3f, 0x6d, 0x58, 0x9f, 0xa5, 0xb2,
	0xe8, 0x1e, 0x5c, 0xcd, 0x13, 0xa1, 0xbb, 0xe4, 0x97, 0xc8, 0x9c, 0xd1, 0x01, 0xb5, 0xe1, 0x66,
	0xde, 0xa0, 0x4f, 0x09, 0x98, 0xe5, 0xd3, 0x29, 0x57, 0xf8, 0x7c, 0x1c, 0x9f, 0x45, 0xe0, 0x7e,
	0x00, 0xab, 0x65, 0x2d, 0x47, 0x2e, 0x2c, 0x05, 0xfa, 0xf3, 0x7e, 0x1c, 0xb4, 0xb3, 0x4e, 0xbe,
	0x8e, 0x0b, 0x36, 0xf7, 0x53, 0xb8, 0x6e, 0x96, 0x6b, 0x84, 0xe0, 0x42, 0xc4, 0xbf, 0x61, 0x99,
	0x97, 0xfe, 0x9d, 0xd8, 0x28, 0x51, 0x44, 0x4f, 0x77, 0x09, 0xeb, 0xdf, 0xee, 0x26, 0xac, 0x19,
	0x24, 0x19, 0x5d, 0x87, 0x05, 0x12, 0x68, 0x19, 0x4f, 0x09, 0xb2, 0x2f, 0xf7, 0x19, 0x5c, 0x33,
	0xea, 0xec, 0xab, 0xaf, 0x96, 0x3f, 0xda, 0x70, 0xd5, 0xa4, 0xc2, 0xff, 0xe5, 0xed, 0x74, 0x4f,
	0xe6, 0xa0, 0x36, 0x21, 0xe4, 0xe8, 0x36, 0x5c, 0x3e, 0x7d, 0xa4, 0x9e, 0x3e, 0xbd, 0x26, 0x5f,
	0xb2, 0x2d, 0xfd, 0x92, 0x6d, 0x3d, 0xca, 0x41, 0x78, 0x8c, 0x47, 0x5b, 0x70, 0x29, 0xed, 0x02,
	0x0e, 0xf6, 0x66, 0xcd, 0xe1, 0x14, 0x84, 0x3e, 0x86, 0x3a, 0x19, 0xf7, 0x06, 0x07, 0x7b, 0xd9,
	0xd3, 0xca, 0xe8, 0x55, 0x44, 0x26, 0x35, 0x7f, 0x18, 0xa4, 0x77, 0x37, 0xad, 0x86, 0xf9, 0x67,
	0x39, 0x13, 0x17, 0x2b, 0x99, 0x40, 0x2d, 0x40, 0x19, 0x77, 0xda, 0x19, 0xa6, 0xc0, 0x05, 0x0d,
	0x34, 0x8c, 0xa0, 0x3b, 0x50, 0x8f, 0xf2, 0x93, 0xfe, 0x39, 0x8f, 0x94, 0xb3, 0xa8, 0xaf, 0xfb,
	0xf4, 0xeb, 0x52, 0x84, 0xef, 0x1c, 0xfe, 0xfd, 0xa2, 0x61, 0xff, 0x7c, 0xd2, 0xb0, 0x7f, 0x39,
	0x69, 0xd8, 0x7f, 0x9c, 0x34, 0xec, 0xbf, 0x4e, 0x1a, 0xf6, 0xf3, 0x93, 0x86, 0xfd, 0xdb, 0x4f,
	0x37, 0x6d, 0x68, 0xfa, 0x61, 0xd0, 0xd2, 0xc5, 0x21, 0xff, 0x43, 0x8b, 0xc4, 0x5f, 0x14, 0xff,
	0x43, 0xd2, 0x5e, 0xd0, 0x89, 0x78, 0xff, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xcd, 0xd4,
	0x21, 0x59, 0x11, 0x00, 0x00,
}

func (this *AdminBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlock)
	if !ok {
		that2, ok := that.(AdminBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AdminBlockHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockHeader)
	if !ok {
		that2, ok := that.(AdminBlockHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PreviousBackRefHash.Equal(that1.PreviousBackRefHash) {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AdminBlockEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry)
	if !ok {
		that2, ok := that.(AdminBlockEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_AddAuditServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_AddAuditServer)
	if !ok {
		that2, ok := that.(AdminBlockEntry_AddAuditServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AddAuditServer.Equal(that1.AddAuditServer) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_AddEfficiency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_AddEfficiency)
	if !ok {
		that2, ok := that.(AdminBlockEntry_AddEfficiency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AddEfficiency.Equal(that1.AddEfficiency) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_AddFactoidAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_AddFactoidAddress)
	if !ok {
		that2, ok := that.(AdminBlockEntry_AddFactoidAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AddFactoidAddress.Equal(that1.AddFactoidAddress) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_AddFederatedServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_AddFederatedServer)
	if !ok {
		that2, ok := that.(AdminBlockEntry_AddFederatedServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AddFederatedServer.Equal(that1.AddFederatedServer) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_AddFederatedServerBitcoinAnchorKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_AddFederatedServerBitcoinAnchorKey)
	if !ok {
		that2, ok := that.(AdminBlockEntry_AddFederatedServerBitcoinAnchorKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AddFederatedServerBitcoinAnchorKey.Equal(that1.AddFederatedServerBitcoinAnchorKey) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_AddFederatedServerSigningKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_AddFederatedServerSigningKey)
	if !ok {
		that2, ok := that.(AdminBlockEntry_AddFederatedServerSigningKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AddFederatedServerSigningKey.Equal(that1.AddFederatedServerSigningKey) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_AddReplaceMatryoshkaHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_AddReplaceMatryoshkaHash)
	if !ok {
		that2, ok := that.(AdminBlockEntry_AddReplaceMatryoshkaHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AddReplaceMatryoshkaHash.Equal(that1.AddReplaceMatryoshkaHash) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_CancelCoinbaseDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_CancelCoinbaseDescriptor)
	if !ok {
		that2, ok := that.(AdminBlockEntry_CancelCoinbaseDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CancelCoinbaseDescriptor.Equal(that1.CancelCoinbaseDescriptor) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_CoinbaseDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_CoinbaseDescriptor)
	if !ok {
		that2, ok := that.(AdminBlockEntry_CoinbaseDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CoinbaseDescriptor.Equal(that1.CoinbaseDescriptor) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_DirectoryBlockSignatureEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_DirectoryBlockSignatureEntry)
	if !ok {
		that2, ok := that.(AdminBlockEntry_DirectoryBlockSignatureEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DirectoryBlockSignatureEntry.Equal(that1.DirectoryBlockSignatureEntry) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_EndOfMinuteEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_EndOfMinuteEntry)
	if !ok {
		that2, ok := that.(AdminBlockEntry_EndOfMinuteEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndOfMinuteEntry.Equal(that1.EndOfMinuteEntry) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_ForwardCompatibleEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_ForwardCompatibleEntry)
	if !ok {
		that2, ok := that.(AdminBlockEntry_ForwardCompatibleEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForwardCompatibleEntry.Equal(that1.ForwardCompatibleEntry) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_IncreaseServerCount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_IncreaseServerCount)
	if !ok {
		that2, ok := that.(AdminBlockEntry_IncreaseServerCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IncreaseServerCount.Equal(that1.IncreaseServerCount) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_RemoveFederatedServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_RemoveFederatedServer)
	if !ok {
		that2, ok := that.(AdminBlockEntry_RemoveFederatedServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RemoveFederatedServer.Equal(that1.RemoveFederatedServer) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_RevealMatryoshkaHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_RevealMatryoshkaHash)
	if !ok {
		that2, ok := that.(AdminBlockEntry_RevealMatryoshkaHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RevealMatryoshkaHash.Equal(that1.RevealMatryoshkaHash) {
		return false
	}
	return true
}
func (this *AdminBlockEntry_ServerFault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminBlockEntry_ServerFault)
	if !ok {
		that2, ok := that.(AdminBlockEntry_ServerFault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServerFault.Equal(that1.ServerFault) {
		return false
	}
	return true
}
func (this *AddAuditServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddAuditServer)
	if !ok {
		that2, ok := that.(AddAuditServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IdentityChainID.Equal(that1.IdentityChainID) {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AddEfficiency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddEfficiency)
	if !ok {
		that2, ok := that.(AddEfficiency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IdentityChainID.Equal(that1.IdentityChainID) {
		return false
	}
	if this.Efficiency != that1.Efficiency {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AddFactoidAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddFactoidAddress)
	if !ok {
		that2, ok := that.(AddFactoidAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IdentityChainID.Equal(that1.IdentityChainID) {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AddFederatedServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddFederatedServer)
	if !ok {
		that2, ok := that.(AddFederatedServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IdentityChainID.Equal(that1.IdentityChainID) {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AddFederatedServerBitcoinAnchorKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddFederatedServerBitcoinAnchorKey)
	if !ok {
		that2, ok := that.(AddFederatedServerBitcoinAnchorKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IdentityChainID.Equal(that1.IdentityChainID) {
		return false
	}
	if this.KeyPriority != that1.KeyPriority {
		return false
	}
	if this.KeyType != that1.KeyType {
		return false
	}
	if !bytes.Equal(this.EcdsaPublicKey, that1.EcdsaPublicKey) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AddFederatedServerSigningKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddFederatedServerSigningKey)
	if !ok {
		that2, ok := that.(AddFederatedServerSigningKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IdentityChainID.Equal(that1.IdentityChainID) {
		return false
	}
	if this.KeyPriority != that1.KeyPriority {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AddReplaceMatryoshkaHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddReplaceMatryoshkaHash)
	if !ok {
		that2, ok := that.(AddReplaceMatryoshkaHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IdentityChainID.Equal(that1.IdentityChainID) {
		return false
	}
	if !this.MatryoshkaHash.Equal(that1.MatryoshkaHash) {
		return false
	}
	if len(this.FactoidOutputs) != len(that1.FactoidOutputs) {
		return false
	}
	for i := range this.FactoidOutputs {
		if !this.FactoidOutputs[i].Equal(that1.FactoidOutputs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CancelCoinbaseDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelCoinbaseDescriptor)
	if !ok {
		that2, ok := that.(CancelCoinbaseDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DescriptorHeight != that1.DescriptorHeight {
		return false
	}
	if this.DescriptorIndex != that1.DescriptorIndex {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CoinbaseDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoinbaseDescriptor)
	if !ok {
		that2, ok := that.(CoinbaseDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FactoidOutputs) != len(that1.FactoidOutputs) {
		return false
	}
	for i := range this.FactoidOutputs {
		if !this.FactoidOutputs[i].Equal(that1.FactoidOutputs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DirectoryBlockSignatureEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DirectoryBlockSignatureEntry)
	if !ok {
		that2, ok := that.(DirectoryBlockSignatureEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IdentityAdminChainID.Equal(that1.IdentityAdminChainID) {
		return false
	}
	if !this.PreviousDirectoryBlockSignature.Equal(that1.PreviousDirectoryBlockSignature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EndOfMinuteEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndOfMinuteEntry)
	if !ok {
		that2, ok := that.(EndOfMinuteEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinuteNumber != that1.MinuteNumber {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ForwardCompatibleEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForwardCompatibleEntry)
	if !ok {
		that2, ok := that.(ForwardCompatibleEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Size_ != that1.Size_ {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IncreaseServerCount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IncreaseServerCount)
	if !ok {
		that2, ok := that.(IncreaseServerCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RemoveFederatedServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveFederatedServer)
	if !ok {
		that2, ok := that.(RemoveFederatedServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IdentityChainID.Equal(that1.IdentityChainID) {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RevealMatryoshkaHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RevealMatryoshkaHash)
	if !ok {
		that2, ok := that.(RevealMatryoshkaHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IdentityChainID.Equal(that1.IdentityChainID) {
		return false
	}
	if !this.MatryoshkaHash.Equal(that1.MatryoshkaHash) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServerFault) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerFault)
	if !ok {
		that2, ok := that.(ServerFault)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if !this.ServerID.Equal(that1.ServerID) {
		return false
	}
	if !this.AuditServerID.Equal(that1.AuditServerID) {
		return false
	}
	if this.VmIndex != that1.VmIndex {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if this.MessageEntryHeight != that1.MessageEntryHeight {
		return false
	}
	if len(this.SignatureList) != len(that1.SignatureList) {
		return false
	}
	for i := range this.SignatureList {
		if !this.SignatureList[i].Equal(that1.SignatureList[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type AdminBlockGetter interface {
	GetAdminBlock() *AdminBlock
}

var GraphQLAdminBlockType *github_com_graphql_go_graphql.Object

type AdminBlockHeaderGetter interface {
	GetAdminBlockHeader() *AdminBlockHeader
}

var GraphQLAdminBlockHeaderType *github_com_graphql_go_graphql.Object

type AdminBlockEntryGetter interface {
	GetAdminBlockEntry() *AdminBlockEntry
}

var GraphQLAdminBlockEntryType *github_com_graphql_go_graphql.Object
var GraphQLAdminBlockEntryValueUnion *github_com_graphql_go_graphql.Union

type AddAuditServerGetter interface {
	GetAddAuditServer() *AddAuditServer
}

var GraphQLAddAuditServerType *github_com_graphql_go_graphql.Object

type AddEfficiencyGetter interface {
	GetAddEfficiency() *AddEfficiency
}

var GraphQLAddEfficiencyType *github_com_graphql_go_graphql.Object

type AddFactoidAddressGetter interface {
	GetAddFactoidAddress() *AddFactoidAddress
}

var GraphQLAddFactoidAddressType *github_com_graphql_go_graphql.Object

type AddFederatedServerGetter interface {
	GetAddFederatedServer() *AddFederatedServer
}

var GraphQLAddFederatedServerType *github_com_graphql_go_graphql.Object

type AddFederatedServerBitcoinAnchorKeyGetter interface {
	GetAddFederatedServerBitcoinAnchorKey() *AddFederatedServerBitcoinAnchorKey
}

var GraphQLAddFederatedServerBitcoinAnchorKeyType *github_com_graphql_go_graphql.Object

type AddFederatedServerSigningKeyGetter interface {
	GetAddFederatedServerSigningKey() *AddFederatedServerSigningKey
}

var GraphQLAddFederatedServerSigningKeyType *github_com_graphql_go_graphql.Object

type AddReplaceMatryoshkaHashGetter interface {
	GetAddReplaceMatryoshkaHash() *AddReplaceMatryoshkaHash
}

var GraphQLAddReplaceMatryoshkaHashType *github_com_graphql_go_graphql.Object

type CancelCoinbaseDescriptorGetter interface {
	GetCancelCoinbaseDescriptor() *CancelCoinbaseDescriptor
}

var GraphQLCancelCoinbaseDescriptorType *github_com_graphql_go_graphql.Object

type CoinbaseDescriptorGetter interface {
	GetCoinbaseDescriptor() *CoinbaseDescriptor
}

var GraphQLCoinbaseDescriptorType *github_com_graphql_go_graphql.Object

type DirectoryBlockSignatureEntryGetter interface {
	GetDirectoryBlockSignatureEntry() *DirectoryBlockSignatureEntry
}

var GraphQLDirectoryBlockSignatureEntryType *github_com_graphql_go_graphql.Object

type EndOfMinuteEntryGetter interface {
	GetEndOfMinuteEntry() *EndOfMinuteEntry
}

var GraphQLEndOfMinuteEntryType *github_com_graphql_go_graphql.Object

type ForwardCompatibleEntryGetter interface {
	GetForwardCompatibleEntry() *ForwardCompatibleEntry
}

var GraphQLForwardCompatibleEntryType *github_com_graphql_go_graphql.Object

type IncreaseServerCountGetter interface {
	GetIncreaseServerCount() *IncreaseServerCount
}

var GraphQLIncreaseServerCountType *github_com_graphql_go_graphql.Object

type RemoveFederatedServerGetter interface {
	GetRemoveFederatedServer() *RemoveFederatedServer
}

var GraphQLRemoveFederatedServerType *github_com_graphql_go_graphql.Object

type RevealMatryoshkaHashGetter interface {
	GetRevealMatryoshkaHash() *RevealMatryoshkaHash
}

var GraphQLRevealMatryoshkaHashType *github_com_graphql_go_graphql.Object

type ServerFaultGetter interface {
	GetServerFault() *ServerFault
}

var GraphQLServerFaultType *github_com_graphql_go_graphql.Object

func (g *AdminBlockEntry_AddAuditServer) GetAddAuditServer() *AddAuditServer {
	return g.AddAuditServer
}
func (g *AdminBlockEntry_AddEfficiency) GetAddEfficiency() *AddEfficiency {
	return g.AddEfficiency
}
func (g *AdminBlockEntry_AddFactoidAddress) GetAddFactoidAddress() *AddFactoidAddress {
	return g.AddFactoidAddress
}
func (g *AdminBlockEntry_AddFederatedServer) GetAddFederatedServer() *AddFederatedServer {
	return g.AddFederatedServer
}
func (g *AdminBlockEntry_AddFederatedServerBitcoinAnchorKey) GetAddFederatedServerBitcoinAnchorKey() *AddFederatedServerBitcoinAnchorKey {
	return g.AddFederatedServerBitcoinAnchorKey
}
func (g *AdminBlockEntry_AddFederatedServerSigningKey) GetAddFederatedServerSigningKey() *AddFederatedServerSigningKey {
	return g.AddFederatedServerSigningKey
}
func (g *AdminBlockEntry_AddReplaceMatryoshkaHash) GetAddReplaceMatryoshkaHash() *AddReplaceMatryoshkaHash {
	return g.AddReplaceMatryoshkaHash
}
func (g *AdminBlockEntry_CancelCoinbaseDescriptor) GetCancelCoinbaseDescriptor() *CancelCoinbaseDescriptor {
	return g.CancelCoinbaseDescriptor
}
func (g *AdminBlockEntry_CoinbaseDescriptor) GetCoinbaseDescriptor() *CoinbaseDescriptor {
	return g.CoinbaseDescriptor
}
func (g *AdminBlockEntry_DirectoryBlockSignatureEntry) GetDirectoryBlockSignatureEntry() *DirectoryBlockSignatureEntry {
	return g.DirectoryBlockSignatureEntry
}
func (g *AdminBlockEntry_EndOfMinuteEntry) GetEndOfMinuteEntry() *EndOfMinuteEntry {
	return g.EndOfMinuteEntry
}
func (g *AdminBlockEntry_ForwardCompatibleEntry) GetForwardCompatibleEntry() *ForwardCompatibleEntry {
	return g.ForwardCompatibleEntry
}
func (g *AdminBlockEntry_IncreaseServerCount) GetIncreaseServerCount() *IncreaseServerCount {
	return g.IncreaseServerCount
}
func (g *AdminBlockEntry_RemoveFederatedServer) GetRemoveFederatedServer() *RemoveFederatedServer {
	return g.RemoveFederatedServer
}
func (g *AdminBlockEntry_RevealMatryoshkaHash) GetRevealMatryoshkaHash() *RevealMatryoshkaHash {
	return g.RevealMatryoshkaHash
}
func (g *AdminBlockEntry_ServerFault) GetServerFault() *ServerFault {
	return g.ServerFault
}

func init() {
	GraphQLAdminBlockType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "AdminBlock",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"header": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLAdminBlockHeaderType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AdminBlock)
						if ok {
							if obj.Header == nil {
								return nil, nil
							}
							return obj.GetHeader(), nil
						}
						inter, ok := p.Source.(AdminBlockGetter)
						if ok {
							face := inter.GetAdminBlock()
							if face == nil {
								return nil, nil
							}
							if face.Header == nil {
								return nil, nil
							}
							return face.GetHeader(), nil
						}
						return nil, fmt.Errorf("field header not resolved")
					},
				},
				"entries": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLAdminBlockEntryType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AdminBlock)
						if ok {
							return obj.Entries, nil
						}
						inter, ok := p.Source.(AdminBlockGetter)
						if ok {
							face := inter.GetAdminBlock()
							if face == nil {
								return nil, nil
							}
							return face.Entries, nil
						}
						return nil, fmt.Errorf("field entries not resolved")
					},
				},
			}
		}),
	})
	GraphQLAdminBlockHeaderType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "AdminBlockHeader",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"previousBackRefHash": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AdminBlockHeader)
						if ok {
							if obj.PreviousBackRefHash == nil {
								return nil, nil
							}
							return obj.GetPreviousBackRefHash(), nil
						}
						inter, ok := p.Source.(AdminBlockHeaderGetter)
						if ok {
							face := inter.GetAdminBlockHeader()
							if face == nil {
								return nil, nil
							}
							if face.PreviousBackRefHash == nil {
								return nil, nil
							}
							return face.GetPreviousBackRefHash(), nil
						}
						return nil, fmt.Errorf("field previousBackRefHash not resolved")
					},
				},
				"blockHeight": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AdminBlockHeader)
						if ok {
							return obj.BlockHeight, nil
						}
						inter, ok := p.Source.(AdminBlockHeaderGetter)
						if ok {
							face := inter.GetAdminBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.BlockHeight, nil
						}
						return nil, fmt.Errorf("field blockHeight not resolved")
					},
				},
			}
		}),
	})
	GraphQLAdminBlockEntryType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "AdminBlockEntry",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"value": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLAdminBlockEntryValueUnion,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AdminBlockEntry)
						if !ok {
							return nil, fmt.Errorf("field value not resolved")
						}
						return obj.GetValue(), nil
					},
				},
			}
		}),
	})
	GraphQLAddAuditServerType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "AddAuditServer",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"identityChainID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddAuditServer)
						if ok {
							if obj.IdentityChainID == nil {
								return nil, nil
							}
							return obj.GetIdentityChainID(), nil
						}
						inter, ok := p.Source.(AddAuditServerGetter)
						if ok {
							face := inter.GetAddAuditServer()
							if face == nil {
								return nil, nil
							}
							if face.IdentityChainID == nil {
								return nil, nil
							}
							return face.GetIdentityChainID(), nil
						}
						return nil, fmt.Errorf("field identityChainID not resolved")
					},
				},
				"blockHeight": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddAuditServer)
						if ok {
							return obj.BlockHeight, nil
						}
						inter, ok := p.Source.(AddAuditServerGetter)
						if ok {
							face := inter.GetAddAuditServer()
							if face == nil {
								return nil, nil
							}
							return face.BlockHeight, nil
						}
						return nil, fmt.Errorf("field blockHeight not resolved")
					},
				},
			}
		}),
	})
	GraphQLAddEfficiencyType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "AddEfficiency",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"identityChainID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddEfficiency)
						if ok {
							if obj.IdentityChainID == nil {
								return nil, nil
							}
							return obj.GetIdentityChainID(), nil
						}
						inter, ok := p.Source.(AddEfficiencyGetter)
						if ok {
							face := inter.GetAddEfficiency()
							if face == nil {
								return nil, nil
							}
							if face.IdentityChainID == nil {
								return nil, nil
							}
							return face.GetIdentityChainID(), nil
						}
						return nil, fmt.Errorf("field identityChainID not resolved")
					},
				},
				"efficiency": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddEfficiency)
						if ok {
							return obj.Efficiency, nil
						}
						inter, ok := p.Source.(AddEfficiencyGetter)
						if ok {
							face := inter.GetAddEfficiency()
							if face == nil {
								return nil, nil
							}
							return face.Efficiency, nil
						}
						return nil, fmt.Errorf("field efficiency not resolved")
					},
				},
			}
		}),
	})
	GraphQLAddFactoidAddressType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "AddFactoidAddress",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"identityChainID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddFactoidAddress)
						if ok {
							if obj.IdentityChainID == nil {
								return nil, nil
							}
							return obj.GetIdentityChainID(), nil
						}
						inter, ok := p.Source.(AddFactoidAddressGetter)
						if ok {
							face := inter.GetAddFactoidAddress()
							if face == nil {
								return nil, nil
							}
							if face.IdentityChainID == nil {
								return nil, nil
							}
							return face.GetIdentityChainID(), nil
						}
						return nil, fmt.Errorf("field identityChainID not resolved")
					},
				},
				"address": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddFactoidAddress)
						if ok {
							if obj.Address == nil {
								return nil, nil
							}
							return obj.GetAddress(), nil
						}
						inter, ok := p.Source.(AddFactoidAddressGetter)
						if ok {
							face := inter.GetAddFactoidAddress()
							if face == nil {
								return nil, nil
							}
							if face.Address == nil {
								return nil, nil
							}
							return face.GetAddress(), nil
						}
						return nil, fmt.Errorf("field address not resolved")
					},
				},
			}
		}),
	})
	GraphQLAddFederatedServerType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "AddFederatedServer",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"identityChainID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddFederatedServer)
						if ok {
							if obj.IdentityChainID == nil {
								return nil, nil
							}
							return obj.GetIdentityChainID(), nil
						}
						inter, ok := p.Source.(AddFederatedServerGetter)
						if ok {
							face := inter.GetAddFederatedServer()
							if face == nil {
								return nil, nil
							}
							if face.IdentityChainID == nil {
								return nil, nil
							}
							return face.GetIdentityChainID(), nil
						}
						return nil, fmt.Errorf("field identityChainID not resolved")
					},
				},
				"blockHeight": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddFederatedServer)
						if ok {
							return obj.BlockHeight, nil
						}
						inter, ok := p.Source.(AddFederatedServerGetter)
						if ok {
							face := inter.GetAddFederatedServer()
							if face == nil {
								return nil, nil
							}
							return face.BlockHeight, nil
						}
						return nil, fmt.Errorf("field blockHeight not resolved")
					},
				},
			}
		}),
	})
	GraphQLAddFederatedServerBitcoinAnchorKeyType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "AddFederatedServerBitcoinAnchorKey",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"identityChainID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddFederatedServerBitcoinAnchorKey)
						if ok {
							if obj.IdentityChainID == nil {
								return nil, nil
							}
							return obj.GetIdentityChainID(), nil
						}
						inter, ok := p.Source.(AddFederatedServerBitcoinAnchorKeyGetter)
						if ok {
							face := inter.GetAddFederatedServerBitcoinAnchorKey()
							if face == nil {
								return nil, nil
							}
							if face.IdentityChainID == nil {
								return nil, nil
							}
							return face.GetIdentityChainID(), nil
						}
						return nil, fmt.Errorf("field identityChainID not resolved")
					},
				},
				"keyPriority": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddFederatedServerBitcoinAnchorKey)
						if ok {
							return obj.KeyPriority, nil
						}
						inter, ok := p.Source.(AddFederatedServerBitcoinAnchorKeyGetter)
						if ok {
							face := inter.GetAddFederatedServerBitcoinAnchorKey()
							if face == nil {
								return nil, nil
							}
							return face.KeyPriority, nil
						}
						return nil, fmt.Errorf("field keyPriority not resolved")
					},
				},
				"keyType": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddFederatedServerBitcoinAnchorKey)
						if ok {
							return obj.KeyType, nil
						}
						inter, ok := p.Source.(AddFederatedServerBitcoinAnchorKeyGetter)
						if ok {
							face := inter.GetAddFederatedServerBitcoinAnchorKey()
							if face == nil {
								return nil, nil
							}
							return face.KeyType, nil
						}
						return nil, fmt.Errorf("field keyType not resolved")
					},
				},
				"ecdsaPublicKey": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddFederatedServerBitcoinAnchorKey)
						if ok {
							return obj.EcdsaPublicKey, nil
						}
						inter, ok := p.Source.(AddFederatedServerBitcoinAnchorKeyGetter)
						if ok {
							face := inter.GetAddFederatedServerBitcoinAnchorKey()
							if face == nil {
								return nil, nil
							}
							return face.EcdsaPublicKey, nil
						}
						return nil, fmt.Errorf("field ecdsaPublicKey not resolved")
					},
				},
			}
		}),
	})
	GraphQLAddFederatedServerSigningKeyType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "AddFederatedServerSigningKey",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"identityChainID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddFederatedServerSigningKey)
						if ok {
							if obj.IdentityChainID == nil {
								return nil, nil
							}
							return obj.GetIdentityChainID(), nil
						}
						inter, ok := p.Source.(AddFederatedServerSigningKeyGetter)
						if ok {
							face := inter.GetAddFederatedServerSigningKey()
							if face == nil {
								return nil, nil
							}
							if face.IdentityChainID == nil {
								return nil, nil
							}
							return face.GetIdentityChainID(), nil
						}
						return nil, fmt.Errorf("field identityChainID not resolved")
					},
				},
				"keyPriority": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddFederatedServerSigningKey)
						if ok {
							return obj.KeyPriority, nil
						}
						inter, ok := p.Source.(AddFederatedServerSigningKeyGetter)
						if ok {
							face := inter.GetAddFederatedServerSigningKey()
							if face == nil {
								return nil, nil
							}
							return face.KeyPriority, nil
						}
						return nil, fmt.Errorf("field keyPriority not resolved")
					},
				},
				"publicKey": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddFederatedServerSigningKey)
						if ok {
							return obj.PublicKey, nil
						}
						inter, ok := p.Source.(AddFederatedServerSigningKeyGetter)
						if ok {
							face := inter.GetAddFederatedServerSigningKey()
							if face == nil {
								return nil, nil
							}
							return face.PublicKey, nil
						}
						return nil, fmt.Errorf("field publicKey not resolved")
					},
				},
				"blockHeight": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddFederatedServerSigningKey)
						if ok {
							return obj.BlockHeight, nil
						}
						inter, ok := p.Source.(AddFederatedServerSigningKeyGetter)
						if ok {
							face := inter.GetAddFederatedServerSigningKey()
							if face == nil {
								return nil, nil
							}
							return face.BlockHeight, nil
						}
						return nil, fmt.Errorf("field blockHeight not resolved")
					},
				},
			}
		}),
	})
	GraphQLAddReplaceMatryoshkaHashType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "AddReplaceMatryoshkaHash",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"identityChainID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddReplaceMatryoshkaHash)
						if ok {
							if obj.IdentityChainID == nil {
								return nil, nil
							}
							return obj.GetIdentityChainID(), nil
						}
						inter, ok := p.Source.(AddReplaceMatryoshkaHashGetter)
						if ok {
							face := inter.GetAddReplaceMatryoshkaHash()
							if face == nil {
								return nil, nil
							}
							if face.IdentityChainID == nil {
								return nil, nil
							}
							return face.GetIdentityChainID(), nil
						}
						return nil, fmt.Errorf("field identityChainID not resolved")
					},
				},
				"matryoshkaHash": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddReplaceMatryoshkaHash)
						if ok {
							if obj.MatryoshkaHash == nil {
								return nil, nil
							}
							return obj.GetMatryoshkaHash(), nil
						}
						inter, ok := p.Source.(AddReplaceMatryoshkaHashGetter)
						if ok {
							face := inter.GetAddReplaceMatryoshkaHash()
							if face == nil {
								return nil, nil
							}
							if face.MatryoshkaHash == nil {
								return nil, nil
							}
							return face.GetMatryoshkaHash(), nil
						}
						return nil, fmt.Errorf("field matryoshkaHash not resolved")
					},
				},
				"factoidOutputs": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLTransactionAddressType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AddReplaceMatryoshkaHash)
						if ok {
							return obj.FactoidOutputs, nil
						}
						inter, ok := p.Source.(AddReplaceMatryoshkaHashGetter)
						if ok {
							face := inter.GetAddReplaceMatryoshkaHash()
							if face == nil {
								return nil, nil
							}
							return face.FactoidOutputs, nil
						}
						return nil, fmt.Errorf("field factoidOutputs not resolved")
					},
				},
			}
		}),
	})
	GraphQLCancelCoinbaseDescriptorType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "CancelCoinbaseDescriptor",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"descriptorHeight": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CancelCoinbaseDescriptor)
						if ok {
							return obj.DescriptorHeight, nil
						}
						inter, ok := p.Source.(CancelCoinbaseDescriptorGetter)
						if ok {
							face := inter.GetCancelCoinbaseDescriptor()
							if face == nil {
								return nil, nil
							}
							return face.DescriptorHeight, nil
						}
						return nil, fmt.Errorf("field descriptorHeight not resolved")
					},
				},
				"descriptorIndex": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CancelCoinbaseDescriptor)
						if ok {
							return obj.DescriptorIndex, nil
						}
						inter, ok := p.Source.(CancelCoinbaseDescriptorGetter)
						if ok {
							face := inter.GetCancelCoinbaseDescriptor()
							if face == nil {
								return nil, nil
							}
							return face.DescriptorIndex, nil
						}
						return nil, fmt.Errorf("field descriptorIndex not resolved")
					},
				},
			}
		}),
	})
	GraphQLCoinbaseDescriptorType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "CoinbaseDescriptor",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"factoidOutputs": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLTransAddressType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*CoinbaseDescriptor)
						if ok {
							return obj.FactoidOutputs, nil
						}
						inter, ok := p.Source.(CoinbaseDescriptorGetter)
						if ok {
							face := inter.GetCoinbaseDescriptor()
							if face == nil {
								return nil, nil
							}
							return face.FactoidOutputs, nil
						}
						return nil, fmt.Errorf("field factoidOutputs not resolved")
					},
				},
			}
		}),
	})
	GraphQLDirectoryBlockSignatureEntryType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "DirectoryBlockSignatureEntry",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"identityAdminChainID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlockSignatureEntry)
						if ok {
							if obj.IdentityAdminChainID == nil {
								return nil, nil
							}
							return obj.GetIdentityAdminChainID(), nil
						}
						inter, ok := p.Source.(DirectoryBlockSignatureEntryGetter)
						if ok {
							face := inter.GetDirectoryBlockSignatureEntry()
							if face == nil {
								return nil, nil
							}
							if face.IdentityAdminChainID == nil {
								return nil, nil
							}
							return face.GetIdentityAdminChainID(), nil
						}
						return nil, fmt.Errorf("field identityAdminChainID not resolved")
					},
				},
				"previousDirectoryBlockSignature": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLSignatureType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlockSignatureEntry)
						if ok {
							if obj.PreviousDirectoryBlockSignature == nil {
								return nil, nil
							}
							return obj.GetPreviousDirectoryBlockSignature(), nil
						}
						inter, ok := p.Source.(DirectoryBlockSignatureEntryGetter)
						if ok {
							face := inter.GetDirectoryBlockSignatureEntry()
							if face == nil {
								return nil, nil
							}
							if face.PreviousDirectoryBlockSignature == nil {
								return nil, nil
							}
							return face.GetPreviousDirectoryBlockSignature(), nil
						}
						return nil, fmt.Errorf("field previousDirectoryBlockSignature not resolved")
					},
				},
			}
		}),
	})
	GraphQLEndOfMinuteEntryType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "EndOfMinuteEntry",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"minuteNumber": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EndOfMinuteEntry)
						if ok {
							return obj.MinuteNumber, nil
						}
						inter, ok := p.Source.(EndOfMinuteEntryGetter)
						if ok {
							face := inter.GetEndOfMinuteEntry()
							if face == nil {
								return nil, nil
							}
							return face.MinuteNumber, nil
						}
						return nil, fmt.Errorf("field minuteNumber not resolved")
					},
				},
			}
		}),
	})
	GraphQLForwardCompatibleEntryType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ForwardCompatibleEntry",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"size": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ForwardCompatibleEntry)
						if ok {
							return obj.Size_, nil
						}
						inter, ok := p.Source.(ForwardCompatibleEntryGetter)
						if ok {
							face := inter.GetForwardCompatibleEntry()
							if face == nil {
								return nil, nil
							}
							return face.Size_, nil
						}
						return nil, fmt.Errorf("field size not resolved")
					},
				},
				"data": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ForwardCompatibleEntry)
						if ok {
							return obj.Data, nil
						}
						inter, ok := p.Source.(ForwardCompatibleEntryGetter)
						if ok {
							face := inter.GetForwardCompatibleEntry()
							if face == nil {
								return nil, nil
							}
							return face.Data, nil
						}
						return nil, fmt.Errorf("field data not resolved")
					},
				},
			}
		}),
	})
	GraphQLIncreaseServerCountType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "IncreaseServerCount",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"amount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IncreaseServerCount)
						if ok {
							return obj.Amount, nil
						}
						inter, ok := p.Source.(IncreaseServerCountGetter)
						if ok {
							face := inter.GetIncreaseServerCount()
							if face == nil {
								return nil, nil
							}
							return face.Amount, nil
						}
						return nil, fmt.Errorf("field amount not resolved")
					},
				},
			}
		}),
	})
	GraphQLRemoveFederatedServerType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "RemoveFederatedServer",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"identityChainID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*RemoveFederatedServer)
						if ok {
							if obj.IdentityChainID == nil {
								return nil, nil
							}
							return obj.GetIdentityChainID(), nil
						}
						inter, ok := p.Source.(RemoveFederatedServerGetter)
						if ok {
							face := inter.GetRemoveFederatedServer()
							if face == nil {
								return nil, nil
							}
							if face.IdentityChainID == nil {
								return nil, nil
							}
							return face.GetIdentityChainID(), nil
						}
						return nil, fmt.Errorf("field identityChainID not resolved")
					},
				},
				"blockHeight": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*RemoveFederatedServer)
						if ok {
							return obj.BlockHeight, nil
						}
						inter, ok := p.Source.(RemoveFederatedServerGetter)
						if ok {
							face := inter.GetRemoveFederatedServer()
							if face == nil {
								return nil, nil
							}
							return face.BlockHeight, nil
						}
						return nil, fmt.Errorf("field blockHeight not resolved")
					},
				},
			}
		}),
	})
	GraphQLRevealMatryoshkaHashType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "RevealMatryoshkaHash",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"identityChainID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*RevealMatryoshkaHash)
						if ok {
							if obj.IdentityChainID == nil {
								return nil, nil
							}
							return obj.GetIdentityChainID(), nil
						}
						inter, ok := p.Source.(RevealMatryoshkaHashGetter)
						if ok {
							face := inter.GetRevealMatryoshkaHash()
							if face == nil {
								return nil, nil
							}
							if face.IdentityChainID == nil {
								return nil, nil
							}
							return face.GetIdentityChainID(), nil
						}
						return nil, fmt.Errorf("field identityChainID not resolved")
					},
				},
				"matryoshkaHash": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*RevealMatryoshkaHash)
						if ok {
							if obj.MatryoshkaHash == nil {
								return nil, nil
							}
							return obj.GetMatryoshkaHash(), nil
						}
						inter, ok := p.Source.(RevealMatryoshkaHashGetter)
						if ok {
							face := inter.GetRevealMatryoshkaHash()
							if face == nil {
								return nil, nil
							}
							if face.MatryoshkaHash == nil {
								return nil, nil
							}
							return face.GetMatryoshkaHash(), nil
						}
						return nil, fmt.Errorf("field matryoshkaHash not resolved")
					},
				},
			}
		}),
	})
	GraphQLServerFaultType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ServerFault",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"timestamp": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ServerFault)
						if ok {
							if obj.Timestamp == nil {
								return nil, nil
							}
							return obj.GetTimestamp(), nil
						}
						inter, ok := p.Source.(ServerFaultGetter)
						if ok {
							face := inter.GetServerFault()
							if face == nil {
								return nil, nil
							}
							if face.Timestamp == nil {
								return nil, nil
							}
							return face.GetTimestamp(), nil
						}
						return nil, fmt.Errorf("field timestamp not resolved")
					},
				},
				"serverID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ServerFault)
						if ok {
							if obj.ServerID == nil {
								return nil, nil
							}
							return obj.GetServerID(), nil
						}
						inter, ok := p.Source.(ServerFaultGetter)
						if ok {
							face := inter.GetServerFault()
							if face == nil {
								return nil, nil
							}
							if face.ServerID == nil {
								return nil, nil
							}
							return face.GetServerID(), nil
						}
						return nil, fmt.Errorf("field serverID not resolved")
					},
				},
				"auditServerID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ServerFault)
						if ok {
							if obj.AuditServerID == nil {
								return nil, nil
							}
							return obj.GetAuditServerID(), nil
						}
						inter, ok := p.Source.(ServerFaultGetter)
						if ok {
							face := inter.GetServerFault()
							if face == nil {
								return nil, nil
							}
							if face.AuditServerID == nil {
								return nil, nil
							}
							return face.GetAuditServerID(), nil
						}
						return nil, fmt.Errorf("field auditServerID not resolved")
					},
				},
				"vmIndex": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ServerFault)
						if ok {
							return obj.VmIndex, nil
						}
						inter, ok := p.Source.(ServerFaultGetter)
						if ok {
							face := inter.GetServerFault()
							if face == nil {
								return nil, nil
							}
							return face.VmIndex, nil
						}
						return nil, fmt.Errorf("field vmIndex not resolved")
					},
				},
				"blockHeight": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ServerFault)
						if ok {
							return obj.BlockHeight, nil
						}
						inter, ok := p.Source.(ServerFaultGetter)
						if ok {
							face := inter.GetServerFault()
							if face == nil {
								return nil, nil
							}
							return face.BlockHeight, nil
						}
						return nil, fmt.Errorf("field blockHeight not resolved")
					},
				},
				"messageEntryHeight": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ServerFault)
						if ok {
							return obj.MessageEntryHeight, nil
						}
						inter, ok := p.Source.(ServerFaultGetter)
						if ok {
							face := inter.GetServerFault()
							if face == nil {
								return nil, nil
							}
							return face.MessageEntryHeight, nil
						}
						return nil, fmt.Errorf("field messageEntryHeight not resolved")
					},
				},
				"signatureList": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLSignatureType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ServerFault)
						if ok {
							return obj.SignatureList, nil
						}
						inter, ok := p.Source.(ServerFaultGetter)
						if ok {
							face := inter.GetServerFault()
							if face == nil {
								return nil, nil
							}
							return face.SignatureList, nil
						}
						return nil, fmt.Errorf("field signatureList not resolved")
					},
				},
			}
		}),
	})
	GraphQLAdminBlockEntryValueUnion = github_com_graphql_go_graphql.NewUnion(github_com_graphql_go_graphql.UnionConfig{
		Name:        "AdminBlockEntryValue",
		Description: "",
		Types: []*github_com_graphql_go_graphql.Object{
			GraphQLAddAuditServerType,
			GraphQLAddEfficiencyType,
			GraphQLAddFactoidAddressType,
			GraphQLAddFederatedServerType,
			GraphQLAddFederatedServerBitcoinAnchorKeyType,
			GraphQLAddFederatedServerSigningKeyType,
			GraphQLAddReplaceMatryoshkaHashType,
			GraphQLCancelCoinbaseDescriptorType,
			GraphQLCoinbaseDescriptorType,
			GraphQLDirectoryBlockSignatureEntryType,
			GraphQLEndOfMinuteEntryType,
			GraphQLForwardCompatibleEntryType,
			GraphQLIncreaseServerCountType,
			GraphQLRemoveFederatedServerType,
			GraphQLRevealMatryoshkaHashType,
			GraphQLServerFaultType,
		},
		ResolveType: func(p github_com_graphql_go_graphql.ResolveTypeParams) *github_com_graphql_go_graphql.Object {
			if _, ok := p.Value.(*AdminBlockEntry_AddAuditServer); ok {
				return GraphQLAddAuditServerType
			}
			if _, ok := p.Value.(*AdminBlockEntry_AddEfficiency); ok {
				return GraphQLAddEfficiencyType
			}
			if _, ok := p.Value.(*AdminBlockEntry_AddFactoidAddress); ok {
				return GraphQLAddFactoidAddressType
			}
			if _, ok := p.Value.(*AdminBlockEntry_AddFederatedServer); ok {
				return GraphQLAddFederatedServerType
			}
			if _, ok := p.Value.(*AdminBlockEntry_AddFederatedServerBitcoinAnchorKey); ok {
				return GraphQLAddFederatedServerBitcoinAnchorKeyType
			}
			if _, ok := p.Value.(*AdminBlockEntry_AddFederatedServerSigningKey); ok {
				return GraphQLAddFederatedServerSigningKeyType
			}
			if _, ok := p.Value.(*AdminBlockEntry_AddReplaceMatryoshkaHash); ok {
				return GraphQLAddReplaceMatryoshkaHashType
			}
			if _, ok := p.Value.(*AdminBlockEntry_CancelCoinbaseDescriptor); ok {
				return GraphQLCancelCoinbaseDescriptorType
			}
			if _, ok := p.Value.(*AdminBlockEntry_CoinbaseDescriptor); ok {
				return GraphQLCoinbaseDescriptorType
			}
			if _, ok := p.Value.(*AdminBlockEntry_DirectoryBlockSignatureEntry); ok {
				return GraphQLDirectoryBlockSignatureEntryType
			}
			if _, ok := p.Value.(*AdminBlockEntry_EndOfMinuteEntry); ok {
				return GraphQLEndOfMinuteEntryType
			}
			if _, ok := p.Value.(*AdminBlockEntry_ForwardCompatibleEntry); ok {
				return GraphQLForwardCompatibleEntryType
			}
			if _, ok := p.Value.(*AdminBlockEntry_IncreaseServerCount); ok {
				return GraphQLIncreaseServerCountType
			}
			if _, ok := p.Value.(*AdminBlockEntry_RemoveFederatedServer); ok {
				return GraphQLRemoveFederatedServerType
			}
			if _, ok := p.Value.(*AdminBlockEntry_RevealMatryoshkaHash); ok {
				return GraphQLRevealMatryoshkaHashType
			}
			if _, ok := p.Value.(*AdminBlockEntry_ServerFault); ok {
				return GraphQLServerFaultType
			}
			return nil
		},
	})
}
func (m *AdminBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdminBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.PreviousBackRefHash != nil {
		{
			size, err := m.PreviousBackRefHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminBlockEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminBlockEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminBlockEntry_AddAuditServer) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_AddAuditServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddAuditServer != nil {
		{
			size, err := m.AddAuditServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_AddEfficiency) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_AddEfficiency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddEfficiency != nil {
		{
			size, err := m.AddEfficiency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_AddFactoidAddress) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_AddFactoidAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddFactoidAddress != nil {
		{
			size, err := m.AddFactoidAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_AddFederatedServer) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_AddFederatedServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddFederatedServer != nil {
		{
			size, err := m.AddFederatedServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_AddFederatedServerBitcoinAnchorKey) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_AddFederatedServerBitcoinAnchorKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddFederatedServerBitcoinAnchorKey != nil {
		{
			size, err := m.AddFederatedServerBitcoinAnchorKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_AddFederatedServerSigningKey) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_AddFederatedServerSigningKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddFederatedServerSigningKey != nil {
		{
			size, err := m.AddFederatedServerSigningKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_AddReplaceMatryoshkaHash) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_AddReplaceMatryoshkaHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddReplaceMatryoshkaHash != nil {
		{
			size, err := m.AddReplaceMatryoshkaHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_CancelCoinbaseDescriptor) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_CancelCoinbaseDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelCoinbaseDescriptor != nil {
		{
			size, err := m.CancelCoinbaseDescriptor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_CoinbaseDescriptor) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_CoinbaseDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CoinbaseDescriptor != nil {
		{
			size, err := m.CoinbaseDescriptor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_DirectoryBlockSignatureEntry) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_DirectoryBlockSignatureEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectoryBlockSignatureEntry != nil {
		{
			size, err := m.DirectoryBlockSignatureEntry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_EndOfMinuteEntry) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_EndOfMinuteEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EndOfMinuteEntry != nil {
		{
			size, err := m.EndOfMinuteEntry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_ForwardCompatibleEntry) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_ForwardCompatibleEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardCompatibleEntry != nil {
		{
			size, err := m.ForwardCompatibleEntry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_IncreaseServerCount) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_IncreaseServerCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IncreaseServerCount != nil {
		{
			size, err := m.IncreaseServerCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_RemoveFederatedServer) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_RemoveFederatedServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RemoveFederatedServer != nil {
		{
			size, err := m.RemoveFederatedServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_RevealMatryoshkaHash) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_RevealMatryoshkaHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RevealMatryoshkaHash != nil {
		{
			size, err := m.RevealMatryoshkaHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_ServerFault) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *AdminBlockEntry_ServerFault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServerFault != nil {
		{
			size, err := m.ServerFault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AddAuditServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAuditServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddAuditServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.IdentityChainID != nil {
		{
			size, err := m.IdentityChainID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddEfficiency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEfficiency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddEfficiency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Efficiency != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.Efficiency))
		i--
		dAtA[i] = 0x10
	}
	if m.IdentityChainID != nil {
		{
			size, err := m.IdentityChainID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddFactoidAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFactoidAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFactoidAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IdentityChainID != nil {
		{
			size, err := m.IdentityChainID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddFederatedServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFederatedServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFederatedServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.IdentityChainID != nil {
		{
			size, err := m.IdentityChainID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddFederatedServerBitcoinAnchorKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFederatedServerBitcoinAnchorKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFederatedServerBitcoinAnchorKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EcdsaPublicKey) > 0 {
		i -= len(m.EcdsaPublicKey)
		copy(dAtA[i:], m.EcdsaPublicKey)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.EcdsaPublicKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.KeyType != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x18
	}
	if m.KeyPriority != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.KeyPriority))
		i--
		dAtA[i] = 0x10
	}
	if m.IdentityChainID != nil {
		{
			size, err := m.IdentityChainID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddFederatedServerSigningKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFederatedServerSigningKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFederatedServerSigningKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.KeyPriority != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.KeyPriority))
		i--
		dAtA[i] = 0x10
	}
	if m.IdentityChainID != nil {
		{
			size, err := m.IdentityChainID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddReplaceMatryoshkaHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddReplaceMatryoshkaHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddReplaceMatryoshkaHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FactoidOutputs) > 0 {
		for iNdEx := len(m.FactoidOutputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FactoidOutputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdminBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MatryoshkaHash != nil {
		{
			size, err := m.MatryoshkaHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IdentityChainID != nil {
		{
			size, err := m.IdentityChainID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelCoinbaseDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelCoinbaseDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelCoinbaseDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DescriptorIndex != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.DescriptorIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.DescriptorHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.DescriptorHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CoinbaseDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinbaseDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinbaseDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FactoidOutputs) > 0 {
		for iNdEx := len(m.FactoidOutputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FactoidOutputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdminBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryBlockSignatureEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryBlockSignatureEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryBlockSignatureEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PreviousDirectoryBlockSignature != nil {
		{
			size, err := m.PreviousDirectoryBlockSignature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IdentityAdminChainID != nil {
		{
			size, err := m.IdentityAdminChainID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndOfMinuteEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndOfMinuteEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndOfMinuteEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MinuteNumber != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.MinuteNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForwardCompatibleEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardCompatibleEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardCompatibleEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Size_ != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncreaseServerCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncreaseServerCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncreaseServerCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveFederatedServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveFederatedServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveFederatedServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.IdentityChainID != nil {
		{
			size, err := m.IdentityChainID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RevealMatryoshkaHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevealMatryoshkaHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevealMatryoshkaHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MatryoshkaHash != nil {
		{
			size, err := m.MatryoshkaHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IdentityChainID != nil {
		{
			size, err := m.IdentityChainID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServerFault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerFault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerFault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SignatureList) > 0 {
		for iNdEx := len(m.SignatureList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdminBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MessageEntryHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.MessageEntryHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.VmIndex != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.VmIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.AuditServerID != nil {
		{
			size, err := m.AuditServerID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ServerID != nil {
		{
			size, err := m.ServerID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdminBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdminBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedAdminBlock(r randyAdminBlock, easy bool) *AdminBlock {
	this := &AdminBlock{}
	if r.Intn(5) != 0 {
		this.Header = NewPopulatedAdminBlockHeader(r, easy)
	}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Entries = make([]*AdminBlockEntry, v1)
		for i := 0; i < v1; i++ {
			this.Entries[i] = NewPopulatedAdminBlockEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 3)
	}
	return this
}

func NewPopulatedAdminBlockHeader(r randyAdminBlock, easy bool) *AdminBlockHeader {
	this := &AdminBlockHeader{}
	if r.Intn(5) != 0 {
		this.PreviousBackRefHash = NewPopulatedHash(r, easy)
	}
	this.BlockHeight = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 3)
	}
	return this
}

func NewPopulatedAdminBlockEntry(r randyAdminBlock, easy bool) *AdminBlockEntry {
	this := &AdminBlockEntry{}
	oneofNumber_Value := []int32{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}[r.Intn(16)]
	switch oneofNumber_Value {
	case 1:
		this.Value = NewPopulatedAdminBlockEntry_AddAuditServer(r, easy)
	case 2:
		this.Value = NewPopulatedAdminBlockEntry_AddEfficiency(r, easy)
	case 3:
		this.Value = NewPopulatedAdminBlockEntry_AddFactoidAddress(r, easy)
	case 4:
		this.Value = NewPopulatedAdminBlockEntry_AddFederatedServer(r, easy)
	case 5:
		this.Value = NewPopulatedAdminBlockEntry_AddFederatedServerBitcoinAnchorKey(r, easy)
	case 6:
		this.Value = NewPopulatedAdminBlockEntry_AddFederatedServerSigningKey(r, easy)
	case 7:
		this.Value = NewPopulatedAdminBlockEntry_AddReplaceMatryoshkaHash(r, easy)
	case 8:
		this.Value = NewPopulatedAdminBlockEntry_CancelCoinbaseDescriptor(r, easy)
	case 9:
		this.Value = NewPopulatedAdminBlockEntry_CoinbaseDescriptor(r, easy)
	case 10:
		this.Value = NewPopulatedAdminBlockEntry_DirectoryBlockSignatureEntry(r, easy)
	case 11:
		this.Value = NewPopulatedAdminBlockEntry_EndOfMinuteEntry(r, easy)
	case 12:
		this.Value = NewPopulatedAdminBlockEntry_ForwardCompatibleEntry(r, easy)
	case 13:
		this.Value = NewPopulatedAdminBlockEntry_IncreaseServerCount(r, easy)
	case 14:
		this.Value = NewPopulatedAdminBlockEntry_RemoveFederatedServer(r, easy)
	case 15:
		this.Value = NewPopulatedAdminBlockEntry_RevealMatryoshkaHash(r, easy)
	case 16:
		this.Value = NewPopulatedAdminBlockEntry_ServerFault(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 17)
	}
	return this
}

func NewPopulatedAdminBlockEntry_AddAuditServer(r randyAdminBlock, easy bool) *AdminBlockEntry_AddAuditServer {
	this := &AdminBlockEntry_AddAuditServer{}
	this.AddAuditServer = NewPopulatedAddAuditServer(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_AddEfficiency(r randyAdminBlock, easy bool) *AdminBlockEntry_AddEfficiency {
	this := &AdminBlockEntry_AddEfficiency{}
	this.AddEfficiency = NewPopulatedAddEfficiency(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_AddFactoidAddress(r randyAdminBlock, easy bool) *AdminBlockEntry_AddFactoidAddress {
	this := &AdminBlockEntry_AddFactoidAddress{}
	this.AddFactoidAddress = NewPopulatedAddFactoidAddress(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_AddFederatedServer(r randyAdminBlock, easy bool) *AdminBlockEntry_AddFederatedServer {
	this := &AdminBlockEntry_AddFederatedServer{}
	this.AddFederatedServer = NewPopulatedAddFederatedServer(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_AddFederatedServerBitcoinAnchorKey(r randyAdminBlock, easy bool) *AdminBlockEntry_AddFederatedServerBitcoinAnchorKey {
	this := &AdminBlockEntry_AddFederatedServerBitcoinAnchorKey{}
	this.AddFederatedServerBitcoinAnchorKey = NewPopulatedAddFederatedServerBitcoinAnchorKey(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_AddFederatedServerSigningKey(r randyAdminBlock, easy bool) *AdminBlockEntry_AddFederatedServerSigningKey {
	this := &AdminBlockEntry_AddFederatedServerSigningKey{}
	this.AddFederatedServerSigningKey = NewPopulatedAddFederatedServerSigningKey(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_AddReplaceMatryoshkaHash(r randyAdminBlock, easy bool) *AdminBlockEntry_AddReplaceMatryoshkaHash {
	this := &AdminBlockEntry_AddReplaceMatryoshkaHash{}
	this.AddReplaceMatryoshkaHash = NewPopulatedAddReplaceMatryoshkaHash(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_CancelCoinbaseDescriptor(r randyAdminBlock, easy bool) *AdminBlockEntry_CancelCoinbaseDescriptor {
	this := &AdminBlockEntry_CancelCoinbaseDescriptor{}
	this.CancelCoinbaseDescriptor = NewPopulatedCancelCoinbaseDescriptor(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_CoinbaseDescriptor(r randyAdminBlock, easy bool) *AdminBlockEntry_CoinbaseDescriptor {
	this := &AdminBlockEntry_CoinbaseDescriptor{}
	this.CoinbaseDescriptor = NewPopulatedCoinbaseDescriptor(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_DirectoryBlockSignatureEntry(r randyAdminBlock, easy bool) *AdminBlockEntry_DirectoryBlockSignatureEntry {
	this := &AdminBlockEntry_DirectoryBlockSignatureEntry{}
	this.DirectoryBlockSignatureEntry = NewPopulatedDirectoryBlockSignatureEntry(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_EndOfMinuteEntry(r randyAdminBlock, easy bool) *AdminBlockEntry_EndOfMinuteEntry {
	this := &AdminBlockEntry_EndOfMinuteEntry{}
	this.EndOfMinuteEntry = NewPopulatedEndOfMinuteEntry(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_ForwardCompatibleEntry(r randyAdminBlock, easy bool) *AdminBlockEntry_ForwardCompatibleEntry {
	this := &AdminBlockEntry_ForwardCompatibleEntry{}
	this.ForwardCompatibleEntry = NewPopulatedForwardCompatibleEntry(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_IncreaseServerCount(r randyAdminBlock, easy bool) *AdminBlockEntry_IncreaseServerCount {
	this := &AdminBlockEntry_IncreaseServerCount{}
	this.IncreaseServerCount = NewPopulatedIncreaseServerCount(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_RemoveFederatedServer(r randyAdminBlock, easy bool) *AdminBlockEntry_RemoveFederatedServer {
	this := &AdminBlockEntry_RemoveFederatedServer{}
	this.RemoveFederatedServer = NewPopulatedRemoveFederatedServer(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_RevealMatryoshkaHash(r randyAdminBlock, easy bool) *AdminBlockEntry_RevealMatryoshkaHash {
	this := &AdminBlockEntry_RevealMatryoshkaHash{}
	this.RevealMatryoshkaHash = NewPopulatedRevealMatryoshkaHash(r, easy)
	return this
}
func NewPopulatedAdminBlockEntry_ServerFault(r randyAdminBlock, easy bool) *AdminBlockEntry_ServerFault {
	this := &AdminBlockEntry_ServerFault{}
	this.ServerFault = NewPopulatedServerFault(r, easy)
	return this
}
func NewPopulatedAddAuditServer(r randyAdminBlock, easy bool) *AddAuditServer {
	this := &AddAuditServer{}
	if r.Intn(5) != 0 {
		this.IdentityChainID = NewPopulatedHash(r, easy)
	}
	this.BlockHeight = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 3)
	}
	return this
}

func NewPopulatedAddEfficiency(r randyAdminBlock, easy bool) *AddEfficiency {
	this := &AddEfficiency{}
	if r.Intn(5) != 0 {
		this.IdentityChainID = NewPopulatedHash(r, easy)
	}
	this.Efficiency = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 3)
	}
	return this
}

func NewPopulatedAddFactoidAddress(r randyAdminBlock, easy bool) *AddFactoidAddress {
	this := &AddFactoidAddress{}
	if r.Intn(5) != 0 {
		this.IdentityChainID = NewPopulatedHash(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Address = NewPopulatedHash(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 3)
	}
	return this
}

func NewPopulatedAddFederatedServer(r randyAdminBlock, easy bool) *AddFederatedServer {
	this := &AddFederatedServer{}
	if r.Intn(5) != 0 {
		this.IdentityChainID = NewPopulatedHash(r, easy)
	}
	this.BlockHeight = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 3)
	}
	return this
}

func NewPopulatedAddFederatedServerBitcoinAnchorKey(r randyAdminBlock, easy bool) *AddFederatedServerBitcoinAnchorKey {
	this := &AddFederatedServerBitcoinAnchorKey{}
	if r.Intn(5) != 0 {
		this.IdentityChainID = NewPopulatedHash(r, easy)
	}
	this.KeyPriority = uint32(r.Uint32())
	this.KeyType = uint32(r.Uint32())
	v2 := r.Intn(100)
	this.EcdsaPublicKey = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.EcdsaPublicKey[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 5)
	}
	return this
}

func NewPopulatedAddFederatedServerSigningKey(r randyAdminBlock, easy bool) *AddFederatedServerSigningKey {
	this := &AddFederatedServerSigningKey{}
	if r.Intn(5) != 0 {
		this.IdentityChainID = NewPopulatedHash(r, easy)
	}
	this.KeyPriority = uint32(r.Uint32())
	v3 := r.Intn(100)
	this.PublicKey = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.PublicKey[i] = byte(r.Intn(256))
	}
	this.BlockHeight = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 5)
	}
	return this
}

func NewPopulatedAddReplaceMatryoshkaHash(r randyAdminBlock, easy bool) *AddReplaceMatryoshkaHash {
	this := &AddReplaceMatryoshkaHash{}
	if r.Intn(5) != 0 {
		this.IdentityChainID = NewPopulatedHash(r, easy)
	}
	if r.Intn(5) != 0 {
		this.MatryoshkaHash = NewPopulatedHash(r, easy)
	}
	if r.Intn(5) != 0 {
		v4 := r.Intn(5)
		this.FactoidOutputs = make([]*TransactionAddress, v4)
		for i := 0; i < v4; i++ {
			this.FactoidOutputs[i] = NewPopulatedTransactionAddress(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 4)
	}
	return this
}

func NewPopulatedCancelCoinbaseDescriptor(r randyAdminBlock, easy bool) *CancelCoinbaseDescriptor {
	this := &CancelCoinbaseDescriptor{}
	this.DescriptorHeight = uint32(r.Uint32())
	this.DescriptorIndex = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 3)
	}
	return this
}

func NewPopulatedCoinbaseDescriptor(r randyAdminBlock, easy bool) *CoinbaseDescriptor {
	this := &CoinbaseDescriptor{}
	if r.Intn(5) != 0 {
		v5 := r.Intn(5)
		this.FactoidOutputs = make([]*TransAddress, v5)
		for i := 0; i < v5; i++ {
			this.FactoidOutputs[i] = NewPopulatedTransAddress(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 2)
	}
	return this
}

func NewPopulatedDirectoryBlockSignatureEntry(r randyAdminBlock, easy bool) *DirectoryBlockSignatureEntry {
	this := &DirectoryBlockSignatureEntry{}
	if r.Intn(5) != 0 {
		this.IdentityAdminChainID = NewPopulatedHash(r, easy)
	}
	if r.Intn(5) != 0 {
		this.PreviousDirectoryBlockSignature = NewPopulatedSignature(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 3)
	}
	return this
}

func NewPopulatedEndOfMinuteEntry(r randyAdminBlock, easy bool) *EndOfMinuteEntry {
	this := &EndOfMinuteEntry{}
	this.MinuteNumber = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 2)
	}
	return this
}

func NewPopulatedForwardCompatibleEntry(r randyAdminBlock, easy bool) *ForwardCompatibleEntry {
	this := &ForwardCompatibleEntry{}
	this.Size_ = uint32(r.Uint32())
	v6 := r.Intn(100)
	this.Data = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Data[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 3)
	}
	return this
}

func NewPopulatedIncreaseServerCount(r randyAdminBlock, easy bool) *IncreaseServerCount {
	this := &IncreaseServerCount{}
	this.Amount = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 2)
	}
	return this
}

func NewPopulatedRemoveFederatedServer(r randyAdminBlock, easy bool) *RemoveFederatedServer {
	this := &RemoveFederatedServer{}
	if r.Intn(5) != 0 {
		this.IdentityChainID = NewPopulatedHash(r, easy)
	}
	this.BlockHeight = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 3)
	}
	return this
}

func NewPopulatedRevealMatryoshkaHash(r randyAdminBlock, easy bool) *RevealMatryoshkaHash {
	this := &RevealMatryoshkaHash{}
	if r.Intn(5) != 0 {
		this.IdentityChainID = NewPopulatedHash(r, easy)
	}
	if r.Intn(5) != 0 {
		this.MatryoshkaHash = NewPopulatedHash(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 3)
	}
	return this
}

func NewPopulatedServerFault(r randyAdminBlock, easy bool) *ServerFault {
	this := &ServerFault{}
	if r.Intn(5) != 0 {
		this.Timestamp = types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(5) != 0 {
		this.ServerID = NewPopulatedHash(r, easy)
	}
	if r.Intn(5) != 0 {
		this.AuditServerID = NewPopulatedHash(r, easy)
	}
	this.VmIndex = uint32(r.Uint32())
	this.BlockHeight = uint32(r.Uint32())
	this.MessageEntryHeight = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v7 := r.Intn(5)
		this.SignatureList = make([]*Signature, v7)
		for i := 0; i < v7; i++ {
			this.SignatureList[i] = NewPopulatedSignature(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAdminBlock(r, 8)
	}
	return this
}

type randyAdminBlock interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAdminBlock(r randyAdminBlock) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAdminBlock(r randyAdminBlock) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneAdminBlock(r)
	}
	return string(tmps)
}
func randUnrecognizedAdminBlock(r randyAdminBlock, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAdminBlock(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAdminBlock(dAtA []byte, r randyAdminBlock, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAdminBlock(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateAdminBlock(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateAdminBlock(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAdminBlock(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAdminBlock(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAdminBlock(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAdminBlock(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *AdminBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovAdminBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreviousBackRefHash != nil {
		l = m.PreviousBackRefHash.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.BlockHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminBlockEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminBlockEntry_AddAuditServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddAuditServer != nil {
		l = m.AddAuditServer.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_AddEfficiency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddEfficiency != nil {
		l = m.AddEfficiency.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_AddFactoidAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddFactoidAddress != nil {
		l = m.AddFactoidAddress.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_AddFederatedServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddFederatedServer != nil {
		l = m.AddFederatedServer.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_AddFederatedServerBitcoinAnchorKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddFederatedServerBitcoinAnchorKey != nil {
		l = m.AddFederatedServerBitcoinAnchorKey.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_AddFederatedServerSigningKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddFederatedServerSigningKey != nil {
		l = m.AddFederatedServerSigningKey.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_AddReplaceMatryoshkaHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddReplaceMatryoshkaHash != nil {
		l = m.AddReplaceMatryoshkaHash.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_CancelCoinbaseDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelCoinbaseDescriptor != nil {
		l = m.CancelCoinbaseDescriptor.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_CoinbaseDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoinbaseDescriptor != nil {
		l = m.CoinbaseDescriptor.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_DirectoryBlockSignatureEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectoryBlockSignatureEntry != nil {
		l = m.DirectoryBlockSignatureEntry.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_EndOfMinuteEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndOfMinuteEntry != nil {
		l = m.EndOfMinuteEntry.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_ForwardCompatibleEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardCompatibleEntry != nil {
		l = m.ForwardCompatibleEntry.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_IncreaseServerCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncreaseServerCount != nil {
		l = m.IncreaseServerCount.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_RemoveFederatedServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoveFederatedServer != nil {
		l = m.RemoveFederatedServer.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_RevealMatryoshkaHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RevealMatryoshkaHash != nil {
		l = m.RevealMatryoshkaHash.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_ServerFault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerFault != nil {
		l = m.ServerFault.Size()
		n += 2 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AddAuditServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityChainID != nil {
		l = m.IdentityChainID.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.BlockHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddEfficiency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityChainID != nil {
		l = m.IdentityChainID.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.Efficiency != 0 {
		n += 1 + sovAdminBlock(uint64(m.Efficiency))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFactoidAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityChainID != nil {
		l = m.IdentityChainID.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFederatedServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityChainID != nil {
		l = m.IdentityChainID.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.BlockHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFederatedServerBitcoinAnchorKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityChainID != nil {
		l = m.IdentityChainID.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.KeyPriority != 0 {
		n += 1 + sovAdminBlock(uint64(m.KeyPriority))
	}
	if m.KeyType != 0 {
		n += 1 + sovAdminBlock(uint64(m.KeyType))
	}
	l = len(m.EcdsaPublicKey)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFederatedServerSigningKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityChainID != nil {
		l = m.IdentityChainID.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.KeyPriority != 0 {
		n += 1 + sovAdminBlock(uint64(m.KeyPriority))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.BlockHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddReplaceMatryoshkaHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityChainID != nil {
		l = m.IdentityChainID.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.MatryoshkaHash != nil {
		l = m.MatryoshkaHash.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if len(m.FactoidOutputs) > 0 {
		for _, e := range m.FactoidOutputs {
			l = e.Size()
			n += 1 + l + sovAdminBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelCoinbaseDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DescriptorHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.DescriptorHeight))
	}
	if m.DescriptorIndex != 0 {
		n += 1 + sovAdminBlock(uint64(m.DescriptorIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinbaseDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FactoidOutputs) > 0 {
		for _, e := range m.FactoidOutputs {
			l = e.Size()
			n += 1 + l + sovAdminBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryBlockSignatureEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityAdminChainID != nil {
		l = m.IdentityAdminChainID.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.PreviousDirectoryBlockSignature != nil {
		l = m.PreviousDirectoryBlockSignature.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EndOfMinuteEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinuteNumber != 0 {
		n += 1 + sovAdminBlock(uint64(m.MinuteNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForwardCompatibleEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovAdminBlock(uint64(m.Size_))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncreaseServerCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovAdminBlock(uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveFederatedServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityChainID != nil {
		l = m.IdentityChainID.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.BlockHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RevealMatryoshkaHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityChainID != nil {
		l = m.IdentityChainID.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.MatryoshkaHash != nil {
		l = m.MatryoshkaHash.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerFault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.ServerID != nil {
		l = m.ServerID.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.AuditServerID != nil {
		l = m.AuditServerID.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.VmIndex != 0 {
		n += 1 + sovAdminBlock(uint64(m.VmIndex))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.BlockHeight))
	}
	if m.MessageEntryHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.MessageEntryHeight))
	}
	if len(m.SignatureList) > 0 {
		for _, e := range m.SignatureList {
			l = e.Size()
			n += 1 + l + sovAdminBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAdminBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdminBlock(x uint64) (n int) {
	return sovAdminBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdminBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &AdminBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &AdminBlockEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousBackRefHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousBackRefHash == nil {
				m.PreviousBackRefHash = &Hash{}
			}
			if err := m.PreviousBackRefHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminBlockEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminBlockEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminBlockEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddAuditServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddAuditServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_AddAuditServer{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddEfficiency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddEfficiency{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_AddEfficiency{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFactoidAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddFactoidAddress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_AddFactoidAddress{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFederatedServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddFederatedServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_AddFederatedServer{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFederatedServerBitcoinAnchorKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddFederatedServerBitcoinAnchorKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_AddFederatedServerBitcoinAnchorKey{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFederatedServerSigningKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddFederatedServerSigningKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_AddFederatedServerSigningKey{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddReplaceMatryoshkaHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddReplaceMatryoshkaHash{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_AddReplaceMatryoshkaHash{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelCoinbaseDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelCoinbaseDescriptor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_CancelCoinbaseDescriptor{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinbaseDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CoinbaseDescriptor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_CoinbaseDescriptor{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryBlockSignatureEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DirectoryBlockSignatureEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_DirectoryBlockSignatureEntry{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndOfMinuteEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EndOfMinuteEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_EndOfMinuteEntry{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardCompatibleEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardCompatibleEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_ForwardCompatibleEntry{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncreaseServerCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IncreaseServerCount{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_IncreaseServerCount{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveFederatedServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RemoveFederatedServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_RemoveFederatedServer{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealMatryoshkaHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RevealMatryoshkaHash{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_RevealMatryoshkaHash{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServerFault{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_ServerFault{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAuditServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAuditServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAuditServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityChainID == nil {
				m.IdentityChainID = &Hash{}
			}
			if err := m.IdentityChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddEfficiency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddEfficiency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddEfficiency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityChainID == nil {
				m.IdentityChainID = &Hash{}
			}
			if err := m.IdentityChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Efficiency", wireType)
			}
			m.Efficiency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Efficiency |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFactoidAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFactoidAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFactoidAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityChainID == nil {
				m.IdentityChainID = &Hash{}
			}
			if err := m.IdentityChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Hash{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFederatedServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFederatedServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFederatedServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityChainID == nil {
				m.IdentityChainID = &Hash{}
			}
			if err := m.IdentityChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFederatedServerBitcoinAnchorKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFederatedServerBitcoinAnchorKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFederatedServerBitcoinAnchorKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityChainID == nil {
				m.IdentityChainID = &Hash{}
			}
			if err := m.IdentityChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPriority", wireType)
			}
			m.KeyPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyPriority |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcdsaPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcdsaPublicKey = append(m.EcdsaPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EcdsaPublicKey == nil {
				m.EcdsaPublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFederatedServerSigningKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFederatedServerSigningKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFederatedServerSigningKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityChainID == nil {
				m.IdentityChainID = &Hash{}
			}
			if err := m.IdentityChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPriority", wireType)
			}
			m.KeyPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyPriority |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddReplaceMatryoshkaHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReplaceMatryoshkaHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReplaceMatryoshkaHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityChainID == nil {
				m.IdentityChainID = &Hash{}
			}
			if err := m.IdentityChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatryoshkaHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatryoshkaHash == nil {
				m.MatryoshkaHash = &Hash{}
			}
			if err := m.MatryoshkaHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoidOutputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FactoidOutputs = append(m.FactoidOutputs, &TransactionAddress{})
			if err := m.FactoidOutputs[len(m.FactoidOutputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelCoinbaseDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelCoinbaseDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelCoinbaseDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorHeight", wireType)
			}
			m.DescriptorHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorIndex", wireType)
			}
			m.DescriptorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinbaseDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinbaseDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinbaseDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoidOutputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FactoidOutputs = append(m.FactoidOutputs, &TransAddress{})
			if err := m.FactoidOutputs[len(m.FactoidOutputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryBlockSignatureEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryBlockSignatureEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryBlockSignatureEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityAdminChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityAdminChainID == nil {
				m.IdentityAdminChainID = &Hash{}
			}
			if err := m.IdentityAdminChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousDirectoryBlockSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousDirectoryBlockSignature == nil {
				m.PreviousDirectoryBlockSignature = &Signature{}
			}
			if err := m.PreviousDirectoryBlockSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndOfMinuteEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndOfMinuteEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndOfMinuteEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteNumber", wireType)
			}
			m.MinuteNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinuteNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardCompatibleEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardCompatibleEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardCompatibleEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncreaseServerCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncreaseServerCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncreaseServerCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveFederatedServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveFederatedServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveFederatedServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityChainID == nil {
				m.IdentityChainID = &Hash{}
			}
			if err := m.IdentityChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevealMatryoshkaHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevealMatryoshkaHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevealMatryoshkaHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityChainID == nil {
				m.IdentityChainID = &Hash{}
			}
			if err := m.IdentityChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatryoshkaHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatryoshkaHash == nil {
				m.MatryoshkaHash = &Hash{}
			}
			if err := m.MatryoshkaHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerFault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerFault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerFault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerID == nil {
				m.ServerID = &Hash{}
			}
			if err := m.ServerID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditServerID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuditServerID == nil {
				m.AuditServerID = &Hash{}
			}
			if err := m.AuditServerID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmIndex", wireType)
			}
			m.VmIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VmIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageEntryHeight", wireType)
			}
			m.MessageEntryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageEntryHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureList = append(m.SignatureList, &Signature{})
			if err := m.SignatureList[len(m.SignatureList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdminBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdminBlock
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAdminBlock
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdminBlock
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdminBlock(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAdminBlock
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdminBlock = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdminBlock   = fmt.Errorf("proto: integer overflow")
)
