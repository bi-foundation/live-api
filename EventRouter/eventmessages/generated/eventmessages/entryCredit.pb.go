// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventmessages/entryCredit.proto

package eventmessages

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_graphql_go_graphql "github.com/graphql-go/graphql"
	_ "github.com/opsee/protobuf/opseeproto"
	types "github.com/opsee/protobuf/opseeproto/types"
	github_com_opsee_protobuf_plugin_graphql_scalars "github.com/opsee/protobuf/plugin/graphql/scalars"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EntryCreditBlock struct {
	Header               *EntryCreditBlockHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Entries              []*EntryCreditBlockEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *EntryCreditBlock) Reset()         { *m = EntryCreditBlock{} }
func (m *EntryCreditBlock) String() string { return proto.CompactTextString(m) }
func (*EntryCreditBlock) ProtoMessage()    {}
func (*EntryCreditBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_2805fc15da93467e, []int{0}
}
func (m *EntryCreditBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryCreditBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryCreditBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryCreditBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryCreditBlock.Merge(m, src)
}
func (m *EntryCreditBlock) XXX_Size() int {
	return m.Size()
}
func (m *EntryCreditBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryCreditBlock.DiscardUnknown(m)
}

var xxx_messageInfo_EntryCreditBlock proto.InternalMessageInfo

func (m *EntryCreditBlock) GetHeader() *EntryCreditBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EntryCreditBlock) GetEntries() []*EntryCreditBlockEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type EntryCreditBlockHeader struct {
	BodyHash             *Hash    `protobuf:"bytes,1,opt,name=bodyHash,proto3" json:"bodyHash,omitempty"`
	PreviousHeaderHash   *Hash    `protobuf:"bytes,2,opt,name=previousHeaderHash,proto3" json:"previousHeaderHash,omitempty"`
	PreviousFullHash     *Hash    `protobuf:"bytes,3,opt,name=previousFullHash,proto3" json:"previousFullHash,omitempty"`
	BlockHeight          uint32   `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	HeaderExpansionArea  []byte   `protobuf:"bytes,5,opt,name=headerExpansionArea,proto3" json:"headerExpansionArea,omitempty"`
	ObjectCount          uint64   `protobuf:"varint,6,opt,name=objectCount,proto3" json:"objectCount,omitempty"`
	BodySize             uint64   `protobuf:"varint,7,opt,name=bodySize,proto3" json:"bodySize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntryCreditBlockHeader) Reset()         { *m = EntryCreditBlockHeader{} }
func (m *EntryCreditBlockHeader) String() string { return proto.CompactTextString(m) }
func (*EntryCreditBlockHeader) ProtoMessage()    {}
func (*EntryCreditBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_2805fc15da93467e, []int{1}
}
func (m *EntryCreditBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryCreditBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryCreditBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryCreditBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryCreditBlockHeader.Merge(m, src)
}
func (m *EntryCreditBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *EntryCreditBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryCreditBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_EntryCreditBlockHeader proto.InternalMessageInfo

func (m *EntryCreditBlockHeader) GetBodyHash() *Hash {
	if m != nil {
		return m.BodyHash
	}
	return nil
}

func (m *EntryCreditBlockHeader) GetPreviousHeaderHash() *Hash {
	if m != nil {
		return m.PreviousHeaderHash
	}
	return nil
}

func (m *EntryCreditBlockHeader) GetPreviousFullHash() *Hash {
	if m != nil {
		return m.PreviousFullHash
	}
	return nil
}

func (m *EntryCreditBlockHeader) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EntryCreditBlockHeader) GetHeaderExpansionArea() []byte {
	if m != nil {
		return m.HeaderExpansionArea
	}
	return nil
}

func (m *EntryCreditBlockHeader) GetObjectCount() uint64 {
	if m != nil {
		return m.ObjectCount
	}
	return 0
}

func (m *EntryCreditBlockHeader) GetBodySize() uint64 {
	if m != nil {
		return m.BodySize
	}
	return 0
}

type EntryCreditBlockEntry struct {
	// Types that are valid to be assigned to Value:
	//	*EntryCreditBlockEntry_CommitChain
	//	*EntryCreditBlockEntry_CommitEntry
	//	*EntryCreditBlockEntry_IncreaseBalance
	//	*EntryCreditBlockEntry_MinuteNumber
	//	*EntryCreditBlockEntry_ServerIndexNumber
	Value                isEntryCreditBlockEntry_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *EntryCreditBlockEntry) Reset()         { *m = EntryCreditBlockEntry{} }
func (m *EntryCreditBlockEntry) String() string { return proto.CompactTextString(m) }
func (*EntryCreditBlockEntry) ProtoMessage()    {}
func (*EntryCreditBlockEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_2805fc15da93467e, []int{2}
}
func (m *EntryCreditBlockEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryCreditBlockEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryCreditBlockEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryCreditBlockEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryCreditBlockEntry.Merge(m, src)
}
func (m *EntryCreditBlockEntry) XXX_Size() int {
	return m.Size()
}
func (m *EntryCreditBlockEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryCreditBlockEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EntryCreditBlockEntry proto.InternalMessageInfo

type isEntryCreditBlockEntry_Value interface {
	isEntryCreditBlockEntry_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EntryCreditBlockEntry_CommitChain struct {
	CommitChain *EntryCreditChainRegistration `protobuf:"bytes,1,opt,name=commitChain,proto3,oneof"`
}
type EntryCreditBlockEntry_CommitEntry struct {
	CommitEntry *EntryCreditEntryRegistration `protobuf:"bytes,2,opt,name=commitEntry,proto3,oneof"`
}
type EntryCreditBlockEntry_IncreaseBalance struct {
	IncreaseBalance *IncreaseBalance `protobuf:"bytes,3,opt,name=increaseBalance,proto3,oneof"`
}
type EntryCreditBlockEntry_MinuteNumber struct {
	MinuteNumber *MinuteNumber `protobuf:"bytes,4,opt,name=minuteNumber,proto3,oneof"`
}
type EntryCreditBlockEntry_ServerIndexNumber struct {
	ServerIndexNumber *ServerIndexNumber `protobuf:"bytes,5,opt,name=serverIndexNumber,proto3,oneof"`
}

func (*EntryCreditBlockEntry_CommitChain) isEntryCreditBlockEntry_Value()       {}
func (*EntryCreditBlockEntry_CommitEntry) isEntryCreditBlockEntry_Value()       {}
func (*EntryCreditBlockEntry_IncreaseBalance) isEntryCreditBlockEntry_Value()   {}
func (*EntryCreditBlockEntry_MinuteNumber) isEntryCreditBlockEntry_Value()      {}
func (*EntryCreditBlockEntry_ServerIndexNumber) isEntryCreditBlockEntry_Value() {}

func (m *EntryCreditBlockEntry) GetValue() isEntryCreditBlockEntry_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *EntryCreditBlockEntry) GetCommitChain() *EntryCreditChainRegistration {
	if x, ok := m.GetValue().(*EntryCreditBlockEntry_CommitChain); ok {
		return x.CommitChain
	}
	return nil
}

func (m *EntryCreditBlockEntry) GetCommitEntry() *EntryCreditEntryRegistration {
	if x, ok := m.GetValue().(*EntryCreditBlockEntry_CommitEntry); ok {
		return x.CommitEntry
	}
	return nil
}

func (m *EntryCreditBlockEntry) GetIncreaseBalance() *IncreaseBalance {
	if x, ok := m.GetValue().(*EntryCreditBlockEntry_IncreaseBalance); ok {
		return x.IncreaseBalance
	}
	return nil
}

func (m *EntryCreditBlockEntry) GetMinuteNumber() *MinuteNumber {
	if x, ok := m.GetValue().(*EntryCreditBlockEntry_MinuteNumber); ok {
		return x.MinuteNumber
	}
	return nil
}

func (m *EntryCreditBlockEntry) GetServerIndexNumber() *ServerIndexNumber {
	if x, ok := m.GetValue().(*EntryCreditBlockEntry_ServerIndexNumber); ok {
		return x.ServerIndexNumber
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EntryCreditBlockEntry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EntryCreditBlockEntry_OneofMarshaler, _EntryCreditBlockEntry_OneofUnmarshaler, _EntryCreditBlockEntry_OneofSizer, []interface{}{
		(*EntryCreditBlockEntry_CommitChain)(nil),
		(*EntryCreditBlockEntry_CommitEntry)(nil),
		(*EntryCreditBlockEntry_IncreaseBalance)(nil),
		(*EntryCreditBlockEntry_MinuteNumber)(nil),
		(*EntryCreditBlockEntry_ServerIndexNumber)(nil),
	}
}

func _EntryCreditBlockEntry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EntryCreditBlockEntry)
	// value
	switch x := m.Value.(type) {
	case *EntryCreditBlockEntry_CommitChain:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommitChain); err != nil {
			return err
		}
	case *EntryCreditBlockEntry_CommitEntry:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommitEntry); err != nil {
			return err
		}
	case *EntryCreditBlockEntry_IncreaseBalance:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IncreaseBalance); err != nil {
			return err
		}
	case *EntryCreditBlockEntry_MinuteNumber:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MinuteNumber); err != nil {
			return err
		}
	case *EntryCreditBlockEntry_ServerIndexNumber:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServerIndexNumber); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EntryCreditBlockEntry.Value has unexpected type %T", x)
	}
	return nil
}

func _EntryCreditBlockEntry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EntryCreditBlockEntry)
	switch tag {
	case 1: // value.commitChain
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EntryCreditChainRegistration)
		err := b.DecodeMessage(msg)
		m.Value = &EntryCreditBlockEntry_CommitChain{msg}
		return true, err
	case 2: // value.commitEntry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EntryCreditEntryRegistration)
		err := b.DecodeMessage(msg)
		m.Value = &EntryCreditBlockEntry_CommitEntry{msg}
		return true, err
	case 3: // value.increaseBalance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IncreaseBalance)
		err := b.DecodeMessage(msg)
		m.Value = &EntryCreditBlockEntry_IncreaseBalance{msg}
		return true, err
	case 4: // value.minuteNumber
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MinuteNumber)
		err := b.DecodeMessage(msg)
		m.Value = &EntryCreditBlockEntry_MinuteNumber{msg}
		return true, err
	case 5: // value.serverIndexNumber
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServerIndexNumber)
		err := b.DecodeMessage(msg)
		m.Value = &EntryCreditBlockEntry_ServerIndexNumber{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EntryCreditBlockEntry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EntryCreditBlockEntry)
	// value
	switch x := m.Value.(type) {
	case *EntryCreditBlockEntry_CommitChain:
		s := proto.Size(x.CommitChain)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EntryCreditBlockEntry_CommitEntry:
		s := proto.Size(x.CommitEntry)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EntryCreditBlockEntry_IncreaseBalance:
		s := proto.Size(x.IncreaseBalance)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EntryCreditBlockEntry_MinuteNumber:
		s := proto.Size(x.MinuteNumber)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EntryCreditBlockEntry_ServerIndexNumber:
		s := proto.Size(x.ServerIndexNumber)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EntryCreditChainRegistration struct {
	EntityState          EntityState      `protobuf:"varint,1,opt,name=entityState,proto3,enum=eventmessages.EntityState" json:"entityState,omitempty"`
	ChainIDHash          *Hash            `protobuf:"bytes,2,opt,name=chainIDHash,proto3" json:"chainIDHash,omitempty"`
	EntryHash            *Hash            `protobuf:"bytes,3,opt,name=entryHash,proto3" json:"entryHash,omitempty"`
	Weld                 *Hash            `protobuf:"bytes,4,opt,name=weld,proto3" json:"weld,omitempty"`
	Timestamp            *types.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Credits              uint32           `protobuf:"varint,6,opt,name=credits,proto3" json:"credits,omitempty"`
	EcPubKey             []byte           `protobuf:"bytes,7,opt,name=ecPubKey,proto3" json:"ecPubKey,omitempty"`
	Sig                  []byte           `protobuf:"bytes,8,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *EntryCreditChainRegistration) Reset()         { *m = EntryCreditChainRegistration{} }
func (m *EntryCreditChainRegistration) String() string { return proto.CompactTextString(m) }
func (*EntryCreditChainRegistration) ProtoMessage()    {}
func (*EntryCreditChainRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_2805fc15da93467e, []int{3}
}
func (m *EntryCreditChainRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryCreditChainRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryCreditChainRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryCreditChainRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryCreditChainRegistration.Merge(m, src)
}
func (m *EntryCreditChainRegistration) XXX_Size() int {
	return m.Size()
}
func (m *EntryCreditChainRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryCreditChainRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_EntryCreditChainRegistration proto.InternalMessageInfo

func (m *EntryCreditChainRegistration) GetEntityState() EntityState {
	if m != nil {
		return m.EntityState
	}
	return EntityState_REQUESTED
}

func (m *EntryCreditChainRegistration) GetChainIDHash() *Hash {
	if m != nil {
		return m.ChainIDHash
	}
	return nil
}

func (m *EntryCreditChainRegistration) GetEntryHash() *Hash {
	if m != nil {
		return m.EntryHash
	}
	return nil
}

func (m *EntryCreditChainRegistration) GetWeld() *Hash {
	if m != nil {
		return m.Weld
	}
	return nil
}

func (m *EntryCreditChainRegistration) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *EntryCreditChainRegistration) GetCredits() uint32 {
	if m != nil {
		return m.Credits
	}
	return 0
}

func (m *EntryCreditChainRegistration) GetEcPubKey() []byte {
	if m != nil {
		return m.EcPubKey
	}
	return nil
}

func (m *EntryCreditChainRegistration) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type EntryCreditEntryRegistration struct {
	EntityState          EntityState      `protobuf:"varint,1,opt,name=entityState,proto3,enum=eventmessages.EntityState" json:"entityState,omitempty"`
	EntryHash            *Hash            `protobuf:"bytes,2,opt,name=entryHash,proto3" json:"entryHash,omitempty"`
	Timestamp            *types.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Credits              uint32           `protobuf:"varint,4,opt,name=credits,proto3" json:"credits,omitempty"`
	EcPubKey             []byte           `protobuf:"bytes,5,opt,name=ecPubKey,proto3" json:"ecPubKey,omitempty"`
	Sig                  []byte           `protobuf:"bytes,6,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *EntryCreditEntryRegistration) Reset()         { *m = EntryCreditEntryRegistration{} }
func (m *EntryCreditEntryRegistration) String() string { return proto.CompactTextString(m) }
func (*EntryCreditEntryRegistration) ProtoMessage()    {}
func (*EntryCreditEntryRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_2805fc15da93467e, []int{4}
}
func (m *EntryCreditEntryRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryCreditEntryRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryCreditEntryRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryCreditEntryRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryCreditEntryRegistration.Merge(m, src)
}
func (m *EntryCreditEntryRegistration) XXX_Size() int {
	return m.Size()
}
func (m *EntryCreditEntryRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryCreditEntryRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_EntryCreditEntryRegistration proto.InternalMessageInfo

func (m *EntryCreditEntryRegistration) GetEntityState() EntityState {
	if m != nil {
		return m.EntityState
	}
	return EntityState_REQUESTED
}

func (m *EntryCreditEntryRegistration) GetEntryHash() *Hash {
	if m != nil {
		return m.EntryHash
	}
	return nil
}

func (m *EntryCreditEntryRegistration) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *EntryCreditEntryRegistration) GetCredits() uint32 {
	if m != nil {
		return m.Credits
	}
	return 0
}

func (m *EntryCreditEntryRegistration) GetEcPubKey() []byte {
	if m != nil {
		return m.EcPubKey
	}
	return nil
}

func (m *EntryCreditEntryRegistration) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type IncreaseBalance struct {
	EcPubKey             []byte   `protobuf:"bytes,1,opt,name=ecPubKey,proto3" json:"ecPubKey,omitempty"`
	TxID                 *Hash    `protobuf:"bytes,2,opt,name=txID,proto3" json:"txID,omitempty"`
	Index                uint64   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	EcAmount             uint64   `protobuf:"varint,4,opt,name=ecAmount,proto3" json:"ecAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncreaseBalance) Reset()         { *m = IncreaseBalance{} }
func (m *IncreaseBalance) String() string { return proto.CompactTextString(m) }
func (*IncreaseBalance) ProtoMessage()    {}
func (*IncreaseBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_2805fc15da93467e, []int{5}
}
func (m *IncreaseBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncreaseBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncreaseBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncreaseBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncreaseBalance.Merge(m, src)
}
func (m *IncreaseBalance) XXX_Size() int {
	return m.Size()
}
func (m *IncreaseBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_IncreaseBalance.DiscardUnknown(m)
}

var xxx_messageInfo_IncreaseBalance proto.InternalMessageInfo

func (m *IncreaseBalance) GetEcPubKey() []byte {
	if m != nil {
		return m.EcPubKey
	}
	return nil
}

func (m *IncreaseBalance) GetTxID() *Hash {
	if m != nil {
		return m.TxID
	}
	return nil
}

func (m *IncreaseBalance) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *IncreaseBalance) GetEcAmount() uint64 {
	if m != nil {
		return m.EcAmount
	}
	return 0
}

type MinuteNumber struct {
	MinuteNumber         uint32   `protobuf:"varint,1,opt,name=minuteNumber,proto3" json:"minuteNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MinuteNumber) Reset()         { *m = MinuteNumber{} }
func (m *MinuteNumber) String() string { return proto.CompactTextString(m) }
func (*MinuteNumber) ProtoMessage()    {}
func (*MinuteNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_2805fc15da93467e, []int{6}
}
func (m *MinuteNumber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MinuteNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MinuteNumber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MinuteNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinuteNumber.Merge(m, src)
}
func (m *MinuteNumber) XXX_Size() int {
	return m.Size()
}
func (m *MinuteNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_MinuteNumber.DiscardUnknown(m)
}

var xxx_messageInfo_MinuteNumber proto.InternalMessageInfo

func (m *MinuteNumber) GetMinuteNumber() uint32 {
	if m != nil {
		return m.MinuteNumber
	}
	return 0
}

type ServerIndexNumber struct {
	ServerIndexNumber    uint32   `protobuf:"varint,1,opt,name=serverIndexNumber,proto3" json:"serverIndexNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerIndexNumber) Reset()         { *m = ServerIndexNumber{} }
func (m *ServerIndexNumber) String() string { return proto.CompactTextString(m) }
func (*ServerIndexNumber) ProtoMessage()    {}
func (*ServerIndexNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_2805fc15da93467e, []int{7}
}
func (m *ServerIndexNumber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerIndexNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerIndexNumber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerIndexNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerIndexNumber.Merge(m, src)
}
func (m *ServerIndexNumber) XXX_Size() int {
	return m.Size()
}
func (m *ServerIndexNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerIndexNumber.DiscardUnknown(m)
}

var xxx_messageInfo_ServerIndexNumber proto.InternalMessageInfo

func (m *ServerIndexNumber) GetServerIndexNumber() uint32 {
	if m != nil {
		return m.ServerIndexNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*EntryCreditBlock)(nil), "eventmessages.EntryCreditBlock")
	proto.RegisterType((*EntryCreditBlockHeader)(nil), "eventmessages.EntryCreditBlockHeader")
	proto.RegisterType((*EntryCreditBlockEntry)(nil), "eventmessages.EntryCreditBlockEntry")
	proto.RegisterType((*EntryCreditChainRegistration)(nil), "eventmessages.EntryCreditChainRegistration")
	proto.RegisterType((*EntryCreditEntryRegistration)(nil), "eventmessages.EntryCreditEntryRegistration")
	proto.RegisterType((*IncreaseBalance)(nil), "eventmessages.IncreaseBalance")
	proto.RegisterType((*MinuteNumber)(nil), "eventmessages.MinuteNumber")
	proto.RegisterType((*ServerIndexNumber)(nil), "eventmessages.ServerIndexNumber")
}

func init() { proto.RegisterFile("eventmessages/entryCredit.proto", fileDescriptor_2805fc15da93467e) }

var fileDescriptor_2805fc15da93467e = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xcd, 0xe4, 0xd9, 0x4e, 0x52, 0xda, 0x4e, 0xa1, 0xb2, 0x02, 0x4a, 0x2d, 0x0b, 0xd4, 0x48,
	0xa0, 0xa4, 0x04, 0xd8, 0x20, 0x1e, 0x4a, 0xd3, 0xa2, 0x04, 0x54, 0xa8, 0xa6, 0x5d, 0xb1, 0xb3,
	0x9d, 0xdb, 0x64, 0x20, 0xb6, 0x23, 0x7b, 0x1c, 0x1a, 0xbe, 0x80, 0x0d, 0x0b, 0x7e, 0x01, 0x36,
	0x7c, 0x02, 0x4b, 0x96, 0x2c, 0xf9, 0x04, 0x9a, 0x3d, 0x7b, 0x96, 0xc8, 0x63, 0xe7, 0x61, 0xc7,
	0x69, 0x2b, 0x58, 0x25, 0xf7, 0xce, 0x39, 0xc7, 0x33, 0x67, 0x7c, 0xae, 0xf1, 0x16, 0x0c, 0xc0,
	0xe4, 0x06, 0x38, 0x8e, 0xda, 0x01, 0xa7, 0x0a, 0x26, 0xb7, 0x87, 0x0d, 0x1b, 0xda, 0x8c, 0x57,
	0xfa, 0xb6, 0xc5, 0x2d, 0xb2, 0x12, 0x02, 0x14, 0xe5, 0x30, 0xbe, 0x03, 0x26, 0xd8, 0x6a, 0xef,
	0x78, 0xd8, 0x07, 0xc7, 0x27, 0x14, 0x77, 0x3a, 0x8c, 0x77, 0x5d, 0xad, 0xa2, 0x5b, 0x46, 0xd5,
	0xea, 0x3b, 0x00, 0x55, 0xd1, 0xd7, 0xdc, 0x13, 0xbf, 0x14, 0x95, 0xff, 0x37, 0x60, 0x3c, 0xbc,
	0x14, 0x83, 0x7b, 0xcf, 0xa8, 0x72, 0x66, 0x80, 0xc3, 0x55, 0xa3, 0xef, 0x73, 0x95, 0x4f, 0x08,
	0xaf, 0xed, 0x4f, 0x37, 0xbd, 0xdb, 0xb3, 0xf4, 0xb7, 0xe4, 0x31, 0xce, 0x76, 0x41, 0x6d, 0x83,
	0x2d, 0x21, 0x19, 0x95, 0xf3, 0xb5, 0x5b, 0x95, 0xd0, 0xae, 0x2b, 0x51, 0x42, 0x53, 0x80, 0x69,
	0x40, 0x22, 0x4f, 0x70, 0xce, 0xf3, 0x81, 0x81, 0x23, 0x25, 0xe5, 0x54, 0x39, 0x5f, 0xbb, 0x79,
	0x01, 0x5f, 0xd4, 0x74, 0x4c, 0x52, 0xce, 0x92, 0x78, 0x33, 0xfe, 0x11, 0xa4, 0x8a, 0x97, 0x34,
	0xab, 0x3d, 0x6c, 0xaa, 0x4e, 0x37, 0xd8, 0xdb, 0x46, 0x44, 0xdb, 0x5b, 0xa2, 0x13, 0x10, 0x69,
	0x60, 0xd2, 0xb7, 0x61, 0xc0, 0x2c, 0xd7, 0xf1, 0x25, 0x04, 0x35, 0xb9, 0x98, 0x1a, 0x03, 0x27,
	0x4f, 0xf1, 0xda, 0xb8, 0xfb, 0xcc, 0xed, 0xf5, 0x84, 0x44, 0x6a, 0xb1, 0xc4, 0x1c, 0x98, 0xc8,
	0x38, 0xaf, 0xf9, 0xa7, 0x60, 0x9d, 0x2e, 0x97, 0xd2, 0x32, 0x2a, 0xaf, 0xd0, 0xd9, 0x16, 0xd9,
	0xc1, 0x1b, 0xbe, 0x7b, 0xfb, 0xa7, 0x7d, 0xd5, 0x74, 0x98, 0x65, 0xd6, 0x6d, 0x50, 0xa5, 0x8c,
	0x8c, 0xca, 0x05, 0x1a, 0xb7, 0xe4, 0x69, 0x5a, 0xda, 0x1b, 0xd0, 0x79, 0xc3, 0x72, 0x4d, 0x2e,
	0x65, 0x65, 0x54, 0x4e, 0xd3, 0xd9, 0x16, 0x29, 0xfa, 0x66, 0x1d, 0xb1, 0xf7, 0x20, 0xe5, 0xc4,
	0xf2, 0xa4, 0x56, 0xbe, 0xa4, 0xf0, 0xb5, 0xd8, 0x6b, 0x20, 0xaf, 0x70, 0x5e, 0xb7, 0x0c, 0x83,
	0xf1, 0x46, 0x57, 0x65, 0x66, 0xe0, 0xf2, 0xed, 0xc5, 0x37, 0x28, 0x60, 0x14, 0x3a, 0xcc, 0xe1,
	0xb6, 0xca, 0x99, 0x65, 0x36, 0x13, 0x74, 0x56, 0x61, 0x2a, 0x28, 0x48, 0x81, 0xf7, 0xe7, 0x08,
	0xfa, 0x6f, 0x43, 0xac, 0xa0, 0xbf, 0xc3, 0xe7, 0x78, 0x95, 0x99, 0xba, 0x0d, 0xaa, 0x03, 0xbb,
	0x6a, 0x4f, 0x35, 0x75, 0x08, 0x6e, 0xa3, 0x14, 0x11, 0x6d, 0x85, 0x51, 0xcd, 0x04, 0x8d, 0x12,
	0x49, 0x1d, 0x17, 0x0c, 0x66, 0xba, 0x1c, 0x5e, 0xba, 0x86, 0x06, 0xb6, 0xb8, 0x9a, 0x7c, 0xed,
	0x7a, 0x44, 0xe8, 0x60, 0x06, 0xd2, 0x4c, 0xd0, 0x10, 0x85, 0x1c, 0xe2, 0x75, 0x07, 0xec, 0x01,
	0xd8, 0x2d, 0xb3, 0x0d, 0xa7, 0x81, 0x4e, 0x46, 0xe8, 0xc8, 0x11, 0x9d, 0xa3, 0x28, 0xae, 0x99,
	0xa0, 0xf3, 0xe4, 0xdd, 0x1c, 0xce, 0x0c, 0xd4, 0x9e, 0x0b, 0xca, 0xef, 0x24, 0xbe, 0x71, 0x9e,
	0xd5, 0xe4, 0x11, 0xce, 0x83, 0xc9, 0x19, 0x1f, 0x1e, 0x71, 0x95, 0x83, 0xb8, 0xac, 0x2b, 0xb5,
	0xe2, 0xbc, 0xb7, 0x63, 0x04, 0x9d, 0x85, 0x93, 0x07, 0x38, 0xaf, 0x7b, 0x92, 0xad, 0xbd, 0x8b,
	0x52, 0x31, 0x8b, 0x23, 0x77, 0xf1, 0xb2, 0x98, 0x73, 0x17, 0xe5, 0x60, 0x8a, 0x22, 0xdb, 0x38,
	0xfd, 0x0e, 0x7a, 0xed, 0xc0, 0xde, 0x58, 0xb4, 0x00, 0x90, 0xfb, 0x78, 0x79, 0x32, 0xa2, 0x02,
	0x13, 0x37, 0x2b, 0xfe, 0xb0, 0x13, 0x03, 0xac, 0x72, 0x3c, 0x5e, 0xa5, 0x53, 0x20, 0x91, 0x70,
	0x4e, 0x17, 0x0e, 0x39, 0x22, 0x07, 0x2b, 0x74, 0x5c, 0x7a, 0x19, 0x00, 0xfd, 0xd0, 0xd5, 0x5e,
	0xc0, 0x50, 0x64, 0xa0, 0x40, 0x27, 0x35, 0x59, 0xc3, 0x29, 0x87, 0x75, 0xa4, 0x25, 0xd1, 0xf6,
	0xfe, 0x2a, 0x1f, 0xc3, 0x7e, 0xcf, 0xbd, 0x89, 0xff, 0xe9, 0x77, 0xc8, 0xb8, 0xe4, 0xa5, 0x8c,
	0x0b, 0xf9, 0x91, 0xfa, 0x07, 0x3f, 0xd2, 0x8b, 0xfd, 0xc8, 0xc4, 0xfb, 0x91, 0x9d, 0xfa, 0xf1,
	0x01, 0xe1, 0xd5, 0x48, 0x88, 0x42, 0x0a, 0x28, 0xa2, 0xb0, 0x8d, 0xd3, 0xfc, 0xb4, 0xb5, 0x77,
	0xde, 0xd9, 0x04, 0x80, 0x5c, 0xc5, 0x19, 0xe6, 0xbd, 0xf0, 0xe2, 0x48, 0x69, 0xea, 0x17, 0xbe,
	0x74, 0xdd, 0x10, 0xf3, 0x2c, 0xed, 0x0f, 0xac, 0x71, 0xad, 0xd4, 0x70, 0x61, 0x36, 0x85, 0x44,
	0x89, 0x04, 0x17, 0x89, 0x73, 0x86, 0x7a, 0x4a, 0x1d, 0xaf, 0xcf, 0x25, 0x8e, 0xdc, 0x89, 0x8b,
	0xab, 0xcf, 0x8e, 0x89, 0xe2, 0xc1, 0x9f, 0xb3, 0x12, 0xfa, 0x3a, 0x2a, 0xa1, 0x6f, 0xa3, 0x12,
	0xfa, 0x31, 0x2a, 0xa1, 0x9f, 0xa3, 0x12, 0xfa, 0x35, 0x2a, 0xa1, 0xef, 0x9f, 0xb7, 0x10, 0x96,
	0x75, 0xcb, 0xa8, 0x9c, 0xa8, 0x3a, 0x9f, 0xfc, 0xb4, 0xc3, 0x67, 0x7e, 0x1d, 0xfe, 0xfc, 0x6b,
	0x59, 0xf1, 0xd5, 0xbd, 0xf7, 0x37, 0x00, 0x00, 0xff, 0xff, 0x11, 0x23, 0xa7, 0x5d, 0x37, 0x08,
	0x00, 0x00,
}

func (this *EntryCreditBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryCreditBlock)
	if !ok {
		that2, ok := that.(EntryCreditBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EntryCreditBlockHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryCreditBlockHeader)
	if !ok {
		that2, ok := that.(EntryCreditBlockHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BodyHash.Equal(that1.BodyHash) {
		return false
	}
	if !this.PreviousHeaderHash.Equal(that1.PreviousHeaderHash) {
		return false
	}
	if !this.PreviousFullHash.Equal(that1.PreviousFullHash) {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if !bytes.Equal(this.HeaderExpansionArea, that1.HeaderExpansionArea) {
		return false
	}
	if this.ObjectCount != that1.ObjectCount {
		return false
	}
	if this.BodySize != that1.BodySize {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EntryCreditBlockEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryCreditBlockEntry)
	if !ok {
		that2, ok := that.(EntryCreditBlockEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EntryCreditBlockEntry_CommitChain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryCreditBlockEntry_CommitChain)
	if !ok {
		that2, ok := that.(EntryCreditBlockEntry_CommitChain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommitChain.Equal(that1.CommitChain) {
		return false
	}
	return true
}
func (this *EntryCreditBlockEntry_CommitEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryCreditBlockEntry_CommitEntry)
	if !ok {
		that2, ok := that.(EntryCreditBlockEntry_CommitEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CommitEntry.Equal(that1.CommitEntry) {
		return false
	}
	return true
}
func (this *EntryCreditBlockEntry_IncreaseBalance) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryCreditBlockEntry_IncreaseBalance)
	if !ok {
		that2, ok := that.(EntryCreditBlockEntry_IncreaseBalance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IncreaseBalance.Equal(that1.IncreaseBalance) {
		return false
	}
	return true
}
func (this *EntryCreditBlockEntry_MinuteNumber) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryCreditBlockEntry_MinuteNumber)
	if !ok {
		that2, ok := that.(EntryCreditBlockEntry_MinuteNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MinuteNumber.Equal(that1.MinuteNumber) {
		return false
	}
	return true
}
func (this *EntryCreditBlockEntry_ServerIndexNumber) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryCreditBlockEntry_ServerIndexNumber)
	if !ok {
		that2, ok := that.(EntryCreditBlockEntry_ServerIndexNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServerIndexNumber.Equal(that1.ServerIndexNumber) {
		return false
	}
	return true
}
func (this *EntryCreditChainRegistration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryCreditChainRegistration)
	if !ok {
		that2, ok := that.(EntryCreditChainRegistration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EntityState != that1.EntityState {
		return false
	}
	if !this.ChainIDHash.Equal(that1.ChainIDHash) {
		return false
	}
	if !this.EntryHash.Equal(that1.EntryHash) {
		return false
	}
	if !this.Weld.Equal(that1.Weld) {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if this.Credits != that1.Credits {
		return false
	}
	if !bytes.Equal(this.EcPubKey, that1.EcPubKey) {
		return false
	}
	if !bytes.Equal(this.Sig, that1.Sig) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EntryCreditEntryRegistration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryCreditEntryRegistration)
	if !ok {
		that2, ok := that.(EntryCreditEntryRegistration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EntityState != that1.EntityState {
		return false
	}
	if !this.EntryHash.Equal(that1.EntryHash) {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if this.Credits != that1.Credits {
		return false
	}
	if !bytes.Equal(this.EcPubKey, that1.EcPubKey) {
		return false
	}
	if !bytes.Equal(this.Sig, that1.Sig) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *IncreaseBalance) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IncreaseBalance)
	if !ok {
		that2, ok := that.(IncreaseBalance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.EcPubKey, that1.EcPubKey) {
		return false
	}
	if !this.TxID.Equal(that1.TxID) {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.EcAmount != that1.EcAmount {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MinuteNumber) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MinuteNumber)
	if !ok {
		that2, ok := that.(MinuteNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinuteNumber != that1.MinuteNumber {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ServerIndexNumber) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerIndexNumber)
	if !ok {
		that2, ok := that.(ServerIndexNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServerIndexNumber != that1.ServerIndexNumber {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type EntryCreditBlockGetter interface {
	GetEntryCreditBlock() *EntryCreditBlock
}

var GraphQLEntryCreditBlockType *github_com_graphql_go_graphql.Object

type EntryCreditBlockHeaderGetter interface {
	GetEntryCreditBlockHeader() *EntryCreditBlockHeader
}

var GraphQLEntryCreditBlockHeaderType *github_com_graphql_go_graphql.Object

type EntryCreditBlockEntryGetter interface {
	GetEntryCreditBlockEntry() *EntryCreditBlockEntry
}

var GraphQLEntryCreditBlockEntryType *github_com_graphql_go_graphql.Object
var GraphQLEntryCreditBlockEntryValueUnion *github_com_graphql_go_graphql.Union

type EntryCreditChainRegistrationGetter interface {
	GetEntryCreditChainRegistration() *EntryCreditChainRegistration
}

var GraphQLEntryCreditChainRegistrationType *github_com_graphql_go_graphql.Object

type EntryCreditEntryRegistrationGetter interface {
	GetEntryCreditEntryRegistration() *EntryCreditEntryRegistration
}

var GraphQLEntryCreditEntryRegistrationType *github_com_graphql_go_graphql.Object

type IncreaseBalanceGetter interface {
	GetIncreaseBalance() *IncreaseBalance
}

var GraphQLIncreaseBalanceType *github_com_graphql_go_graphql.Object

type MinuteNumberGetter interface {
	GetMinuteNumber() *MinuteNumber
}

var GraphQLMinuteNumberType *github_com_graphql_go_graphql.Object

type ServerIndexNumberGetter interface {
	GetServerIndexNumber() *ServerIndexNumber
}

var GraphQLServerIndexNumberType *github_com_graphql_go_graphql.Object

func (g *EntryCreditBlockEntry_CommitChain) GetEntryCreditChainRegistration() *EntryCreditChainRegistration {
	return g.CommitChain
}
func (g *EntryCreditBlockEntry_CommitEntry) GetEntryCreditEntryRegistration() *EntryCreditEntryRegistration {
	return g.CommitEntry
}
func (g *EntryCreditBlockEntry_IncreaseBalance) GetIncreaseBalance() *IncreaseBalance {
	return g.IncreaseBalance
}
func (g *EntryCreditBlockEntry_MinuteNumber) GetMinuteNumber() *MinuteNumber {
	return g.MinuteNumber
}
func (g *EntryCreditBlockEntry_ServerIndexNumber) GetServerIndexNumber() *ServerIndexNumber {
	return g.ServerIndexNumber
}

func init() {
	GraphQLEntryCreditBlockType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "EntryCreditBlock",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"header": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLEntryCreditBlockHeaderType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditBlock)
						if ok {
							if obj.Header == nil {
								return nil, nil
							}
							return obj.GetHeader(), nil
						}
						inter, ok := p.Source.(EntryCreditBlockGetter)
						if ok {
							face := inter.GetEntryCreditBlock()
							if face == nil {
								return nil, nil
							}
							if face.Header == nil {
								return nil, nil
							}
							return face.GetHeader(), nil
						}
						return nil, fmt.Errorf("field header not resolved")
					},
				},
				"entries": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLEntryCreditBlockEntryType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditBlock)
						if ok {
							return obj.Entries, nil
						}
						inter, ok := p.Source.(EntryCreditBlockGetter)
						if ok {
							face := inter.GetEntryCreditBlock()
							if face == nil {
								return nil, nil
							}
							return face.Entries, nil
						}
						return nil, fmt.Errorf("field entries not resolved")
					},
				},
			}
		}),
	})
	GraphQLEntryCreditBlockHeaderType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "EntryCreditBlockHeader",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"bodyHash": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditBlockHeader)
						if ok {
							if obj.BodyHash == nil {
								return nil, nil
							}
							return obj.GetBodyHash(), nil
						}
						inter, ok := p.Source.(EntryCreditBlockHeaderGetter)
						if ok {
							face := inter.GetEntryCreditBlockHeader()
							if face == nil {
								return nil, nil
							}
							if face.BodyHash == nil {
								return nil, nil
							}
							return face.GetBodyHash(), nil
						}
						return nil, fmt.Errorf("field bodyHash not resolved")
					},
				},
				"previousHeaderHash": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditBlockHeader)
						if ok {
							if obj.PreviousHeaderHash == nil {
								return nil, nil
							}
							return obj.GetPreviousHeaderHash(), nil
						}
						inter, ok := p.Source.(EntryCreditBlockHeaderGetter)
						if ok {
							face := inter.GetEntryCreditBlockHeader()
							if face == nil {
								return nil, nil
							}
							if face.PreviousHeaderHash == nil {
								return nil, nil
							}
							return face.GetPreviousHeaderHash(), nil
						}
						return nil, fmt.Errorf("field previousHeaderHash not resolved")
					},
				},
				"previousFullHash": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditBlockHeader)
						if ok {
							if obj.PreviousFullHash == nil {
								return nil, nil
							}
							return obj.GetPreviousFullHash(), nil
						}
						inter, ok := p.Source.(EntryCreditBlockHeaderGetter)
						if ok {
							face := inter.GetEntryCreditBlockHeader()
							if face == nil {
								return nil, nil
							}
							if face.PreviousFullHash == nil {
								return nil, nil
							}
							return face.GetPreviousFullHash(), nil
						}
						return nil, fmt.Errorf("field previousFullHash not resolved")
					},
				},
				"blockHeight": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditBlockHeader)
						if ok {
							return obj.BlockHeight, nil
						}
						inter, ok := p.Source.(EntryCreditBlockHeaderGetter)
						if ok {
							face := inter.GetEntryCreditBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.BlockHeight, nil
						}
						return nil, fmt.Errorf("field blockHeight not resolved")
					},
				},
				"headerExpansionArea": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditBlockHeader)
						if ok {
							return obj.HeaderExpansionArea, nil
						}
						inter, ok := p.Source.(EntryCreditBlockHeaderGetter)
						if ok {
							face := inter.GetEntryCreditBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.HeaderExpansionArea, nil
						}
						return nil, fmt.Errorf("field headerExpansionArea not resolved")
					},
				},
				"objectCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditBlockHeader)
						if ok {
							return obj.ObjectCount, nil
						}
						inter, ok := p.Source.(EntryCreditBlockHeaderGetter)
						if ok {
							face := inter.GetEntryCreditBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.ObjectCount, nil
						}
						return nil, fmt.Errorf("field objectCount not resolved")
					},
				},
				"bodySize": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditBlockHeader)
						if ok {
							return obj.BodySize, nil
						}
						inter, ok := p.Source.(EntryCreditBlockHeaderGetter)
						if ok {
							face := inter.GetEntryCreditBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.BodySize, nil
						}
						return nil, fmt.Errorf("field bodySize not resolved")
					},
				},
			}
		}),
	})
	GraphQLEntryCreditBlockEntryType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "EntryCreditBlockEntry",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"value": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLEntryCreditBlockEntryValueUnion,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditBlockEntry)
						if !ok {
							return nil, fmt.Errorf("field value not resolved")
						}
						return obj.GetValue(), nil
					},
				},
			}
		}),
	})
	GraphQLEntryCreditChainRegistrationType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "EntryCreditChainRegistration",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"entityState": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLEntityStateEnum,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditChainRegistration)
						if ok {
							return int(EntityState_value[obj.EntityState.String()]), nil
						}
						inter, ok := p.Source.(EntryCreditChainRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditChainRegistration()
							if face == nil {
								return nil, nil
							}
							return int(EntityState_value[face.EntityState.String()]), nil
						}
						return nil, fmt.Errorf("field entityState not resolved")
					},
				},
				"chainIDHash": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditChainRegistration)
						if ok {
							if obj.ChainIDHash == nil {
								return nil, nil
							}
							return obj.GetChainIDHash(), nil
						}
						inter, ok := p.Source.(EntryCreditChainRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditChainRegistration()
							if face == nil {
								return nil, nil
							}
							if face.ChainIDHash == nil {
								return nil, nil
							}
							return face.GetChainIDHash(), nil
						}
						return nil, fmt.Errorf("field chainIDHash not resolved")
					},
				},
				"entryHash": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditChainRegistration)
						if ok {
							if obj.EntryHash == nil {
								return nil, nil
							}
							return obj.GetEntryHash(), nil
						}
						inter, ok := p.Source.(EntryCreditChainRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditChainRegistration()
							if face == nil {
								return nil, nil
							}
							if face.EntryHash == nil {
								return nil, nil
							}
							return face.GetEntryHash(), nil
						}
						return nil, fmt.Errorf("field entryHash not resolved")
					},
				},
				"weld": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditChainRegistration)
						if ok {
							if obj.Weld == nil {
								return nil, nil
							}
							return obj.GetWeld(), nil
						}
						inter, ok := p.Source.(EntryCreditChainRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditChainRegistration()
							if face == nil {
								return nil, nil
							}
							if face.Weld == nil {
								return nil, nil
							}
							return face.GetWeld(), nil
						}
						return nil, fmt.Errorf("field weld not resolved")
					},
				},
				"timestamp": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditChainRegistration)
						if ok {
							if obj.Timestamp == nil {
								return nil, nil
							}
							return obj.GetTimestamp(), nil
						}
						inter, ok := p.Source.(EntryCreditChainRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditChainRegistration()
							if face == nil {
								return nil, nil
							}
							if face.Timestamp == nil {
								return nil, nil
							}
							return face.GetTimestamp(), nil
						}
						return nil, fmt.Errorf("field timestamp not resolved")
					},
				},
				"credits": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditChainRegistration)
						if ok {
							return obj.Credits, nil
						}
						inter, ok := p.Source.(EntryCreditChainRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditChainRegistration()
							if face == nil {
								return nil, nil
							}
							return face.Credits, nil
						}
						return nil, fmt.Errorf("field credits not resolved")
					},
				},
				"ecPubKey": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditChainRegistration)
						if ok {
							return obj.EcPubKey, nil
						}
						inter, ok := p.Source.(EntryCreditChainRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditChainRegistration()
							if face == nil {
								return nil, nil
							}
							return face.EcPubKey, nil
						}
						return nil, fmt.Errorf("field ecPubKey not resolved")
					},
				},
				"sig": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditChainRegistration)
						if ok {
							return obj.Sig, nil
						}
						inter, ok := p.Source.(EntryCreditChainRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditChainRegistration()
							if face == nil {
								return nil, nil
							}
							return face.Sig, nil
						}
						return nil, fmt.Errorf("field sig not resolved")
					},
				},
			}
		}),
	})
	GraphQLEntryCreditEntryRegistrationType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "EntryCreditEntryRegistration",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"entityState": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLEntityStateEnum,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditEntryRegistration)
						if ok {
							return int(EntityState_value[obj.EntityState.String()]), nil
						}
						inter, ok := p.Source.(EntryCreditEntryRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditEntryRegistration()
							if face == nil {
								return nil, nil
							}
							return int(EntityState_value[face.EntityState.String()]), nil
						}
						return nil, fmt.Errorf("field entityState not resolved")
					},
				},
				"entryHash": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditEntryRegistration)
						if ok {
							if obj.EntryHash == nil {
								return nil, nil
							}
							return obj.GetEntryHash(), nil
						}
						inter, ok := p.Source.(EntryCreditEntryRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditEntryRegistration()
							if face == nil {
								return nil, nil
							}
							if face.EntryHash == nil {
								return nil, nil
							}
							return face.GetEntryHash(), nil
						}
						return nil, fmt.Errorf("field entryHash not resolved")
					},
				},
				"timestamp": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditEntryRegistration)
						if ok {
							if obj.Timestamp == nil {
								return nil, nil
							}
							return obj.GetTimestamp(), nil
						}
						inter, ok := p.Source.(EntryCreditEntryRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditEntryRegistration()
							if face == nil {
								return nil, nil
							}
							if face.Timestamp == nil {
								return nil, nil
							}
							return face.GetTimestamp(), nil
						}
						return nil, fmt.Errorf("field timestamp not resolved")
					},
				},
				"credits": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditEntryRegistration)
						if ok {
							return obj.Credits, nil
						}
						inter, ok := p.Source.(EntryCreditEntryRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditEntryRegistration()
							if face == nil {
								return nil, nil
							}
							return face.Credits, nil
						}
						return nil, fmt.Errorf("field credits not resolved")
					},
				},
				"ecPubKey": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditEntryRegistration)
						if ok {
							return obj.EcPubKey, nil
						}
						inter, ok := p.Source.(EntryCreditEntryRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditEntryRegistration()
							if face == nil {
								return nil, nil
							}
							return face.EcPubKey, nil
						}
						return nil, fmt.Errorf("field ecPubKey not resolved")
					},
				},
				"sig": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryCreditEntryRegistration)
						if ok {
							return obj.Sig, nil
						}
						inter, ok := p.Source.(EntryCreditEntryRegistrationGetter)
						if ok {
							face := inter.GetEntryCreditEntryRegistration()
							if face == nil {
								return nil, nil
							}
							return face.Sig, nil
						}
						return nil, fmt.Errorf("field sig not resolved")
					},
				},
			}
		}),
	})
	GraphQLIncreaseBalanceType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "IncreaseBalance",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"ecPubKey": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IncreaseBalance)
						if ok {
							return obj.EcPubKey, nil
						}
						inter, ok := p.Source.(IncreaseBalanceGetter)
						if ok {
							face := inter.GetIncreaseBalance()
							if face == nil {
								return nil, nil
							}
							return face.EcPubKey, nil
						}
						return nil, fmt.Errorf("field ecPubKey not resolved")
					},
				},
				"txID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IncreaseBalance)
						if ok {
							if obj.TxID == nil {
								return nil, nil
							}
							return obj.GetTxID(), nil
						}
						inter, ok := p.Source.(IncreaseBalanceGetter)
						if ok {
							face := inter.GetIncreaseBalance()
							if face == nil {
								return nil, nil
							}
							if face.TxID == nil {
								return nil, nil
							}
							return face.GetTxID(), nil
						}
						return nil, fmt.Errorf("field txID not resolved")
					},
				},
				"index": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IncreaseBalance)
						if ok {
							return obj.Index, nil
						}
						inter, ok := p.Source.(IncreaseBalanceGetter)
						if ok {
							face := inter.GetIncreaseBalance()
							if face == nil {
								return nil, nil
							}
							return face.Index, nil
						}
						return nil, fmt.Errorf("field index not resolved")
					},
				},
				"ecAmount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*IncreaseBalance)
						if ok {
							return obj.EcAmount, nil
						}
						inter, ok := p.Source.(IncreaseBalanceGetter)
						if ok {
							face := inter.GetIncreaseBalance()
							if face == nil {
								return nil, nil
							}
							return face.EcAmount, nil
						}
						return nil, fmt.Errorf("field ecAmount not resolved")
					},
				},
			}
		}),
	})
	GraphQLMinuteNumberType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "MinuteNumber",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"minuteNumber": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*MinuteNumber)
						if ok {
							return obj.MinuteNumber, nil
						}
						inter, ok := p.Source.(MinuteNumberGetter)
						if ok {
							face := inter.GetMinuteNumber()
							if face == nil {
								return nil, nil
							}
							return face.MinuteNumber, nil
						}
						return nil, fmt.Errorf("field minuteNumber not resolved")
					},
				},
			}
		}),
	})
	GraphQLServerIndexNumberType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ServerIndexNumber",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"serverIndexNumber": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ServerIndexNumber)
						if ok {
							return obj.ServerIndexNumber, nil
						}
						inter, ok := p.Source.(ServerIndexNumberGetter)
						if ok {
							face := inter.GetServerIndexNumber()
							if face == nil {
								return nil, nil
							}
							return face.ServerIndexNumber, nil
						}
						return nil, fmt.Errorf("field serverIndexNumber not resolved")
					},
				},
			}
		}),
	})
	GraphQLEntryCreditBlockEntryValueUnion = github_com_graphql_go_graphql.NewUnion(github_com_graphql_go_graphql.UnionConfig{
		Name:        "EntryCreditBlockEntryValue",
		Description: "",
		Types: []*github_com_graphql_go_graphql.Object{
			GraphQLEntryCreditChainRegistrationType,
			GraphQLEntryCreditEntryRegistrationType,
			GraphQLIncreaseBalanceType,
			GraphQLMinuteNumberType,
			GraphQLServerIndexNumberType,
		},
		ResolveType: func(p github_com_graphql_go_graphql.ResolveTypeParams) *github_com_graphql_go_graphql.Object {
			if _, ok := p.Value.(*EntryCreditBlockEntry_CommitChain); ok {
				return GraphQLEntryCreditChainRegistrationType
			}
			if _, ok := p.Value.(*EntryCreditBlockEntry_CommitEntry); ok {
				return GraphQLEntryCreditEntryRegistrationType
			}
			if _, ok := p.Value.(*EntryCreditBlockEntry_IncreaseBalance); ok {
				return GraphQLIncreaseBalanceType
			}
			if _, ok := p.Value.(*EntryCreditBlockEntry_MinuteNumber); ok {
				return GraphQLMinuteNumberType
			}
			if _, ok := p.Value.(*EntryCreditBlockEntry_ServerIndexNumber); ok {
				return GraphQLServerIndexNumberType
			}
			return nil
		},
	})
}
func (m *EntryCreditBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryCreditBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEntryCredit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EntryCreditBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryCreditBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BodyHash != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.BodyHash.Size()))
		n2, err := m.BodyHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.PreviousHeaderHash != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.PreviousHeaderHash.Size()))
		n3, err := m.PreviousHeaderHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.PreviousFullHash != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.PreviousFullHash.Size()))
		n4, err := m.PreviousFullHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.BlockHeight != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.BlockHeight))
	}
	if len(m.HeaderExpansionArea) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(len(m.HeaderExpansionArea)))
		i += copy(dAtA[i:], m.HeaderExpansionArea)
	}
	if m.ObjectCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.ObjectCount))
	}
	if m.BodySize != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.BodySize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EntryCreditBlockEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryCreditBlockEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn5, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EntryCreditBlockEntry_CommitChain) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CommitChain != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.CommitChain.Size()))
		n6, err := m.CommitChain.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *EntryCreditBlockEntry_CommitEntry) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CommitEntry != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.CommitEntry.Size()))
		n7, err := m.CommitEntry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *EntryCreditBlockEntry_IncreaseBalance) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IncreaseBalance != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.IncreaseBalance.Size()))
		n8, err := m.IncreaseBalance.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *EntryCreditBlockEntry_MinuteNumber) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MinuteNumber != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.MinuteNumber.Size()))
		n9, err := m.MinuteNumber.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *EntryCreditBlockEntry_ServerIndexNumber) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ServerIndexNumber != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.ServerIndexNumber.Size()))
		n10, err := m.ServerIndexNumber.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *EntryCreditChainRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryCreditChainRegistration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EntityState != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.EntityState))
	}
	if m.ChainIDHash != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.ChainIDHash.Size()))
		n11, err := m.ChainIDHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.EntryHash != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.EntryHash.Size()))
		n12, err := m.EntryHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Weld != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Weld.Size()))
		n13, err := m.Weld.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Timestamp.Size()))
		n14, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Credits != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Credits))
	}
	if len(m.EcPubKey) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(len(m.EcPubKey)))
		i += copy(dAtA[i:], m.EcPubKey)
	}
	if len(m.Sig) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(len(m.Sig)))
		i += copy(dAtA[i:], m.Sig)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EntryCreditEntryRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryCreditEntryRegistration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EntityState != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.EntityState))
	}
	if m.EntryHash != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.EntryHash.Size()))
		n15, err := m.EntryHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Timestamp.Size()))
		n16, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.Credits != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Credits))
	}
	if len(m.EcPubKey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(len(m.EcPubKey)))
		i += copy(dAtA[i:], m.EcPubKey)
	}
	if len(m.Sig) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(len(m.Sig)))
		i += copy(dAtA[i:], m.Sig)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IncreaseBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncreaseBalance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EcPubKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(len(m.EcPubKey)))
		i += copy(dAtA[i:], m.EcPubKey)
	}
	if m.TxID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.TxID.Size()))
		n17, err := m.TxID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Index))
	}
	if m.EcAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.EcAmount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MinuteNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MinuteNumber) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinuteNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.MinuteNumber))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerIndexNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerIndexNumber) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServerIndexNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.ServerIndexNumber))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEntryCredit(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedEntryCreditBlock(r randyEntryCredit, easy bool) *EntryCreditBlock {
	this := &EntryCreditBlock{}
	if r.Intn(10) != 0 {
		this.Header = NewPopulatedEntryCreditBlockHeader(r, easy)
	}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Entries = make([]*EntryCreditBlockEntry, v1)
		for i := 0; i < v1; i++ {
			this.Entries[i] = NewPopulatedEntryCreditBlockEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntryCredit(r, 3)
	}
	return this
}

func NewPopulatedEntryCreditBlockHeader(r randyEntryCredit, easy bool) *EntryCreditBlockHeader {
	this := &EntryCreditBlockHeader{}
	if r.Intn(10) != 0 {
		this.BodyHash = NewPopulatedHash(r, easy)
	}
	if r.Intn(10) != 0 {
		this.PreviousHeaderHash = NewPopulatedHash(r, easy)
	}
	if r.Intn(10) != 0 {
		this.PreviousFullHash = NewPopulatedHash(r, easy)
	}
	this.BlockHeight = uint32(r.Uint32())
	v2 := r.Intn(100)
	this.HeaderExpansionArea = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.HeaderExpansionArea[i] = byte(r.Intn(256))
	}
	this.ObjectCount = uint64(uint64(r.Uint32()))
	this.BodySize = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntryCredit(r, 8)
	}
	return this
}

func NewPopulatedEntryCreditBlockEntry(r randyEntryCredit, easy bool) *EntryCreditBlockEntry {
	this := &EntryCreditBlockEntry{}
	oneofNumber_Value := []int32{1, 2, 3, 4, 5}[r.Intn(5)]
	switch oneofNumber_Value {
	case 1:
		this.Value = NewPopulatedEntryCreditBlockEntry_CommitChain(r, easy)
	case 2:
		this.Value = NewPopulatedEntryCreditBlockEntry_CommitEntry(r, easy)
	case 3:
		this.Value = NewPopulatedEntryCreditBlockEntry_IncreaseBalance(r, easy)
	case 4:
		this.Value = NewPopulatedEntryCreditBlockEntry_MinuteNumber(r, easy)
	case 5:
		this.Value = NewPopulatedEntryCreditBlockEntry_ServerIndexNumber(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntryCredit(r, 6)
	}
	return this
}

func NewPopulatedEntryCreditBlockEntry_CommitChain(r randyEntryCredit, easy bool) *EntryCreditBlockEntry_CommitChain {
	this := &EntryCreditBlockEntry_CommitChain{}
	this.CommitChain = NewPopulatedEntryCreditChainRegistration(r, easy)
	return this
}
func NewPopulatedEntryCreditBlockEntry_CommitEntry(r randyEntryCredit, easy bool) *EntryCreditBlockEntry_CommitEntry {
	this := &EntryCreditBlockEntry_CommitEntry{}
	this.CommitEntry = NewPopulatedEntryCreditEntryRegistration(r, easy)
	return this
}
func NewPopulatedEntryCreditBlockEntry_IncreaseBalance(r randyEntryCredit, easy bool) *EntryCreditBlockEntry_IncreaseBalance {
	this := &EntryCreditBlockEntry_IncreaseBalance{}
	this.IncreaseBalance = NewPopulatedIncreaseBalance(r, easy)
	return this
}
func NewPopulatedEntryCreditBlockEntry_MinuteNumber(r randyEntryCredit, easy bool) *EntryCreditBlockEntry_MinuteNumber {
	this := &EntryCreditBlockEntry_MinuteNumber{}
	this.MinuteNumber = NewPopulatedMinuteNumber(r, easy)
	return this
}
func NewPopulatedEntryCreditBlockEntry_ServerIndexNumber(r randyEntryCredit, easy bool) *EntryCreditBlockEntry_ServerIndexNumber {
	this := &EntryCreditBlockEntry_ServerIndexNumber{}
	this.ServerIndexNumber = NewPopulatedServerIndexNumber(r, easy)
	return this
}
func NewPopulatedEntryCreditChainRegistration(r randyEntryCredit, easy bool) *EntryCreditChainRegistration {
	this := &EntryCreditChainRegistration{}
	this.EntityState = EntityState([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if r.Intn(10) != 0 {
		this.ChainIDHash = NewPopulatedHash(r, easy)
	}
	if r.Intn(10) != 0 {
		this.EntryHash = NewPopulatedHash(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Weld = NewPopulatedHash(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Timestamp = types.NewPopulatedTimestamp(r, easy)
	}
	this.Credits = uint32(r.Uint32())
	v3 := r.Intn(100)
	this.EcPubKey = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.EcPubKey[i] = byte(r.Intn(256))
	}
	v4 := r.Intn(100)
	this.Sig = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.Sig[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntryCredit(r, 9)
	}
	return this
}

func NewPopulatedEntryCreditEntryRegistration(r randyEntryCredit, easy bool) *EntryCreditEntryRegistration {
	this := &EntryCreditEntryRegistration{}
	this.EntityState = EntityState([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if r.Intn(10) != 0 {
		this.EntryHash = NewPopulatedHash(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Timestamp = types.NewPopulatedTimestamp(r, easy)
	}
	this.Credits = uint32(r.Uint32())
	v5 := r.Intn(100)
	this.EcPubKey = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.EcPubKey[i] = byte(r.Intn(256))
	}
	v6 := r.Intn(100)
	this.Sig = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Sig[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntryCredit(r, 7)
	}
	return this
}

func NewPopulatedIncreaseBalance(r randyEntryCredit, easy bool) *IncreaseBalance {
	this := &IncreaseBalance{}
	v7 := r.Intn(100)
	this.EcPubKey = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.EcPubKey[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.TxID = NewPopulatedHash(r, easy)
	}
	this.Index = uint64(uint64(r.Uint32()))
	this.EcAmount = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntryCredit(r, 5)
	}
	return this
}

func NewPopulatedMinuteNumber(r randyEntryCredit, easy bool) *MinuteNumber {
	this := &MinuteNumber{}
	this.MinuteNumber = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntryCredit(r, 2)
	}
	return this
}

func NewPopulatedServerIndexNumber(r randyEntryCredit, easy bool) *ServerIndexNumber {
	this := &ServerIndexNumber{}
	this.ServerIndexNumber = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntryCredit(r, 2)
	}
	return this
}

type randyEntryCredit interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEntryCredit(r randyEntryCredit) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEntryCredit(r randyEntryCredit) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneEntryCredit(r)
	}
	return string(tmps)
}
func randUnrecognizedEntryCredit(r randyEntryCredit, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldEntryCredit(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldEntryCredit(dAtA []byte, r randyEntryCredit, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateEntryCredit(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateEntryCredit(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateEntryCredit(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateEntryCredit(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateEntryCredit(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateEntryCredit(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateEntryCredit(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *EntryCreditBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovEntryCredit(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryCreditBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BodyHash != nil {
		l = m.BodyHash.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.PreviousHeaderHash != nil {
		l = m.PreviousHeaderHash.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.PreviousFullHash != nil {
		l = m.PreviousFullHash.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEntryCredit(uint64(m.BlockHeight))
	}
	l = len(m.HeaderExpansionArea)
	if l > 0 {
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.ObjectCount != 0 {
		n += 1 + sovEntryCredit(uint64(m.ObjectCount))
	}
	if m.BodySize != 0 {
		n += 1 + sovEntryCredit(uint64(m.BodySize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryCreditBlockEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryCreditBlockEntry_CommitChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitChain != nil {
		l = m.CommitChain.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	return n
}
func (m *EntryCreditBlockEntry_CommitEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitEntry != nil {
		l = m.CommitEntry.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	return n
}
func (m *EntryCreditBlockEntry_IncreaseBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncreaseBalance != nil {
		l = m.IncreaseBalance.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	return n
}
func (m *EntryCreditBlockEntry_MinuteNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinuteNumber != nil {
		l = m.MinuteNumber.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	return n
}
func (m *EntryCreditBlockEntry_ServerIndexNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerIndexNumber != nil {
		l = m.ServerIndexNumber.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	return n
}
func (m *EntryCreditChainRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntityState != 0 {
		n += 1 + sovEntryCredit(uint64(m.EntityState))
	}
	if m.ChainIDHash != nil {
		l = m.ChainIDHash.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.EntryHash != nil {
		l = m.EntryHash.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.Weld != nil {
		l = m.Weld.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.Credits != 0 {
		n += 1 + sovEntryCredit(uint64(m.Credits))
	}
	l = len(m.EcPubKey)
	if l > 0 {
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryCreditEntryRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntityState != 0 {
		n += 1 + sovEntryCredit(uint64(m.EntityState))
	}
	if m.EntryHash != nil {
		l = m.EntryHash.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.Credits != 0 {
		n += 1 + sovEntryCredit(uint64(m.Credits))
	}
	l = len(m.EcPubKey)
	if l > 0 {
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncreaseBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EcPubKey)
	if l > 0 {
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.TxID != nil {
		l = m.TxID.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovEntryCredit(uint64(m.Index))
	}
	if m.EcAmount != 0 {
		n += 1 + sovEntryCredit(uint64(m.EcAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MinuteNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinuteNumber != 0 {
		n += 1 + sovEntryCredit(uint64(m.MinuteNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerIndexNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerIndexNumber != 0 {
		n += 1 + sovEntryCredit(uint64(m.ServerIndexNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEntryCredit(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEntryCredit(x uint64) (n int) {
	return sovEntryCredit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EntryCreditBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryCreditBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryCreditBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &EntryCreditBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &EntryCreditBlockEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryCreditBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryCreditBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryCreditBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BodyHash == nil {
				m.BodyHash = &Hash{}
			}
			if err := m.BodyHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousHeaderHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousHeaderHash == nil {
				m.PreviousHeaderHash = &Hash{}
			}
			if err := m.PreviousHeaderHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousFullHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousFullHash == nil {
				m.PreviousFullHash = &Hash{}
			}
			if err := m.PreviousFullHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderExpansionArea", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderExpansionArea = append(m.HeaderExpansionArea[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderExpansionArea == nil {
				m.HeaderExpansionArea = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectCount", wireType)
			}
			m.ObjectCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodySize", wireType)
			}
			m.BodySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BodySize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryCreditBlockEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryCreditBlockEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryCreditBlockEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EntryCreditChainRegistration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &EntryCreditBlockEntry_CommitChain{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EntryCreditEntryRegistration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &EntryCreditBlockEntry_CommitEntry{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncreaseBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IncreaseBalance{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &EntryCreditBlockEntry_IncreaseBalance{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteNumber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MinuteNumber{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &EntryCreditBlockEntry_MinuteNumber{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIndexNumber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServerIndexNumber{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &EntryCreditBlockEntry_ServerIndexNumber{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryCreditChainRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryCreditChainRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryCreditChainRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityState", wireType)
			}
			m.EntityState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntityState |= EntityState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIDHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainIDHash == nil {
				m.ChainIDHash = &Hash{}
			}
			if err := m.ChainIDHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryHash == nil {
				m.EntryHash = &Hash{}
			}
			if err := m.EntryHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weld", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Weld == nil {
				m.Weld = &Hash{}
			}
			if err := m.Weld.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			m.Credits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Credits |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcPubKey = append(m.EcPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EcPubKey == nil {
				m.EcPubKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryCreditEntryRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryCreditEntryRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryCreditEntryRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityState", wireType)
			}
			m.EntityState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntityState |= EntityState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryHash == nil {
				m.EntryHash = &Hash{}
			}
			if err := m.EntryHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			m.Credits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Credits |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcPubKey = append(m.EcPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EcPubKey == nil {
				m.EcPubKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncreaseBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncreaseBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncreaseBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcPubKey = append(m.EcPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EcPubKey == nil {
				m.EcPubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxID == nil {
				m.TxID = &Hash{}
			}
			if err := m.TxID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcAmount", wireType)
			}
			m.EcAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EcAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MinuteNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinuteNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinuteNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteNumber", wireType)
			}
			m.MinuteNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinuteNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerIndexNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerIndexNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerIndexNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIndexNumber", wireType)
			}
			m.ServerIndexNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerIndexNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntryCredit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntryCredit
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEntryCredit
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEntryCredit
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEntryCredit(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEntryCredit
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEntryCredit = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntryCredit   = fmt.Errorf("proto: integer overflow")
)
