{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "The live feed API is a service for receiving events from the factom blockchain. The API is connected to a factomd node. The received events will be emitted to the subscriptions in the API. Users can subscribe a callback url where able to receive different types of events.",
        "title": "Live Feed API",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "http://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8700",
    "basePath": "/live/feed/v1.0",
    "paths": {
        "/subscriptions": {
            "post": {
                "description": "Subscribe an application to receive events.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "subscribe an application",
                "parameters": [
                    {
                        "description": "subscription to be created",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Subscription"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "subscription created",
                        "schema": {
                            "$ref": "#/definitions/models.Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{id}": {
            "get": {
                "description": "Return a subscription with the given id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "get a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "subscription id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "subscription",
                        "schema": {
                            "$ref": "#/definitions/models.Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a subscription for receiving events. Updating the subscription can be used to change the endpoint url, adjust the filtering, add of remove the subscription for event types. When the subscription failed to deliver and got SUSPENDED, the endpoint can used to re-ACTIVATE the subscription.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "update a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "subscription id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "subscription to be updated",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/models.Subscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "subscription updated",
                        "schema": {
                            "$ref": "#/definitions/models.Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Unsubscribe an application from receiving events.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "delete a subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "subscription id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "subscription deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.APIError": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code.",
                    "type": "integer"
                },
                "details": {
                    "description": "Error details.",
                    "type": "string"
                },
                "message": {
                    "description": "Error message.",
                    "type": "string"
                }
            }
        },
        "models.Credentials": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "Access token for setting the bearer token when authenticating on at the callback url. This is required when the callback type is set on BEARER_TOKEN.",
                    "type": "string"
                },
                "basicAuthPassword": {
                    "description": "Password for authenticating with basic authentication. This is required when the callback type is set on BASIC_AUTH.",
                    "type": "string"
                },
                "basicAuthUsername": {
                    "description": "Username for authenticating with basic authentication. This is required when the callback type is set on BASIC_AUTH.",
                    "type": "string"
                }
            }
        },
        "models.Subscription": {
            "type": "object",
            "required": [
                "callbackType",
                "callbackUrl"
            ],
            "properties": {
                "callbackType": {
                    "description": "Type of callback.\n- HTTP to deliver the events to a http/https endpoint.\n- BEARER_TOKEN to deliver the events to a http/https endpoint with a bearer token for authentication.\n- BASIC_AUTH to deliver the events to a http/https endpoint with a basic authentication.",
                    "type": "string",
                    "enum": [
                        "HTTP",
                        "BEARER_TOKEN",
                        "BASIC_AUTH"
                    ],
                    "example": "HTTP"
                },
                "callbackUrl": {
                    "description": "The callback endpoint to receive the events.",
                    "type": "string",
                    "example": "https://server.com/events"
                },
                "credentials": {
                    "description": "Credentials of the callback endpoint where events are delivered.",
                    "type": "object",
                    "$ref": "#/definitions/models.Credentials"
                },
                "filters": {
                    "description": "The emitted event can be filter to receive not all data from an event type. Subscribe on one or more event types. For every event type a filtering can be defined.",
                    "type": "object"
                },
                "id": {
                    "description": "The id of the subscription.",
                    "type": "string",
                    "readOnly": true
                },
                "info": {
                    "description": "Information of the subscription. An information message can be for example about why the subscription is suspended.",
                    "type": "string",
                    "readOnly": true
                },
                "status": {
                    "description": "Status of subscription. Normally a subscription is active. When events fail to be delivered the subscription will be suspended. The subscription can become active again by updating the subscription. When the subscription is suspended, the error information is set in the info field.",
                    "type": "string",
                    "enum": [
                        "ACTIVE",
                        "SUSPENDED"
                    ],
                    "readOnly": true,
                    "example": "ACTIVE"
                }
            }
        }
    }
}