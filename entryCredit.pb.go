// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entryCredit.proto

package eventmessages

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EntryCreditBlock struct {
	Header               *EntryCreditBlockHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Entries              []*EntryCreditBlockEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *EntryCreditBlock) Reset()         { *m = EntryCreditBlock{} }
func (m *EntryCreditBlock) String() string { return proto.CompactTextString(m) }
func (*EntryCreditBlock) ProtoMessage()    {}
func (*EntryCreditBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b53bf99879f3e2c, []int{0}
}
func (m *EntryCreditBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryCreditBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryCreditBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryCreditBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryCreditBlock.Merge(m, src)
}
func (m *EntryCreditBlock) XXX_Size() int {
	return m.Size()
}
func (m *EntryCreditBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryCreditBlock.DiscardUnknown(m)
}

var xxx_messageInfo_EntryCreditBlock proto.InternalMessageInfo

func (m *EntryCreditBlock) GetHeader() *EntryCreditBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EntryCreditBlock) GetEntries() []*EntryCreditBlockEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type EntryCreditBlockHeader struct {
	BodyHash             *Hash    `protobuf:"bytes,1,opt,name=bodyHash,proto3" json:"bodyHash,omitempty"`
	PreviousHeaderHash   *Hash    `protobuf:"bytes,2,opt,name=previousHeaderHash,proto3" json:"previousHeaderHash,omitempty"`
	PreviousFullHash     *Hash    `protobuf:"bytes,3,opt,name=previousFullHash,proto3" json:"previousFullHash,omitempty"`
	BlockHeight          uint32   `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	HeaderExpansionArea  []byte   `protobuf:"bytes,5,opt,name=HeaderExpansionArea,proto3" json:"HeaderExpansionArea,omitempty"`
	ObjectCount          uint64   `protobuf:"varint,6,opt,name=objectCount,proto3" json:"objectCount,omitempty"`
	BodySize             uint64   `protobuf:"varint,7,opt,name=bodySize,proto3" json:"bodySize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntryCreditBlockHeader) Reset()         { *m = EntryCreditBlockHeader{} }
func (m *EntryCreditBlockHeader) String() string { return proto.CompactTextString(m) }
func (*EntryCreditBlockHeader) ProtoMessage()    {}
func (*EntryCreditBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b53bf99879f3e2c, []int{1}
}
func (m *EntryCreditBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryCreditBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryCreditBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryCreditBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryCreditBlockHeader.Merge(m, src)
}
func (m *EntryCreditBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *EntryCreditBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryCreditBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_EntryCreditBlockHeader proto.InternalMessageInfo

func (m *EntryCreditBlockHeader) GetBodyHash() *Hash {
	if m != nil {
		return m.BodyHash
	}
	return nil
}

func (m *EntryCreditBlockHeader) GetPreviousHeaderHash() *Hash {
	if m != nil {
		return m.PreviousHeaderHash
	}
	return nil
}

func (m *EntryCreditBlockHeader) GetPreviousFullHash() *Hash {
	if m != nil {
		return m.PreviousFullHash
	}
	return nil
}

func (m *EntryCreditBlockHeader) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EntryCreditBlockHeader) GetHeaderExpansionArea() []byte {
	if m != nil {
		return m.HeaderExpansionArea
	}
	return nil
}

func (m *EntryCreditBlockHeader) GetObjectCount() uint64 {
	if m != nil {
		return m.ObjectCount
	}
	return 0
}

func (m *EntryCreditBlockHeader) GetBodySize() uint64 {
	if m != nil {
		return m.BodySize
	}
	return 0
}

type EntryCreditBlockEntry struct {
	// Types that are valid to be assigned to Value:
	//	*EntryCreditBlockEntry_CommitChain
	//	*EntryCreditBlockEntry_CommitEntry
	//	*EntryCreditBlockEntry_IncreaseBalance
	//	*EntryCreditBlockEntry_MinuteNumber
	//	*EntryCreditBlockEntry_ServerIndexNumber
	Value                isEntryCreditBlockEntry_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *EntryCreditBlockEntry) Reset()         { *m = EntryCreditBlockEntry{} }
func (m *EntryCreditBlockEntry) String() string { return proto.CompactTextString(m) }
func (*EntryCreditBlockEntry) ProtoMessage()    {}
func (*EntryCreditBlockEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b53bf99879f3e2c, []int{2}
}
func (m *EntryCreditBlockEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryCreditBlockEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryCreditBlockEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryCreditBlockEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryCreditBlockEntry.Merge(m, src)
}
func (m *EntryCreditBlockEntry) XXX_Size() int {
	return m.Size()
}
func (m *EntryCreditBlockEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryCreditBlockEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EntryCreditBlockEntry proto.InternalMessageInfo

type isEntryCreditBlockEntry_Value interface {
	isEntryCreditBlockEntry_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EntryCreditBlockEntry_CommitChain struct {
	CommitChain *CommitChain `protobuf:"bytes,1,opt,name=commitChain,proto3,oneof"`
}
type EntryCreditBlockEntry_CommitEntry struct {
	CommitEntry *CommitEntry `protobuf:"bytes,2,opt,name=commitEntry,proto3,oneof"`
}
type EntryCreditBlockEntry_IncreaseBalance struct {
	IncreaseBalance *IncreaseBalance `protobuf:"bytes,3,opt,name=increaseBalance,proto3,oneof"`
}
type EntryCreditBlockEntry_MinuteNumber struct {
	MinuteNumber uint32 `protobuf:"varint,4,opt,name=minuteNumber,proto3,oneof"`
}
type EntryCreditBlockEntry_ServerIndexNumber struct {
	ServerIndexNumber uint32 `protobuf:"varint,5,opt,name=serverIndexNumber,proto3,oneof"`
}

func (*EntryCreditBlockEntry_CommitChain) isEntryCreditBlockEntry_Value()       {}
func (*EntryCreditBlockEntry_CommitEntry) isEntryCreditBlockEntry_Value()       {}
func (*EntryCreditBlockEntry_IncreaseBalance) isEntryCreditBlockEntry_Value()   {}
func (*EntryCreditBlockEntry_MinuteNumber) isEntryCreditBlockEntry_Value()      {}
func (*EntryCreditBlockEntry_ServerIndexNumber) isEntryCreditBlockEntry_Value() {}

func (m *EntryCreditBlockEntry) GetValue() isEntryCreditBlockEntry_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *EntryCreditBlockEntry) GetCommitChain() *CommitChain {
	if x, ok := m.GetValue().(*EntryCreditBlockEntry_CommitChain); ok {
		return x.CommitChain
	}
	return nil
}

func (m *EntryCreditBlockEntry) GetCommitEntry() *CommitEntry {
	if x, ok := m.GetValue().(*EntryCreditBlockEntry_CommitEntry); ok {
		return x.CommitEntry
	}
	return nil
}

func (m *EntryCreditBlockEntry) GetIncreaseBalance() *IncreaseBalance {
	if x, ok := m.GetValue().(*EntryCreditBlockEntry_IncreaseBalance); ok {
		return x.IncreaseBalance
	}
	return nil
}

func (m *EntryCreditBlockEntry) GetMinuteNumber() uint32 {
	if x, ok := m.GetValue().(*EntryCreditBlockEntry_MinuteNumber); ok {
		return x.MinuteNumber
	}
	return 0
}

func (m *EntryCreditBlockEntry) GetServerIndexNumber() uint32 {
	if x, ok := m.GetValue().(*EntryCreditBlockEntry_ServerIndexNumber); ok {
		return x.ServerIndexNumber
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EntryCreditBlockEntry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EntryCreditBlockEntry_OneofMarshaler, _EntryCreditBlockEntry_OneofUnmarshaler, _EntryCreditBlockEntry_OneofSizer, []interface{}{
		(*EntryCreditBlockEntry_CommitChain)(nil),
		(*EntryCreditBlockEntry_CommitEntry)(nil),
		(*EntryCreditBlockEntry_IncreaseBalance)(nil),
		(*EntryCreditBlockEntry_MinuteNumber)(nil),
		(*EntryCreditBlockEntry_ServerIndexNumber)(nil),
	}
}

func _EntryCreditBlockEntry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EntryCreditBlockEntry)
	// value
	switch x := m.Value.(type) {
	case *EntryCreditBlockEntry_CommitChain:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommitChain); err != nil {
			return err
		}
	case *EntryCreditBlockEntry_CommitEntry:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommitEntry); err != nil {
			return err
		}
	case *EntryCreditBlockEntry_IncreaseBalance:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IncreaseBalance); err != nil {
			return err
		}
	case *EntryCreditBlockEntry_MinuteNumber:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.MinuteNumber))
	case *EntryCreditBlockEntry_ServerIndexNumber:
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ServerIndexNumber))
	case nil:
	default:
		return fmt.Errorf("EntryCreditBlockEntry.Value has unexpected type %T", x)
	}
	return nil
}

func _EntryCreditBlockEntry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EntryCreditBlockEntry)
	switch tag {
	case 1: // value.commitChain
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommitChain)
		err := b.DecodeMessage(msg)
		m.Value = &EntryCreditBlockEntry_CommitChain{msg}
		return true, err
	case 2: // value.commitEntry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommitEntry)
		err := b.DecodeMessage(msg)
		m.Value = &EntryCreditBlockEntry_CommitEntry{msg}
		return true, err
	case 3: // value.increaseBalance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IncreaseBalance)
		err := b.DecodeMessage(msg)
		m.Value = &EntryCreditBlockEntry_IncreaseBalance{msg}
		return true, err
	case 4: // value.minuteNumber
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &EntryCreditBlockEntry_MinuteNumber{uint32(x)}
		return true, err
	case 5: // value.serverIndexNumber
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &EntryCreditBlockEntry_ServerIndexNumber{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _EntryCreditBlockEntry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EntryCreditBlockEntry)
	// value
	switch x := m.Value.(type) {
	case *EntryCreditBlockEntry_CommitChain:
		s := proto.Size(x.CommitChain)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EntryCreditBlockEntry_CommitEntry:
		s := proto.Size(x.CommitEntry)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EntryCreditBlockEntry_IncreaseBalance:
		s := proto.Size(x.IncreaseBalance)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EntryCreditBlockEntry_MinuteNumber:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.MinuteNumber))
	case *EntryCreditBlockEntry_ServerIndexNumber:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.ServerIndexNumber))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CommitChain struct {
	ChainIDHash          *Hash            `protobuf:"bytes,1,opt,name=chainIDHash,proto3" json:"chainIDHash,omitempty"`
	EntryHash            *Hash            `protobuf:"bytes,2,opt,name=entryHash,proto3" json:"entryHash,omitempty"`
	Weld                 *Hash            `protobuf:"bytes,3,opt,name=weld,proto3" json:"weld,omitempty"`
	Timestamp            *types.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Credits              uint32           `protobuf:"varint,5,opt,name=credits,proto3" json:"credits,omitempty"`
	EcPubKey             []byte           `protobuf:"bytes,6,opt,name=ecPubKey,proto3" json:"ecPubKey,omitempty"`
	Sig                  []byte           `protobuf:"bytes,7,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CommitChain) Reset()         { *m = CommitChain{} }
func (m *CommitChain) String() string { return proto.CompactTextString(m) }
func (*CommitChain) ProtoMessage()    {}
func (*CommitChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b53bf99879f3e2c, []int{3}
}
func (m *CommitChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitChain.Merge(m, src)
}
func (m *CommitChain) XXX_Size() int {
	return m.Size()
}
func (m *CommitChain) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitChain.DiscardUnknown(m)
}

var xxx_messageInfo_CommitChain proto.InternalMessageInfo

func (m *CommitChain) GetChainIDHash() *Hash {
	if m != nil {
		return m.ChainIDHash
	}
	return nil
}

func (m *CommitChain) GetEntryHash() *Hash {
	if m != nil {
		return m.EntryHash
	}
	return nil
}

func (m *CommitChain) GetWeld() *Hash {
	if m != nil {
		return m.Weld
	}
	return nil
}

func (m *CommitChain) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *CommitChain) GetCredits() uint32 {
	if m != nil {
		return m.Credits
	}
	return 0
}

func (m *CommitChain) GetEcPubKey() []byte {
	if m != nil {
		return m.EcPubKey
	}
	return nil
}

func (m *CommitChain) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type CommitEntry struct {
	EntryHash            *Hash            `protobuf:"bytes,1,opt,name=entryHash,proto3" json:"entryHash,omitempty"`
	Timestamp            *types.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Credits              uint32           `protobuf:"varint,3,opt,name=credits,proto3" json:"credits,omitempty"`
	EcPubKey             []byte           `protobuf:"bytes,4,opt,name=ecPubKey,proto3" json:"ecPubKey,omitempty"`
	Sig                  []byte           `protobuf:"bytes,5,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CommitEntry) Reset()         { *m = CommitEntry{} }
func (m *CommitEntry) String() string { return proto.CompactTextString(m) }
func (*CommitEntry) ProtoMessage()    {}
func (*CommitEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b53bf99879f3e2c, []int{4}
}
func (m *CommitEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitEntry.Merge(m, src)
}
func (m *CommitEntry) XXX_Size() int {
	return m.Size()
}
func (m *CommitEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CommitEntry proto.InternalMessageInfo

func (m *CommitEntry) GetEntryHash() *Hash {
	if m != nil {
		return m.EntryHash
	}
	return nil
}

func (m *CommitEntry) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *CommitEntry) GetCredits() uint32 {
	if m != nil {
		return m.Credits
	}
	return 0
}

func (m *CommitEntry) GetEcPubKey() []byte {
	if m != nil {
		return m.EcPubKey
	}
	return nil
}

func (m *CommitEntry) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type IncreaseBalance struct {
	EcPubKey             []byte   `protobuf:"bytes,1,opt,name=ecPubKey,proto3" json:"ecPubKey,omitempty"`
	TxID                 *Hash    `protobuf:"bytes,2,opt,name=txID,proto3" json:"txID,omitempty"`
	Index                uint64   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	EcAmount             uint64   `protobuf:"varint,4,opt,name=ecAmount,proto3" json:"ecAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncreaseBalance) Reset()         { *m = IncreaseBalance{} }
func (m *IncreaseBalance) String() string { return proto.CompactTextString(m) }
func (*IncreaseBalance) ProtoMessage()    {}
func (*IncreaseBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b53bf99879f3e2c, []int{5}
}
func (m *IncreaseBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncreaseBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncreaseBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncreaseBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncreaseBalance.Merge(m, src)
}
func (m *IncreaseBalance) XXX_Size() int {
	return m.Size()
}
func (m *IncreaseBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_IncreaseBalance.DiscardUnknown(m)
}

var xxx_messageInfo_IncreaseBalance proto.InternalMessageInfo

func (m *IncreaseBalance) GetEcPubKey() []byte {
	if m != nil {
		return m.EcPubKey
	}
	return nil
}

func (m *IncreaseBalance) GetTxID() *Hash {
	if m != nil {
		return m.TxID
	}
	return nil
}

func (m *IncreaseBalance) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *IncreaseBalance) GetEcAmount() uint64 {
	if m != nil {
		return m.EcAmount
	}
	return 0
}

func init() {
	proto.RegisterType((*EntryCreditBlock)(nil), "eventmessages.EntryCreditBlock")
	proto.RegisterType((*EntryCreditBlockHeader)(nil), "eventmessages.EntryCreditBlockHeader")
	proto.RegisterType((*EntryCreditBlockEntry)(nil), "eventmessages.EntryCreditBlockEntry")
	proto.RegisterType((*CommitChain)(nil), "eventmessages.CommitChain")
	proto.RegisterType((*CommitEntry)(nil), "eventmessages.CommitEntry")
	proto.RegisterType((*IncreaseBalance)(nil), "eventmessages.IncreaseBalance")
}

func init() { proto.RegisterFile("entryCredit.proto", fileDescriptor_5b53bf99879f3e2c) }

var fileDescriptor_5b53bf99879f3e2c = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0x8e, 0x13, 0xa7, 0xb9, 0x3d, 0x49, 0xd5, 0x76, 0x7a, 0xef, 0x95, 0x95, 0x45, 0xae, 0x15,
	0xf5, 0xaa, 0x59, 0xb9, 0x50, 0x84, 0xc4, 0x86, 0xa2, 0x26, 0x2d, 0x4a, 0x40, 0x42, 0x68, 0xe8,
	0x0b, 0xd8, 0xce, 0x69, 0x32, 0xe0, 0x9f, 0xc8, 0x33, 0x0e, 0x0d, 0x4f, 0xc0, 0x96, 0x1d, 0x6b,
	0x1e, 0xa5, 0x2b, 0x96, 0x3c, 0x02, 0x94, 0x17, 0x41, 0x9e, 0xb1, 0xe3, 0xd8, 0x4d, 0x5b, 0xc4,
	0x2a, 0x39, 0x33, 0xdf, 0xf7, 0x9d, 0xf9, 0xce, 0x7c, 0x63, 0xd8, 0xc5, 0x40, 0x44, 0x8b, 0x41,
	0x84, 0x63, 0x26, 0xac, 0x59, 0x14, 0x8a, 0x90, 0x6c, 0xe1, 0x1c, 0x03, 0xe1, 0x23, 0xe7, 0xf6,
	0x04, 0x79, 0x9b, 0x4c, 0x30, 0xc0, 0xc8, 0xf6, 0xce, 0x17, 0x33, 0xe4, 0x0a, 0xd2, 0xfe, 0x6f,
	0x12, 0x86, 0x13, 0x0f, 0x0f, 0x65, 0xe5, 0xc4, 0x17, 0x87, 0x82, 0xf9, 0xc8, 0x85, 0xed, 0xcf,
	0x14, 0xa0, 0xfb, 0x49, 0x83, 0x9d, 0xb3, 0x5c, 0xb9, 0xef, 0x85, 0xee, 0x3b, 0xf2, 0x14, 0x36,
	0xa6, 0x68, 0x8f, 0x31, 0x32, 0x34, 0x53, 0xeb, 0x35, 0x8f, 0xfe, 0xb7, 0x0a, 0x9d, 0xac, 0x32,
	0x61, 0x28, 0xc1, 0x34, 0x25, 0x91, 0x63, 0x68, 0x24, 0x87, 0x65, 0xc8, 0x8d, 0xaa, 0x59, 0xeb,
	0x35, 0x8f, 0xf6, 0xef, 0xe1, 0xcb, 0x9a, 0x66, 0xa4, 0xee, 0x8f, 0x2a, 0xfc, 0xbb, 0xbe, 0x05,
	0x39, 0x84, 0xbf, 0x9c, 0x70, 0xbc, 0x18, 0xda, 0x7c, 0x9a, 0x9e, 0x6d, 0xaf, 0xa4, 0x9d, 0x6c,
	0xd1, 0x25, 0x88, 0x0c, 0x80, 0xcc, 0x22, 0x9c, 0xb3, 0x30, 0xe6, 0x4a, 0x42, 0x52, 0xab, 0xb7,
	0x53, 0xd7, 0xc0, 0xc9, 0x33, 0xd8, 0xc9, 0x56, 0x9f, 0xc7, 0x9e, 0x27, 0x25, 0x6a, 0xb7, 0x4b,
	0xdc, 0x00, 0x13, 0x13, 0x9a, 0x8e, 0x72, 0xc1, 0x26, 0x53, 0x61, 0xe8, 0xa6, 0xd6, 0xdb, 0xa2,
	0xab, 0x4b, 0xe4, 0x01, 0xec, 0xa9, 0x86, 0x67, 0x97, 0x33, 0x3b, 0xe0, 0x2c, 0x0c, 0x4e, 0x22,
	0xb4, 0x8d, 0xba, 0xa9, 0xf5, 0x5a, 0x74, 0xdd, 0x56, 0xa2, 0x19, 0x3a, 0x6f, 0xd1, 0x15, 0x83,
	0x30, 0x0e, 0x84, 0xb1, 0x61, 0x6a, 0x3d, 0x9d, 0xae, 0x2e, 0x91, 0xb6, 0x1a, 0xd6, 0x1b, 0xf6,
	0x01, 0x8d, 0x86, 0xdc, 0x5e, 0xd6, 0xdd, 0xab, 0x2a, 0xfc, 0xb3, 0xf6, 0x1a, 0xc8, 0x31, 0x34,
	0xdd, 0xd0, 0xf7, 0x99, 0x18, 0x4c, 0x6d, 0x16, 0xa4, 0x53, 0x6e, 0x97, 0x7c, 0x0e, 0x72, 0xc4,
	0xb0, 0x42, 0x57, 0x09, 0x39, 0x5f, 0xca, 0xa5, 0xa3, 0x5e, 0xcf, 0x97, 0x88, 0x9c, 0xaf, 0xfa,
	0xbf, 0x80, 0x6d, 0x16, 0xb8, 0x11, 0xda, 0x1c, 0xfb, 0xb6, 0x67, 0x07, 0x2e, 0xa6, 0xb3, 0xee,
	0x94, 0x34, 0x46, 0x45, 0xd4, 0xb0, 0x42, 0xcb, 0x44, 0xb2, 0x0f, 0x2d, 0x9f, 0x05, 0xb1, 0xc0,
	0x57, 0xb1, 0xef, 0x60, 0xa4, 0x06, 0x3f, 0xac, 0xd0, 0xc2, 0x2a, 0xb1, 0x60, 0x97, 0x63, 0x34,
	0xc7, 0x68, 0x14, 0x8c, 0xf1, 0x32, 0x85, 0xd6, 0x53, 0xe8, 0xcd, 0xad, 0x7e, 0x03, 0xea, 0x73,
	0xdb, 0x8b, 0xb1, 0xfb, 0xa5, 0x0a, 0xcd, 0x95, 0x49, 0x90, 0xc7, 0xd0, 0x74, 0x93, 0x3f, 0xa3,
	0xd3, 0xfb, 0x02, 0xba, 0x8a, 0x23, 0x0f, 0x61, 0x53, 0x3e, 0xee, 0xfb, 0xa2, 0x99, 0xa3, 0xc8,
	0x01, 0xe8, 0xef, 0xd1, 0x1b, 0xdf, 0x95, 0x42, 0x09, 0x20, 0x4f, 0x60, 0x73, 0xf9, 0xe4, 0xa5,
	0xfd, 0xe4, 0x2e, 0xd4, 0x47, 0xc1, 0xca, 0x3e, 0x0a, 0xd6, 0x79, 0x86, 0xa0, 0x39, 0x98, 0x18,
	0xd0, 0x70, 0x65, 0x36, 0xb8, 0x9a, 0x05, 0xcd, 0xca, 0x24, 0x57, 0xe8, 0xbe, 0x8e, 0x9d, 0x97,
	0xb8, 0x90, 0xb1, 0x6b, 0xd1, 0x65, 0x4d, 0x76, 0xa0, 0xc6, 0xd9, 0x44, 0xc6, 0xad, 0x45, 0x93,
	0xbf, 0xdd, 0x2b, 0x2d, 0x1b, 0x92, 0xba, 0xdf, 0x82, 0x5b, 0xed, 0xb7, 0xdc, 0x16, 0x4c, 0x54,
	0xff, 0xd0, 0x44, 0xed, 0x76, 0x13, 0xfa, 0x7a, 0x13, 0xf5, 0xdc, 0xc4, 0x47, 0x0d, 0xb6, 0x4b,
	0x79, 0x2b, 0x28, 0x68, 0x25, 0x85, 0x03, 0xd0, 0xc5, 0xe5, 0xe8, 0xf4, 0xae, 0xdb, 0x94, 0x00,
	0xf2, 0x37, 0xd4, 0x59, 0x12, 0x2d, 0x79, 0x3c, 0x9d, 0xaa, 0x42, 0x49, 0x9f, 0xf8, 0xf2, 0x61,
	0xeb, 0xea, 0xe5, 0x66, 0x75, 0xff, 0xe8, 0xeb, 0x75, 0x47, 0xfb, 0x76, 0xdd, 0xd1, 0xbe, 0x5f,
	0x77, 0xb4, 0xcf, 0x3f, 0x3b, 0x15, 0x30, 0xdd, 0xd0, 0xb7, 0x2e, 0x6c, 0x57, 0x2c, 0x7f, 0xc6,
	0xc5, 0x86, 0xce, 0x86, 0x9c, 0xd2, 0xa3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xab, 0x0f, 0xcd,
	0x9e, 0x45, 0x06, 0x00, 0x00,
}

func (m *EntryCreditBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryCreditBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Header.Size()))
		n1, err1 := m.Header.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEntryCredit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EntryCreditBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryCreditBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BodyHash != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.BodyHash.Size()))
		n2, err2 := m.BodyHash.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.PreviousHeaderHash != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.PreviousHeaderHash.Size()))
		n3, err3 := m.PreviousHeaderHash.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.PreviousFullHash != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.PreviousFullHash.Size()))
		n4, err4 := m.PreviousFullHash.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if m.BlockHeight != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.BlockHeight))
	}
	if len(m.HeaderExpansionArea) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(len(m.HeaderExpansionArea)))
		i += copy(dAtA[i:], m.HeaderExpansionArea)
	}
	if m.ObjectCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.ObjectCount))
	}
	if m.BodySize != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.BodySize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EntryCreditBlockEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryCreditBlockEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn5, err5 := m.Value.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += nn5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EntryCreditBlockEntry_CommitChain) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CommitChain != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.CommitChain.Size()))
		n6, err6 := m.CommitChain.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	return i, nil
}
func (m *EntryCreditBlockEntry_CommitEntry) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CommitEntry != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.CommitEntry.Size()))
		n7, err7 := m.CommitEntry.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	return i, nil
}
func (m *EntryCreditBlockEntry_IncreaseBalance) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IncreaseBalance != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.IncreaseBalance.Size()))
		n8, err8 := m.IncreaseBalance.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	return i, nil
}
func (m *EntryCreditBlockEntry_MinuteNumber) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	i = encodeVarintEntryCredit(dAtA, i, uint64(m.MinuteNumber))
	return i, nil
}
func (m *EntryCreditBlockEntry_ServerIndexNumber) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x28
	i++
	i = encodeVarintEntryCredit(dAtA, i, uint64(m.ServerIndexNumber))
	return i, nil
}
func (m *CommitChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitChain) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChainIDHash != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.ChainIDHash.Size()))
		n9, err9 := m.ChainIDHash.MarshalTo(dAtA[i:])
		if err9 != nil {
			return 0, err9
		}
		i += n9
	}
	if m.EntryHash != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.EntryHash.Size()))
		n10, err10 := m.EntryHash.MarshalTo(dAtA[i:])
		if err10 != nil {
			return 0, err10
		}
		i += n10
	}
	if m.Weld != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Weld.Size()))
		n11, err11 := m.Weld.MarshalTo(dAtA[i:])
		if err11 != nil {
			return 0, err11
		}
		i += n11
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Timestamp.Size()))
		n12, err12 := m.Timestamp.MarshalTo(dAtA[i:])
		if err12 != nil {
			return 0, err12
		}
		i += n12
	}
	if m.Credits != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Credits))
	}
	if len(m.EcPubKey) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(len(m.EcPubKey)))
		i += copy(dAtA[i:], m.EcPubKey)
	}
	if len(m.Sig) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(len(m.Sig)))
		i += copy(dAtA[i:], m.Sig)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CommitEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EntryHash != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.EntryHash.Size()))
		n13, err13 := m.EntryHash.MarshalTo(dAtA[i:])
		if err13 != nil {
			return 0, err13
		}
		i += n13
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Timestamp.Size()))
		n14, err14 := m.Timestamp.MarshalTo(dAtA[i:])
		if err14 != nil {
			return 0, err14
		}
		i += n14
	}
	if m.Credits != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Credits))
	}
	if len(m.EcPubKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(len(m.EcPubKey)))
		i += copy(dAtA[i:], m.EcPubKey)
	}
	if len(m.Sig) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(len(m.Sig)))
		i += copy(dAtA[i:], m.Sig)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IncreaseBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncreaseBalance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EcPubKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(len(m.EcPubKey)))
		i += copy(dAtA[i:], m.EcPubKey)
	}
	if m.TxID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.TxID.Size()))
		n15, err15 := m.TxID.MarshalTo(dAtA[i:])
		if err15 != nil {
			return 0, err15
		}
		i += n15
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.Index))
	}
	if m.EcAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEntryCredit(dAtA, i, uint64(m.EcAmount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEntryCredit(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EntryCreditBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovEntryCredit(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryCreditBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BodyHash != nil {
		l = m.BodyHash.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.PreviousHeaderHash != nil {
		l = m.PreviousHeaderHash.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.PreviousFullHash != nil {
		l = m.PreviousFullHash.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEntryCredit(uint64(m.BlockHeight))
	}
	l = len(m.HeaderExpansionArea)
	if l > 0 {
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.ObjectCount != 0 {
		n += 1 + sovEntryCredit(uint64(m.ObjectCount))
	}
	if m.BodySize != 0 {
		n += 1 + sovEntryCredit(uint64(m.BodySize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryCreditBlockEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryCreditBlockEntry_CommitChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitChain != nil {
		l = m.CommitChain.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	return n
}
func (m *EntryCreditBlockEntry_CommitEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitEntry != nil {
		l = m.CommitEntry.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	return n
}
func (m *EntryCreditBlockEntry_IncreaseBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncreaseBalance != nil {
		l = m.IncreaseBalance.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	return n
}
func (m *EntryCreditBlockEntry_MinuteNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovEntryCredit(uint64(m.MinuteNumber))
	return n
}
func (m *EntryCreditBlockEntry_ServerIndexNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovEntryCredit(uint64(m.ServerIndexNumber))
	return n
}
func (m *CommitChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainIDHash != nil {
		l = m.ChainIDHash.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.EntryHash != nil {
		l = m.EntryHash.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.Weld != nil {
		l = m.Weld.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.Credits != 0 {
		n += 1 + sovEntryCredit(uint64(m.Credits))
	}
	l = len(m.EcPubKey)
	if l > 0 {
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommitEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntryHash != nil {
		l = m.EntryHash.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.Credits != 0 {
		n += 1 + sovEntryCredit(uint64(m.Credits))
	}
	l = len(m.EcPubKey)
	if l > 0 {
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncreaseBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EcPubKey)
	if l > 0 {
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.TxID != nil {
		l = m.TxID.Size()
		n += 1 + l + sovEntryCredit(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovEntryCredit(uint64(m.Index))
	}
	if m.EcAmount != 0 {
		n += 1 + sovEntryCredit(uint64(m.EcAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEntryCredit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntryCredit(x uint64) (n int) {
	return sovEntryCredit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EntryCreditBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryCreditBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryCreditBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &EntryCreditBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &EntryCreditBlockEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryCreditBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryCreditBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryCreditBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BodyHash == nil {
				m.BodyHash = &Hash{}
			}
			if err := m.BodyHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousHeaderHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousHeaderHash == nil {
				m.PreviousHeaderHash = &Hash{}
			}
			if err := m.PreviousHeaderHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousFullHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousFullHash == nil {
				m.PreviousFullHash = &Hash{}
			}
			if err := m.PreviousFullHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderExpansionArea", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderExpansionArea = append(m.HeaderExpansionArea[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderExpansionArea == nil {
				m.HeaderExpansionArea = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectCount", wireType)
			}
			m.ObjectCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodySize", wireType)
			}
			m.BodySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BodySize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryCreditBlockEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryCreditBlockEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryCreditBlockEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommitChain{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &EntryCreditBlockEntry_CommitChain{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommitEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &EntryCreditBlockEntry_CommitEntry{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncreaseBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IncreaseBalance{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &EntryCreditBlockEntry_IncreaseBalance{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteNumber", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &EntryCreditBlockEntry_MinuteNumber{v}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIndexNumber", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &EntryCreditBlockEntry_ServerIndexNumber{v}
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIDHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainIDHash == nil {
				m.ChainIDHash = &Hash{}
			}
			if err := m.ChainIDHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryHash == nil {
				m.EntryHash = &Hash{}
			}
			if err := m.EntryHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weld", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Weld == nil {
				m.Weld = &Hash{}
			}
			if err := m.Weld.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			m.Credits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Credits |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcPubKey = append(m.EcPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EcPubKey == nil {
				m.EcPubKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryHash == nil {
				m.EntryHash = &Hash{}
			}
			if err := m.EntryHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			m.Credits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Credits |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcPubKey = append(m.EcPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EcPubKey == nil {
				m.EcPubKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncreaseBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncreaseBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncreaseBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcPubKey = append(m.EcPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EcPubKey == nil {
				m.EcPubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryCredit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxID == nil {
				m.TxID = &Hash{}
			}
			if err := m.TxID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcAmount", wireType)
			}
			m.EcAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EcAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntryCredit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryCredit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntryCredit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntryCredit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntryCredit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntryCredit
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEntryCredit
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEntryCredit
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEntryCredit(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEntryCredit
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEntryCredit = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntryCredit   = fmt.Errorf("proto: integer overflow")
)
