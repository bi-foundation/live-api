// Package LiveAPI3 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"io/ioutil"
	"net/http"
	"strings"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	Id   int64   `json:"id"`
	Name string  `json:"name"`
	Tag  *string `json:"tag,omitempty"`
}

// Subscriptions defines model for Subscriptions.
type Subscriptions []Subscription

// ListSubscriptionsParams defines parameters for ListSubscriptions.
type ListSubscriptionsParams struct {
	Limit *int32 `json:"limit,omitempty"`
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// HTTP client with any customized settings, such as certificate chains.
	Client http.Client

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor func(req *http.Request, ctx context.Context) error
}

// The interface specification for the client above.
type ClientInterface interface {

	// ListSubscriptions request
	ListSubscriptions(ctx context.Context, params *ListSubscriptionsParams) (*http.Response, error)

	// CreateSubscriptions request
	CreateSubscriptions(ctx context.Context) (*http.Response, error)

	// GetSubscriptionById request
	GetSubscriptionById(ctx context.Context, subscriptionId string) (*http.Response, error)
}

// ListSubscriptions request
func (c *Client) ListSubscriptions(ctx context.Context, params *ListSubscriptionsParams) (*http.Response, error) {
	req, err := NewListSubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// CreateSubscriptions request
func (c *Client) CreateSubscriptions(ctx context.Context) (*http.Response, error) {
	req, err := NewCreateSubscriptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// GetSubscriptionById request
func (c *Client) GetSubscriptionById(ctx context.Context, subscriptionId string) (*http.Response, error) {
	req, err := NewGetSubscriptionByIdRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// ParselistSubscriptionsResponse parses an HTTP response from a ListSubscriptionsWithResponse call
func ParselistSubscriptionsResponse(rsp *http.Response) (*listSubscriptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &listSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Subscriptions{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}
	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}
	}

	return response, nil
}

// ListSubscriptions request returning *ListSubscriptionsResponse
func (c *ClientWithResponses) ListSubscriptionsWithResponse(ctx context.Context, params *ListSubscriptionsParams) (*listSubscriptionsResponse, error) {
	rsp, err := c.ListSubscriptions(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParselistSubscriptionsResponse(rsp)
}

// ParsecreateSubscriptionsResponse parses an HTTP response from a CreateSubscriptionsWithResponse call
func ParsecreateSubscriptionsResponse(rsp *http.Response) (*createSubscriptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &createSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.StatusCode == 201:
		break // No content-type
	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}
	}

	return response, nil
}

// CreateSubscriptions request returning *CreateSubscriptionsResponse
func (c *ClientWithResponses) CreateSubscriptionsWithResponse(ctx context.Context) (*createSubscriptionsResponse, error) {
	rsp, err := c.CreateSubscriptions(ctx)
	if err != nil {
		return nil, err
	}
	return ParsecreateSubscriptionsResponse(rsp)
}

// ParsegetSubscriptionByIdResponse parses an HTTP response from a GetSubscriptionByIdWithResponse call
func ParsegetSubscriptionByIdResponse(rsp *http.Response) (*getSubscriptionByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getSubscriptionByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Subscriptions{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}
	case strings.Contains(rsp.Header.Get("Content-Type"), "json"):
		response.JSONDefault = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSONDefault); err != nil {
			return nil, err
		}
	}

	return response, nil
}

// GetSubscriptionById request returning *GetSubscriptionByIdResponse
func (c *ClientWithResponses) GetSubscriptionByIdWithResponse(ctx context.Context, subscriptionId string) (*getSubscriptionByIdResponse, error) {
	rsp, err := c.GetSubscriptionById(ctx, subscriptionId)
	if err != nil {
		return nil, err
	}
	return ParsegetSubscriptionByIdResponse(rsp)
}

// NewListSubscriptionsRequest generates requests for ListSubscriptions
func NewListSubscriptionsRequest(server string, params *ListSubscriptionsParams) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/subscriptions", server)

	var queryStrings []string

	var queryParam0 string
	if params.Limit != nil {

		queryParam0, err = runtime.StyleParam("form", true, "limit", *params.Limit)
		if err != nil {
			return nil, err
		}

		queryStrings = append(queryStrings, queryParam0)
	}

	if len(queryStrings) != 0 {
		queryUrl += "?" + strings.Join(queryStrings, "&")
	}

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSubscriptionsRequest generates requests for CreateSubscriptions
func NewCreateSubscriptionsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl := fmt.Sprintf("%s/subscriptions", server)

	req, err := http.NewRequest("POST", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubscriptionByIdRequest generates requests for GetSubscriptionById
func NewGetSubscriptionByIdRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "subscriptionId", subscriptionId)
	if err != nil {
		return nil, err
	}

	queryUrl := fmt.Sprintf("%s/subscriptions/%s", server, pathParam0)

	req, err := http.NewRequest("GET", queryUrl, nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses returns a ClientWithResponses with a default Client:
func NewClientWithResponses(server string) *ClientWithResponses {
	return &ClientWithResponses{
		ClientInterface: &Client{
			Client: http.Client{},
			Server: server,
		},
	}
}

type listSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscriptions
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r listSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r listSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type createSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r createSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r createSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getSubscriptionByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscriptions
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r getSubscriptionByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getSubscriptionByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all subscriptions// (GET /subscriptions)
	ListSubscriptions(ctx echo.Context, params ListSubscriptionsParams) error
	// Create a subscription// (POST /subscriptions)
	CreateSubscriptions(ctx echo.Context) error
	// Info for a specific subscription// (GET /subscriptions/{subscriptionId})
	GetSubscriptionById(ctx echo.Context, subscriptionId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) ListSubscriptions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSubscriptionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSubscriptions(ctx, params)
	return err
}

// CreateSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSubscriptions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSubscriptions(ctx)
	return err
}

// GetSubscriptionById converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscriptionById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameter("simple", false, "subscriptionId", ctx.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriptionId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubscriptionById(ctx, subscriptionId)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/subscriptions", wrapper.ListSubscriptions)
	router.POST("/subscriptions", wrapper.CreateSubscriptions)
	router.GET("/subscriptions/:subscriptionId", wrapper.GetSubscriptionById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVT2/TThD9Kqv5/Q4gmdhpEQffCioiUkFI9Fb1MNhjZ2H/dXccEkX+7mjXSRO7oe0B",
	"iZ68u1nPvPfmPWcLldXOGjIcoNxCqJakMS0vvbc+Lpy3jjxLSseVrSk+G+s1MpQgDZ+fQQa8cTRsqSUP",
	"fQaaQsA23d79GNhL00LfZ+DprpOeaihvhpqH+7d9Bt+676Hy0rG05iEIWU8hvHt7EoJBfap/Bozt07hk",
	"DbsSU0gDCiadFv97aqCE//KDmPlOyXxEpL/HiN7jBvrYUZrGxipKVmRCgjvAhs+L6/SKZBW3H7Fiq8WV",
	"XJG4+LqADFbkQxIIilkxm8fL1pFBJ6GE81kxKyADh7xMMPMwZdASx0eUFuPhooYSlAw85hpreNTE5AOU",
	"N1uo6Wg48Mn+EhrNRiRBBFvhiTtvBLKwhgRLTeKVxrWYF8VriIyhhLuO/Gavb+yqJcOx/g2qQNnOks+y",
	"XH8b3w/OmjD45KwoBs8aJpOoonNKVols/iMM3jp0eO4gwzC5sQwXwmFLtUijFbYRYSLikrBOCm5h/cbQ",
	"OgGa1lDS/IwS8pJEvJOKxmoHYseaTA08wGqwU/zXmA9fghOMO0NrRxVTLWh3J4PQaY1+AyVcycAClXog",
	"BGMbfQTj85gxZ8MJR1aekGnqycmk5w/V/NIpda8bvCBlPiRCAkfKPCJMn03Cm2+Pt4u6/2OaWxqF+f1m",
	"UT+V5+slCVlHz0UTHjfaZdtLWtE+x/HzcojxGNYoz+w7esy6/zS8l/tx7SFEqihWqGQ8u+so8Ety0MI0",
	"VjTWRw85qmQjq2ebKRYiv9oPv/MKSlgyuzLPlVwROjlr0n/NrLI6X82hv+1/BwAA//9v2r3JKggAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
