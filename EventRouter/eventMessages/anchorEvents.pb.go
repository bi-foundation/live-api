// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: EventRouter/eventMessages/anchorEvents.proto

package eventMessages

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AnchoredEvent struct {
	DirectoryBlock       *DirectoryBlock   `protobuf:"bytes,1,opt,name=directoryBlock,proto3" json:"directoryBlock,omitempty"`
	AdminBlock           *AdminBlock       `protobuf:"bytes,2,opt,name=adminBlock,proto3" json:"adminBlock,omitempty"`
	FactoidBlock         *FactoidBlock     `protobuf:"bytes,3,opt,name=factoidBlock,proto3" json:"factoidBlock,omitempty"`
	EntryCreditBlock     *EntryCreditBlock `protobuf:"bytes,4,opt,name=entryCreditBlock,proto3" json:"entryCreditBlock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AnchoredEvent) Reset()         { *m = AnchoredEvent{} }
func (m *AnchoredEvent) String() string { return proto.CompactTextString(m) }
func (*AnchoredEvent) ProtoMessage()    {}
func (*AnchoredEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{0}
}
func (m *AnchoredEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchoredEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchoredEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnchoredEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchoredEvent.Merge(m, src)
}
func (m *AnchoredEvent) XXX_Size() int {
	return m.Size()
}
func (m *AnchoredEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchoredEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AnchoredEvent proto.InternalMessageInfo

func (m *AnchoredEvent) GetDirectoryBlock() *DirectoryBlock {
	if m != nil {
		return m.DirectoryBlock
	}
	return nil
}

func (m *AnchoredEvent) GetAdminBlock() *AdminBlock {
	if m != nil {
		return m.AdminBlock
	}
	return nil
}

func (m *AnchoredEvent) GetFactoidBlock() *FactoidBlock {
	if m != nil {
		return m.FactoidBlock
	}
	return nil
}

func (m *AnchoredEvent) GetEntryCreditBlock() *EntryCreditBlock {
	if m != nil {
		return m.EntryCreditBlock
	}
	return nil
}

type DirectoryBlock struct {
	Header               *DirectoryBlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Entries              []*Entry              `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DirectoryBlock) Reset()         { *m = DirectoryBlock{} }
func (m *DirectoryBlock) String() string { return proto.CompactTextString(m) }
func (*DirectoryBlock) ProtoMessage()    {}
func (*DirectoryBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{1}
}
func (m *DirectoryBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryBlock.Merge(m, src)
}
func (m *DirectoryBlock) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryBlock.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryBlock proto.InternalMessageInfo

func (m *DirectoryBlock) GetHeader() *DirectoryBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DirectoryBlock) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type DirectoryBlockHeader struct {
	BodyMerkleRoot        *Hash            `protobuf:"bytes,1,opt,name=BodyMerkleRoot,proto3" json:"BodyMerkleRoot,omitempty"`
	PreviousKeyMerkleRoot *Hash            `protobuf:"bytes,2,opt,name=PreviousKeyMerkleRoot,proto3" json:"PreviousKeyMerkleRoot,omitempty"`
	PreviousFullHash      *Hash            `protobuf:"bytes,3,opt,name=PreviousFullHash,proto3" json:"PreviousFullHash,omitempty"`
	Timestamp             *types.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DBHeight              uint32           `protobuf:"varint,5,opt,name=DBHeight,proto3" json:"DBHeight,omitempty"`
	BlockCount            uint32           `protobuf:"varint,6,opt,name=BlockCount,proto3" json:"BlockCount,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}         `json:"-"`
	XXX_unrecognized      []byte           `json:"-"`
	XXX_sizecache         int32            `json:"-"`
}

func (m *DirectoryBlockHeader) Reset()         { *m = DirectoryBlockHeader{} }
func (m *DirectoryBlockHeader) String() string { return proto.CompactTextString(m) }
func (*DirectoryBlockHeader) ProtoMessage()    {}
func (*DirectoryBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{2}
}
func (m *DirectoryBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryBlockHeader.Merge(m, src)
}
func (m *DirectoryBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryBlockHeader proto.InternalMessageInfo

func (m *DirectoryBlockHeader) GetBodyMerkleRoot() *Hash {
	if m != nil {
		return m.BodyMerkleRoot
	}
	return nil
}

func (m *DirectoryBlockHeader) GetPreviousKeyMerkleRoot() *Hash {
	if m != nil {
		return m.PreviousKeyMerkleRoot
	}
	return nil
}

func (m *DirectoryBlockHeader) GetPreviousFullHash() *Hash {
	if m != nil {
		return m.PreviousFullHash
	}
	return nil
}

func (m *DirectoryBlockHeader) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *DirectoryBlockHeader) GetDBHeight() uint32 {
	if m != nil {
		return m.DBHeight
	}
	return 0
}

func (m *DirectoryBlockHeader) GetBlockCount() uint32 {
	if m != nil {
		return m.BlockCount
	}
	return 0
}

type Entry struct {
	ChainID              *Hash    `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	KeyMerkleRoot        *Hash    `protobuf:"bytes,2,opt,name=KeyMerkleRoot,proto3" json:"KeyMerkleRoot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{3}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetChainID() *Hash {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *Entry) GetKeyMerkleRoot() *Hash {
	if m != nil {
		return m.KeyMerkleRoot
	}
	return nil
}

type AdminBlock struct {
	Header               *AdminBlockHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Entries              []*AdminBlockEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AdminBlock) Reset()         { *m = AdminBlock{} }
func (m *AdminBlock) String() string { return proto.CompactTextString(m) }
func (*AdminBlock) ProtoMessage()    {}
func (*AdminBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{4}
}
func (m *AdminBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminBlock.Merge(m, src)
}
func (m *AdminBlock) XXX_Size() int {
	return m.Size()
}
func (m *AdminBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminBlock.DiscardUnknown(m)
}

var xxx_messageInfo_AdminBlock proto.InternalMessageInfo

func (m *AdminBlock) GetHeader() *AdminBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AdminBlock) GetEntries() []*AdminBlockEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AdminBlockHeader struct {
	PrevBackRefHash      *Hash    `protobuf:"bytes,1,opt,name=PrevBackRefHash,proto3" json:"PrevBackRefHash,omitempty"`
	DBHeight             uint32   `protobuf:"varint,2,opt,name=DBHeight,proto3" json:"DBHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminBlockHeader) Reset()         { *m = AdminBlockHeader{} }
func (m *AdminBlockHeader) String() string { return proto.CompactTextString(m) }
func (*AdminBlockHeader) ProtoMessage()    {}
func (*AdminBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{5}
}
func (m *AdminBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminBlockHeader.Merge(m, src)
}
func (m *AdminBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *AdminBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_AdminBlockHeader proto.InternalMessageInfo

func (m *AdminBlockHeader) GetPrevBackRefHash() *Hash {
	if m != nil {
		return m.PrevBackRefHash
	}
	return nil
}

func (m *AdminBlockHeader) GetDBHeight() uint32 {
	if m != nil {
		return m.DBHeight
	}
	return 0
}

type AdminBlockEntry struct {
	// Types that are valid to be assigned to Value:
	//	*AdminBlockEntry_DbSignatureEntry
	//	*AdminBlockEntry_AddAuditServer
	//	*AdminBlockEntry_CoinbaseDescriptor
	Value                isAdminBlockEntry_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AdminBlockEntry) Reset()         { *m = AdminBlockEntry{} }
func (m *AdminBlockEntry) String() string { return proto.CompactTextString(m) }
func (*AdminBlockEntry) ProtoMessage()    {}
func (*AdminBlockEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{6}
}
func (m *AdminBlockEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminBlockEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminBlockEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminBlockEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminBlockEntry.Merge(m, src)
}
func (m *AdminBlockEntry) XXX_Size() int {
	return m.Size()
}
func (m *AdminBlockEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminBlockEntry.DiscardUnknown(m)
}

var xxx_messageInfo_AdminBlockEntry proto.InternalMessageInfo

type isAdminBlockEntry_Value interface {
	isAdminBlockEntry_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdminBlockEntry_DbSignatureEntry struct {
	DbSignatureEntry *DirectoryBlockSignatureEntry `protobuf:"bytes,1,opt,name=dbSignatureEntry,proto3,oneof"`
}
type AdminBlockEntry_AddAuditServer struct {
	AddAuditServer *AddAuditServer `protobuf:"bytes,2,opt,name=addAuditServer,proto3,oneof"`
}
type AdminBlockEntry_CoinbaseDescriptor struct {
	CoinbaseDescriptor *CoinbaseDescriptor `protobuf:"bytes,3,opt,name=coinbaseDescriptor,proto3,oneof"`
}

func (*AdminBlockEntry_DbSignatureEntry) isAdminBlockEntry_Value()   {}
func (*AdminBlockEntry_AddAuditServer) isAdminBlockEntry_Value()     {}
func (*AdminBlockEntry_CoinbaseDescriptor) isAdminBlockEntry_Value() {}

func (m *AdminBlockEntry) GetValue() isAdminBlockEntry_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *AdminBlockEntry) GetDbSignatureEntry() *DirectoryBlockSignatureEntry {
	if x, ok := m.GetValue().(*AdminBlockEntry_DbSignatureEntry); ok {
		return x.DbSignatureEntry
	}
	return nil
}

func (m *AdminBlockEntry) GetAddAuditServer() *AddAuditServer {
	if x, ok := m.GetValue().(*AdminBlockEntry_AddAuditServer); ok {
		return x.AddAuditServer
	}
	return nil
}

func (m *AdminBlockEntry) GetCoinbaseDescriptor() *CoinbaseDescriptor {
	if x, ok := m.GetValue().(*AdminBlockEntry_CoinbaseDescriptor); ok {
		return x.CoinbaseDescriptor
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AdminBlockEntry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AdminBlockEntry_OneofMarshaler, _AdminBlockEntry_OneofUnmarshaler, _AdminBlockEntry_OneofSizer, []interface{}{
		(*AdminBlockEntry_DbSignatureEntry)(nil),
		(*AdminBlockEntry_AddAuditServer)(nil),
		(*AdminBlockEntry_CoinbaseDescriptor)(nil),
	}
}

func _AdminBlockEntry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AdminBlockEntry)
	// value
	switch x := m.Value.(type) {
	case *AdminBlockEntry_DbSignatureEntry:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DbSignatureEntry); err != nil {
			return err
		}
	case *AdminBlockEntry_AddAuditServer:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddAuditServer); err != nil {
			return err
		}
	case *AdminBlockEntry_CoinbaseDescriptor:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CoinbaseDescriptor); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AdminBlockEntry.Value has unexpected type %T", x)
	}
	return nil
}

func _AdminBlockEntry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AdminBlockEntry)
	switch tag {
	case 1: // value.dbSignatureEntry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DirectoryBlockSignatureEntry)
		err := b.DecodeMessage(msg)
		m.Value = &AdminBlockEntry_DbSignatureEntry{msg}
		return true, err
	case 2: // value.addAuditServer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AddAuditServer)
		err := b.DecodeMessage(msg)
		m.Value = &AdminBlockEntry_AddAuditServer{msg}
		return true, err
	case 3: // value.coinbaseDescriptor
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinbaseDescriptor)
		err := b.DecodeMessage(msg)
		m.Value = &AdminBlockEntry_CoinbaseDescriptor{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AdminBlockEntry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AdminBlockEntry)
	// value
	switch x := m.Value.(type) {
	case *AdminBlockEntry_DbSignatureEntry:
		s := proto.Size(x.DbSignatureEntry)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminBlockEntry_AddAuditServer:
		s := proto.Size(x.AddAuditServer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AdminBlockEntry_CoinbaseDescriptor:
		s := proto.Size(x.CoinbaseDescriptor)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AddAuditServer struct {
	IdentityChainID      *Hash    `protobuf:"bytes,2,opt,name=IdentityChainID,proto3" json:"IdentityChainID,omitempty"`
	DBHeight             uint32   `protobuf:"varint,3,opt,name=DBHeight,proto3" json:"DBHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddAuditServer) Reset()         { *m = AddAuditServer{} }
func (m *AddAuditServer) String() string { return proto.CompactTextString(m) }
func (*AddAuditServer) ProtoMessage()    {}
func (*AddAuditServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{7}
}
func (m *AddAuditServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddAuditServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddAuditServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddAuditServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAuditServer.Merge(m, src)
}
func (m *AddAuditServer) XXX_Size() int {
	return m.Size()
}
func (m *AddAuditServer) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAuditServer.DiscardUnknown(m)
}

var xxx_messageInfo_AddAuditServer proto.InternalMessageInfo

func (m *AddAuditServer) GetIdentityChainID() *Hash {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddAuditServer) GetDBHeight() uint32 {
	if m != nil {
		return m.DBHeight
	}
	return 0
}

type CoinbaseDescriptor struct {
	Outputs              []*TransAddress `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CoinbaseDescriptor) Reset()         { *m = CoinbaseDescriptor{} }
func (m *CoinbaseDescriptor) String() string { return proto.CompactTextString(m) }
func (*CoinbaseDescriptor) ProtoMessage()    {}
func (*CoinbaseDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{8}
}
func (m *CoinbaseDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinbaseDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinbaseDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinbaseDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinbaseDescriptor.Merge(m, src)
}
func (m *CoinbaseDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *CoinbaseDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinbaseDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_CoinbaseDescriptor proto.InternalMessageInfo

func (m *CoinbaseDescriptor) GetOutputs() []*TransAddress {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type TransAddress struct {
	Amount               uint64   `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Address              *Hash    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransAddress) Reset()         { *m = TransAddress{} }
func (m *TransAddress) String() string { return proto.CompactTextString(m) }
func (*TransAddress) ProtoMessage()    {}
func (*TransAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{9}
}
func (m *TransAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransAddress.Merge(m, src)
}
func (m *TransAddress) XXX_Size() int {
	return m.Size()
}
func (m *TransAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_TransAddress.DiscardUnknown(m)
}

var xxx_messageInfo_TransAddress proto.InternalMessageInfo

func (m *TransAddress) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransAddress) GetAddress() *Hash {
	if m != nil {
		return m.Address
	}
	return nil
}

type DirectoryBlockSignatureEntry struct {
	IdentityAdminChainID *Hash      `protobuf:"bytes,2,opt,name=identityAdminChainID,proto3" json:"identityAdminChainID,omitempty"`
	PrevDBSignature      *Signature `protobuf:"bytes,3,opt,name=prevDBSignature,proto3" json:"prevDBSignature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DirectoryBlockSignatureEntry) Reset()         { *m = DirectoryBlockSignatureEntry{} }
func (m *DirectoryBlockSignatureEntry) String() string { return proto.CompactTextString(m) }
func (*DirectoryBlockSignatureEntry) ProtoMessage()    {}
func (*DirectoryBlockSignatureEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{10}
}
func (m *DirectoryBlockSignatureEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryBlockSignatureEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryBlockSignatureEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryBlockSignatureEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryBlockSignatureEntry.Merge(m, src)
}
func (m *DirectoryBlockSignatureEntry) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryBlockSignatureEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryBlockSignatureEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryBlockSignatureEntry proto.InternalMessageInfo

func (m *DirectoryBlockSignatureEntry) GetIdentityAdminChainID() *Hash {
	if m != nil {
		return m.IdentityAdminChainID
	}
	return nil
}

func (m *DirectoryBlockSignatureEntry) GetPrevDBSignature() *Signature {
	if m != nil {
		return m.PrevDBSignature
	}
	return nil
}

type Hash struct {
	HashValue            []byte   `protobuf:"bytes,1,opt,name=hashValue,proto3" json:"hashValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hash) Reset()         { *m = Hash{} }
func (m *Hash) String() string { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()    {}
func (*Hash) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{11}
}
func (m *Hash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hash.Merge(m, src)
}
func (m *Hash) XXX_Size() int {
	return m.Size()
}
func (m *Hash) XXX_DiscardUnknown() {
	xxx_messageInfo_Hash.DiscardUnknown(m)
}

var xxx_messageInfo_Hash proto.InternalMessageInfo

func (m *Hash) GetHashValue() []byte {
	if m != nil {
		return m.HashValue
	}
	return nil
}

type Signature struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{12}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type FactoidBlock struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FactoidBlock) Reset()         { *m = FactoidBlock{} }
func (m *FactoidBlock) String() string { return proto.CompactTextString(m) }
func (*FactoidBlock) ProtoMessage()    {}
func (*FactoidBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{13}
}
func (m *FactoidBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FactoidBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FactoidBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FactoidBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FactoidBlock.Merge(m, src)
}
func (m *FactoidBlock) XXX_Size() int {
	return m.Size()
}
func (m *FactoidBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_FactoidBlock.DiscardUnknown(m)
}

var xxx_messageInfo_FactoidBlock proto.InternalMessageInfo

type EntryCreditBlock struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntryCreditBlock) Reset()         { *m = EntryCreditBlock{} }
func (m *EntryCreditBlock) String() string { return proto.CompactTextString(m) }
func (*EntryCreditBlock) ProtoMessage()    {}
func (*EntryCreditBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd182da3ff4968c3, []int{14}
}
func (m *EntryCreditBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryCreditBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryCreditBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryCreditBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryCreditBlock.Merge(m, src)
}
func (m *EntryCreditBlock) XXX_Size() int {
	return m.Size()
}
func (m *EntryCreditBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryCreditBlock.DiscardUnknown(m)
}

var xxx_messageInfo_EntryCreditBlock proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AnchoredEvent)(nil), "eventMessages.AnchoredEvent")
	proto.RegisterType((*DirectoryBlock)(nil), "eventMessages.DirectoryBlock")
	proto.RegisterType((*DirectoryBlockHeader)(nil), "eventMessages.DirectoryBlockHeader")
	proto.RegisterType((*Entry)(nil), "eventMessages.Entry")
	proto.RegisterType((*AdminBlock)(nil), "eventMessages.AdminBlock")
	proto.RegisterType((*AdminBlockHeader)(nil), "eventMessages.AdminBlockHeader")
	proto.RegisterType((*AdminBlockEntry)(nil), "eventMessages.AdminBlockEntry")
	proto.RegisterType((*AddAuditServer)(nil), "eventMessages.AddAuditServer")
	proto.RegisterType((*CoinbaseDescriptor)(nil), "eventMessages.CoinbaseDescriptor")
	proto.RegisterType((*TransAddress)(nil), "eventMessages.TransAddress")
	proto.RegisterType((*DirectoryBlockSignatureEntry)(nil), "eventMessages.DirectoryBlockSignatureEntry")
	proto.RegisterType((*Hash)(nil), "eventMessages.Hash")
	proto.RegisterType((*Signature)(nil), "eventMessages.Signature")
	proto.RegisterType((*FactoidBlock)(nil), "eventMessages.FactoidBlock")
	proto.RegisterType((*EntryCreditBlock)(nil), "eventMessages.EntryCreditBlock")
}

func init() {
	proto.RegisterFile("EventRouter/eventMessages/anchorEvents.proto", fileDescriptor_fd182da3ff4968c3)
}

var fileDescriptor_fd182da3ff4968c3 = []byte{
	// 776 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xc1, 0x6e, 0xd3, 0x4a,
	0x14, 0x4d, 0xdc, 0x36, 0x79, 0xbd, 0x4d, 0xd2, 0x68, 0x5e, 0x41, 0xa1, 0xb4, 0x69, 0x31, 0x2c,
	0x2a, 0x01, 0x89, 0x54, 0x84, 0x68, 0x55, 0xa1, 0x2a, 0x4e, 0xda, 0xa6, 0x8a, 0x2a, 0xa1, 0x69,
	0x41, 0x62, 0x39, 0xb1, 0xa7, 0xc9, 0x28, 0x89, 0x27, 0x8c, 0xc7, 0x91, 0xb2, 0x40, 0x7c, 0x04,
	0x1b, 0x76, 0x7c, 0x00, 0x3f, 0xc2, 0x92, 0x0d, 0x7b, 0x54, 0x7e, 0x04, 0x79, 0x62, 0xbb, 0xf1,
	0x24, 0x8d, 0xba, 0xb3, 0xe7, 0x9e, 0x73, 0xe6, 0xce, 0x3d, 0x67, 0x6c, 0x78, 0x71, 0x32, 0xa2,
	0xae, 0xc4, 0xdc, 0x97, 0x54, 0x54, 0x69, 0xf0, 0x7c, 0x41, 0x3d, 0x8f, 0x74, 0xa8, 0x57, 0x25,
	0xae, 0xdd, 0xe5, 0x42, 0xd5, 0xbd, 0xca, 0x50, 0x70, 0xc9, 0x51, 0x3e, 0x81, 0xd8, 0xdc, 0xe9,
	0x70, 0xde, 0xe9, 0xd3, 0xaa, 0x2a, 0xb6, 0xfd, 0xeb, 0xaa, 0x64, 0x03, 0xea, 0x49, 0x32, 0x18,
	0x4e, 0xf0, 0xe6, 0x77, 0x03, 0xf2, 0x35, 0x25, 0x43, 0x1d, 0x25, 0x84, 0x4e, 0xa0, 0xe0, 0x30,
	0x41, 0x6d, 0xc9, 0xc5, 0xd8, 0xea, 0x73, 0xbb, 0x57, 0x4a, 0xef, 0xa6, 0xf7, 0xd6, 0xf6, 0xb7,
	0x2b, 0x09, 0xe9, 0x4a, 0x23, 0x01, 0xc2, 0x1a, 0x09, 0x1d, 0x02, 0x10, 0x67, 0xc0, 0xdc, 0x89,
	0x84, 0xa1, 0x24, 0x1e, 0x69, 0x12, 0xb5, 0x18, 0x80, 0xa7, 0xc0, 0xe8, 0x18, 0x72, 0xd7, 0xc4,
	0x96, 0x9c, 0x39, 0x13, 0xf2, 0x92, 0x22, 0x3f, 0xd6, 0xc8, 0xa7, 0x53, 0x10, 0x9c, 0x20, 0xa0,
	0x16, 0x14, 0xa9, 0x2b, 0xc5, 0xb8, 0x2e, 0xa8, 0xc3, 0xe4, 0x44, 0x64, 0x59, 0x89, 0xec, 0x68,
	0x22, 0x27, 0x1a, 0x0c, 0xcf, 0x10, 0xcd, 0xcf, 0x50, 0x48, 0x1e, 0x15, 0x1d, 0x41, 0xa6, 0x4b,
	0x89, 0x43, 0x45, 0x38, 0x99, 0xa7, 0x0b, 0x27, 0xd3, 0x54, 0x50, 0x1c, 0x52, 0x50, 0x05, 0xb2,
	0xc1, 0x16, 0x8c, 0x7a, 0x25, 0x63, 0x77, 0x69, 0x6f, 0x6d, 0x7f, 0x63, 0x5e, 0x4b, 0x38, 0x02,
	0x99, 0xbf, 0x0d, 0xd8, 0x98, 0x27, 0x88, 0x8e, 0xa0, 0x60, 0x71, 0x67, 0x7c, 0x41, 0x45, 0xaf,
	0x4f, 0x31, 0xe7, 0x32, 0xec, 0xe6, 0x7f, 0x4d, 0xaf, 0x49, 0xbc, 0x2e, 0xd6, 0xa0, 0xe8, 0x1c,
	0x1e, 0xbc, 0x13, 0x74, 0xc4, 0xb8, 0xef, 0xb5, 0xe8, 0xb4, 0x86, 0x71, 0xb7, 0xc6, 0x7c, 0x06,
	0x3a, 0x86, 0x62, 0x54, 0x38, 0xf5, 0xfb, 0xfd, 0x00, 0x1a, 0x3a, 0x36, 0x57, 0x65, 0x06, 0x8c,
	0x0e, 0x60, 0x35, 0x4e, 0x65, 0x68, 0xd3, 0x66, 0x65, 0x92, 0xdb, 0x4a, 0x94, 0xdb, 0xca, 0x55,
	0x84, 0xc0, 0xb7, 0x60, 0xb4, 0x09, 0xff, 0x35, 0xac, 0x26, 0x65, 0x9d, 0xae, 0x2c, 0xad, 0xec,
	0xa6, 0xf7, 0xf2, 0x38, 0x7e, 0x47, 0x65, 0x00, 0x35, 0xad, 0x3a, 0xf7, 0x5d, 0x59, 0xca, 0xa8,
	0xea, 0xd4, 0x8a, 0xf9, 0x09, 0x56, 0xd4, 0xa4, 0xd1, 0x4b, 0xc8, 0xd6, 0xbb, 0x84, 0xb9, 0xe7,
	0x8d, 0x45, 0x03, 0x8c, 0x30, 0xe8, 0x10, 0xf2, 0xf7, 0x9e, 0x58, 0x12, 0x69, 0x7e, 0x01, 0xb8,
	0x4d, 0x3c, 0x7a, 0xa3, 0xa5, 0x68, 0xe7, 0xce, 0xcb, 0xa1, 0x25, 0xe8, 0x40, 0x4f, 0x50, 0xf9,
	0x4e, 0xa6, 0x96, 0xa5, 0x01, 0x14, 0x75, 0x55, 0xf4, 0x16, 0xd6, 0x03, 0x47, 0x2c, 0x62, 0xf7,
	0x30, 0xbd, 0x56, 0xee, 0x2d, 0x18, 0x83, 0x8e, 0x4d, 0x58, 0x60, 0x24, 0x2d, 0x30, 0xbf, 0x1a,
	0xb0, 0xae, 0xf5, 0x82, 0x3e, 0x42, 0xd1, 0x69, 0x5f, 0xb2, 0x8e, 0x4b, 0xa4, 0x2f, 0xa8, 0x5a,
	0x0b, 0xf7, 0x7b, 0xbe, 0xf0, 0x16, 0x25, 0x29, 0xcd, 0x14, 0x9e, 0x91, 0x41, 0x67, 0x50, 0x20,
	0x8e, 0x53, 0xf3, 0x1d, 0x26, 0x2f, 0xa9, 0x18, 0x51, 0x11, 0x5a, 0xb3, 0x3d, 0x33, 0x9e, 0x69,
	0x50, 0x33, 0x85, 0x35, 0x1a, 0xba, 0x04, 0x64, 0x73, 0xe6, 0xb6, 0x89, 0x47, 0x1b, 0xd4, 0xb3,
	0x05, 0x1b, 0x4a, 0x2e, 0xc2, 0x4c, 0x3f, 0xd1, 0xc4, 0xea, 0x33, 0xc0, 0x66, 0x0a, 0xcf, 0xa1,
	0x5b, 0x59, 0x58, 0x19, 0x91, 0xbe, 0x4f, 0xcd, 0x1e, 0x14, 0x92, 0x1d, 0x04, 0x16, 0x9c, 0x3b,
	0xd4, 0x95, 0x4c, 0x8e, 0xa3, 0x24, 0x2e, 0x08, 0x95, 0x8e, 0x4d, 0x58, 0xb0, 0xa4, 0x59, 0xd0,
	0x02, 0x34, 0xdb, 0x21, 0x7a, 0x0d, 0x59, 0xee, 0xcb, 0xa1, 0x2f, 0xa3, 0x04, 0xe9, 0xdf, 0xd6,
	0x2b, 0x41, 0x5c, 0xaf, 0xe6, 0x38, 0x82, 0x7a, 0x1e, 0x8e, 0xb0, 0xe6, 0x7b, 0xc8, 0x4d, 0x17,
	0xd0, 0x43, 0xc8, 0x90, 0x81, 0xba, 0x5e, 0x81, 0x83, 0xcb, 0x38, 0x7c, 0x0b, 0x6e, 0x14, 0x99,
	0x40, 0x16, 0x9d, 0x23, 0xc2, 0x98, 0x3f, 0xd2, 0xb0, 0xb5, 0xc8, 0x6c, 0x74, 0x06, 0x1b, 0x2c,
	0x3c, 0xb3, 0x8a, 0xd3, 0x3d, 0x86, 0x34, 0x97, 0x80, 0x2c, 0x58, 0x1f, 0x0a, 0x3a, 0x6a, 0x58,
	0xf1, 0x06, 0xa1, 0xab, 0x25, 0x4d, 0x23, 0xae, 0x63, 0x9d, 0x60, 0x3e, 0x83, 0x65, 0x15, 0xfc,
	0x2d, 0x58, 0xed, 0x12, 0xaf, 0xfb, 0x21, 0xf0, 0x54, 0x9d, 0x3f, 0x87, 0x6f, 0x17, 0xcc, 0x33,
	0x58, 0x8d, 0x29, 0x01, 0x74, 0xe8, 0xb7, 0xfb, 0xcc, 0x6e, 0xd1, 0x71, 0x04, 0x8d, 0x17, 0x82,
	0xaa, 0x17, 0xb7, 0x63, 0x4c, 0xaa, 0xf1, 0x82, 0x59, 0x80, 0xdc, 0xf4, 0x8f, 0xce, 0x44, 0x50,
	0xd4, 0xff, 0x59, 0x56, 0xf1, 0xe7, 0x4d, 0x39, 0xfd, 0xeb, 0xa6, 0x9c, 0xfe, 0x73, 0x53, 0x4e,
	0x7f, 0xfb, 0x5b, 0x4e, 0xb5, 0x33, 0xea, 0xbb, 0xf9, 0xea, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xb7, 0xb1, 0x88, 0x41, 0x3c, 0x08, 0x00, 0x00,
}

func (m *AnchoredEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchoredEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DirectoryBlock != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.DirectoryBlock.Size()))
		n1, err := m.DirectoryBlock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.AdminBlock != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.AdminBlock.Size()))
		n2, err := m.AdminBlock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.FactoidBlock != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.FactoidBlock.Size()))
		n3, err := m.FactoidBlock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.EntryCreditBlock != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.EntryCreditBlock.Size()))
		n4, err := m.EntryCreditBlock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DirectoryBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.Header.Size()))
		n5, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAnchorEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DirectoryBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BodyMerkleRoot != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.BodyMerkleRoot.Size()))
		n6, err := m.BodyMerkleRoot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.PreviousKeyMerkleRoot != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.PreviousKeyMerkleRoot.Size()))
		n7, err := m.PreviousKeyMerkleRoot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.PreviousFullHash != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.PreviousFullHash.Size()))
		n8, err := m.PreviousFullHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.Timestamp.Size()))
		n9, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.DBHeight != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.DBHeight))
	}
	if m.BlockCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.BlockCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChainID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.ChainID.Size()))
		n10, err := m.ChainID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.KeyMerkleRoot != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.KeyMerkleRoot.Size()))
		n11, err := m.KeyMerkleRoot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.Header.Size()))
		n12, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAnchorEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PrevBackRefHash != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.PrevBackRefHash.Size()))
		n13, err := m.PrevBackRefHash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.DBHeight != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.DBHeight))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminBlockEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminBlockEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn14, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn14
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminBlockEntry_DbSignatureEntry) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DbSignatureEntry != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.DbSignatureEntry.Size()))
		n15, err := m.DbSignatureEntry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *AdminBlockEntry_AddAuditServer) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AddAuditServer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.AddAuditServer.Size()))
		n16, err := m.AddAuditServer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *AdminBlockEntry_CoinbaseDescriptor) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CoinbaseDescriptor != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.CoinbaseDescriptor.Size()))
		n17, err := m.CoinbaseDescriptor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *AddAuditServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAuditServer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IdentityChainID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.IdentityChainID.Size()))
		n18, err := m.IdentityChainID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.DBHeight != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.DBHeight))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CoinbaseDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinbaseDescriptor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Outputs) > 0 {
		for _, msg := range m.Outputs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAnchorEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransAddress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.Amount))
	}
	if m.Address != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.Address.Size()))
		n19, err := m.Address.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DirectoryBlockSignatureEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryBlockSignatureEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IdentityAdminChainID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.IdentityAdminChainID.Size()))
		n20, err := m.IdentityAdminChainID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.PrevDBSignature != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(m.PrevDBSignature.Size()))
		n21, err := m.PrevDBSignature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Hash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hash) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HashValue) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(len(m.HashValue)))
		i += copy(dAtA[i:], m.HashValue)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnchorEvents(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FactoidBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FactoidBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EntryCreditBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryCreditBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAnchorEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AnchoredEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectoryBlock != nil {
		l = m.DirectoryBlock.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.AdminBlock != nil {
		l = m.AdminBlock.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.FactoidBlock != nil {
		l = m.FactoidBlock.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.EntryCreditBlock != nil {
		l = m.EntryCreditBlock.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovAnchorEvents(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BodyMerkleRoot != nil {
		l = m.BodyMerkleRoot.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.PreviousKeyMerkleRoot != nil {
		l = m.PreviousKeyMerkleRoot.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.PreviousFullHash != nil {
		l = m.PreviousFullHash.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.DBHeight != 0 {
		n += 1 + sovAnchorEvents(uint64(m.DBHeight))
	}
	if m.BlockCount != 0 {
		n += 1 + sovAnchorEvents(uint64(m.BlockCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainID != nil {
		l = m.ChainID.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.KeyMerkleRoot != nil {
		l = m.KeyMerkleRoot.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovAnchorEvents(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrevBackRefHash != nil {
		l = m.PrevBackRefHash.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.DBHeight != 0 {
		n += 1 + sovAnchorEvents(uint64(m.DBHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminBlockEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminBlockEntry_DbSignatureEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DbSignatureEntry != nil {
		l = m.DbSignatureEntry.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_AddAuditServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddAuditServer != nil {
		l = m.AddAuditServer.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_CoinbaseDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoinbaseDescriptor != nil {
		l = m.CoinbaseDescriptor.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	return n
}
func (m *AddAuditServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityChainID != nil {
		l = m.IdentityChainID.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.DBHeight != 0 {
		n += 1 + sovAnchorEvents(uint64(m.DBHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinbaseDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovAnchorEvents(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovAnchorEvents(uint64(m.Amount))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryBlockSignatureEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityAdminChainID != nil {
		l = m.IdentityAdminChainID.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.PrevDBSignature != nil {
		l = m.PrevDBSignature.Size()
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Hash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashValue)
	if l > 0 {
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovAnchorEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FactoidBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryCreditBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAnchorEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAnchorEvents(x uint64) (n int) {
	return sovAnchorEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AnchoredEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchoredEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchoredEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DirectoryBlock == nil {
				m.DirectoryBlock = &DirectoryBlock{}
			}
			if err := m.DirectoryBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminBlock == nil {
				m.AdminBlock = &AdminBlock{}
			}
			if err := m.AdminBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoidBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FactoidBlock == nil {
				m.FactoidBlock = &FactoidBlock{}
			}
			if err := m.FactoidBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryCreditBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryCreditBlock == nil {
				m.EntryCreditBlock = &EntryCreditBlock{}
			}
			if err := m.EntryCreditBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &DirectoryBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyMerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BodyMerkleRoot == nil {
				m.BodyMerkleRoot = &Hash{}
			}
			if err := m.BodyMerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousKeyMerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousKeyMerkleRoot == nil {
				m.PreviousKeyMerkleRoot = &Hash{}
			}
			if err := m.PreviousKeyMerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousFullHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousFullHash == nil {
				m.PreviousFullHash = &Hash{}
			}
			if err := m.PreviousFullHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DBHeight", wireType)
			}
			m.DBHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DBHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCount", wireType)
			}
			m.BlockCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainID == nil {
				m.ChainID = &Hash{}
			}
			if err := m.ChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyMerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyMerkleRoot == nil {
				m.KeyMerkleRoot = &Hash{}
			}
			if err := m.KeyMerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &AdminBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &AdminBlockEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBackRefHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevBackRefHash == nil {
				m.PrevBackRefHash = &Hash{}
			}
			if err := m.PrevBackRefHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DBHeight", wireType)
			}
			m.DBHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DBHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminBlockEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminBlockEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminBlockEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbSignatureEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DirectoryBlockSignatureEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_DbSignatureEntry{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddAuditServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddAuditServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_AddAuditServer{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinbaseDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CoinbaseDescriptor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &AdminBlockEntry_CoinbaseDescriptor{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAuditServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAuditServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAuditServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityChainID == nil {
				m.IdentityChainID = &Hash{}
			}
			if err := m.IdentityChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DBHeight", wireType)
			}
			m.DBHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DBHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinbaseDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinbaseDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinbaseDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &TransAddress{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Hash{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryBlockSignatureEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryBlockSignatureEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryBlockSignatureEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityAdminChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityAdminChainID == nil {
				m.IdentityAdminChainID = &Hash{}
			}
			if err := m.IdentityAdminChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevDBSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevDBSignature == nil {
				m.PrevDBSignature = &Signature{}
			}
			if err := m.PrevDBSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashValue = append(m.HashValue[:0], dAtA[iNdEx:postIndex]...)
			if m.HashValue == nil {
				m.HashValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FactoidBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FactoidBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FactoidBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryCreditBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryCreditBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryCreditBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAnchorEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnchorEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnchorEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnchorEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAnchorEvents
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAnchorEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAnchorEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAnchorEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAnchorEvents
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAnchorEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnchorEvents   = fmt.Errorf("proto: integer overflow")
)
