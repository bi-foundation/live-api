// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventmessages/sharedTypes.proto

package eventmessages

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/bi-foundation/protobuf-graphql-extension/graphqlproto"
	_ "github.com/bi-foundation/protobuf-graphql-extension/graphqlproto/types"
	github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars "github.com/bi-foundation/protobuf-graphql-extension/plugin/graphql/scalars"
	proto "github.com/gogo/protobuf/proto"
	github_com_graphql_go_graphql "github.com/graphql-go/graphql"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ====  SHARED STRUCTURES =====
type Hash struct {
	HashValue            []byte   `protobuf:"bytes,1,opt,name=hashValue,proto3" json:"hashValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hash) Reset()         { *m = Hash{} }
func (m *Hash) String() string { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()    {}
func (*Hash) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0b97f284493f539, []int{0}
}
func (m *Hash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hash.Merge(m, src)
}
func (m *Hash) XXX_Size() int {
	return m.Size()
}
func (m *Hash) XXX_DiscardUnknown() {
	xxx_messageInfo_Hash.DiscardUnknown(m)
}

var xxx_messageInfo_Hash proto.InternalMessageInfo

func (m *Hash) GetHashValue() []byte {
	if m != nil {
		return m.HashValue
	}
	return nil
}

type ExternalId struct {
	BinaryValue          []byte   `protobuf:"bytes,1,opt,name=binaryValue,proto3" json:"binaryValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExternalId) Reset()         { *m = ExternalId{} }
func (m *ExternalId) String() string { return proto.CompactTextString(m) }
func (*ExternalId) ProtoMessage()    {}
func (*ExternalId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0b97f284493f539, []int{1}
}
func (m *ExternalId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalId.Merge(m, src)
}
func (m *ExternalId) XXX_Size() int {
	return m.Size()
}
func (m *ExternalId) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalId.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalId proto.InternalMessageInfo

func (m *ExternalId) GetBinaryValue() []byte {
	if m != nil {
		return m.BinaryValue
	}
	return nil
}

type Content struct {
	BinaryValue          []byte   `protobuf:"bytes,1,opt,name=binaryValue,proto3" json:"binaryValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0b97f284493f539, []int{2}
}
func (m *Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return m.Size()
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetBinaryValue() []byte {
	if m != nil {
		return m.BinaryValue
	}
	return nil
}

type Signature struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0b97f284493f539, []int{3}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*Hash)(nil), "eventmessages.Hash")
	proto.RegisterType((*ExternalId)(nil), "eventmessages.ExternalId")
	proto.RegisterType((*Content)(nil), "eventmessages.Content")
	proto.RegisterType((*Signature)(nil), "eventmessages.Signature")
}

func init() { proto.RegisterFile("eventmessages/sharedTypes.proto", fileDescriptor_d0b97f284493f539) }

var fileDescriptor_d0b97f284493f539 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xb1, 0x4a, 0x33, 0x41,
	0x14, 0x85, 0x99, 0x9f, 0x1f, 0x25, 0xa3, 0x36, 0xa9, 0x42, 0x90, 0x49, 0x08, 0x16, 0x82, 0x64,
	0xb7, 0xf0, 0x0d, 0x14, 0x51, 0x11, 0x2d, 0x54, 0x52, 0xd8, 0xdd, 0xd9, 0xbd, 0xd9, 0x19, 0xd8,
	0x9d, 0x59, 0x67, 0xee, 0x48, 0xf2, 0x3a, 0x56, 0x3e, 0x82, 0xa5, 0xa5, 0xa5, 0x8f, 0xa0, 0xfb,
	0x14, 0x96, 0xb2, 0x89, 0x59, 0xb3, 0x9d, 0x60, 0xb5, 0xec, 0x77, 0x3e, 0x0e, 0x87, 0xb9, 0x7c,
	0x80, 0x0f, 0x68, 0xa8, 0x40, 0xef, 0x21, 0x43, 0x1f, 0x7b, 0x05, 0x0e, 0xd3, 0xdb, 0x79, 0x89,
	0x3e, 0x2a, 0x9d, 0x25, 0xdb, 0xdd, 0x69, 0x09, 0xfd, 0xab, 0x4c, 0x93, 0x0a, 0x32, 0x4a, 0x6c,
	0x11, 0x4b, 0x3d, 0x9e, 0xda, 0x60, 0x52, 0x20, 0x6d, 0x4d, 0xbc, 0xd0, 0x65, 0x98, 0x8e, 0x33,
	0x07, 0xa5, 0xba, 0xcf, 0xc7, 0x38, 0x23, 0x34, 0xbe, 0x8e, 0xbe, 0xc9, 0xc2, 0x58, 0xfd, 0x2c,
	0xeb, 0xfb, 0x93, 0x3f, 0xf7, 0x51, 0x3d, 0x36, 0x26, 0x5d, 0xa0, 0x27, 0x28, 0xca, 0x65, 0xef,
	0x68, 0x8f, 0xff, 0x3f, 0x03, 0xaf, 0xba, 0xbb, 0xbc, 0xa3, 0xc0, 0xab, 0x09, 0xe4, 0x01, 0x7b,
	0x6c, 0xc8, 0xf6, 0xb7, 0xaf, 0x7f, 0xc0, 0x28, 0xe2, 0xfc, 0x64, 0x46, 0xe8, 0x0c, 0xe4, 0xe7,
	0x69, 0x77, 0xc8, 0xb7, 0xa4, 0x36, 0xe0, 0xe6, 0xeb, 0xf6, 0x3a, 0x1a, 0x1d, 0xf0, 0xcd, 0x63,
	0x6b, 0x08, 0x0d, 0xfd, 0x42, 0x3e, 0xe5, 0x9d, 0x1b, 0x9d, 0x19, 0xa0, 0xe0, 0xb0, 0xde, 0x51,
	0x06, 0x99, 0xeb, 0xe4, 0x02, 0xe7, 0xab, 0x1d, 0x0d, 0xa8, 0x53, 0xbf, 0x52, 0x7b, 0xff, 0x96,
	0x69, 0x03, 0x8e, 0x2e, 0x3f, 0x3f, 0x04, 0x7b, 0xaa, 0x04, 0x7b, 0xae, 0x04, 0x7b, 0xad, 0x04,
	0x7b, 0xab, 0x04, 0x7b, 0xaf, 0x04, 0x7b, 0x79, 0x1c, 0x30, 0x3e, 0x4c, 0x6c, 0x11, 0x4d, 0x21,
	0xa1, 0xe6, 0x93, 0x46, 0xad, 0x9b, 0xdd, 0xb5, 0x4f, 0x28, 0x37, 0x16, 0x2f, 0x74, 0xf8, 0x15,
	0x00, 0x00, 0xff, 0xff, 0xde, 0x56, 0xa9, 0x18, 0xfb, 0x01, 0x00, 0x00,
}

func (this *Hash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hash)
	if !ok {
		that2, ok := that.(Hash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.HashValue, that1.HashValue) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExternalId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExternalId)
	if !ok {
		that2, ok := that.(ExternalId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BinaryValue, that1.BinaryValue) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Content) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Content)
	if !ok {
		that2, ok := that.(Content)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BinaryValue, that1.BinaryValue) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Signature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Signature)
	if !ok {
		that2, ok := that.(Signature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type HashGetter interface {
	GetHash() *Hash
}

var GraphQLHashType *github_com_graphql_go_graphql.Object

type ExternalIdGetter interface {
	GetExternalId() *ExternalId
}

var GraphQLExternalIdType *github_com_graphql_go_graphql.Object

type ContentGetter interface {
	GetContent() *Content
}

var GraphQLContentType *github_com_graphql_go_graphql.Object

type SignatureGetter interface {
	GetSignature() *Signature
}

var GraphQLSignatureType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLHashType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "Hash",
		Description: "====  SHARED STRUCTURES =====",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"hashValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Hash)
						if ok {
							return obj.HashValue, nil
						}
						inter, ok := p.Source.(HashGetter)
						if ok {
							face := inter.GetHash()
							if face == nil {
								return nil, nil
							}
							return face.HashValue, nil
						}
						return nil, fmt.Errorf("field hashValue not resolved")
					},
				},
			}
		}),
	})
	GraphQLExternalIdType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ExternalId",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"binaryValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ExternalId)
						if ok {
							return obj.BinaryValue, nil
						}
						inter, ok := p.Source.(ExternalIdGetter)
						if ok {
							face := inter.GetExternalId()
							if face == nil {
								return nil, nil
							}
							return face.BinaryValue, nil
						}
						return nil, fmt.Errorf("field binaryValue not resolved")
					},
				},
			}
		}),
	})
	GraphQLContentType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "Content",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"binaryValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Content)
						if ok {
							return obj.BinaryValue, nil
						}
						inter, ok := p.Source.(ContentGetter)
						if ok {
							face := inter.GetContent()
							if face == nil {
								return nil, nil
							}
							return face.BinaryValue, nil
						}
						return nil, fmt.Errorf("field binaryValue not resolved")
					},
				},
			}
		}),
	})
	GraphQLSignatureType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "Signature",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"publicKey": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Signature)
						if ok {
							return obj.PublicKey, nil
						}
						inter, ok := p.Source.(SignatureGetter)
						if ok {
							face := inter.GetSignature()
							if face == nil {
								return nil, nil
							}
							return face.PublicKey, nil
						}
						return nil, fmt.Errorf("field publicKey not resolved")
					},
				},
				"signature": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Signature)
						if ok {
							return obj.Signature, nil
						}
						inter, ok := p.Source.(SignatureGetter)
						if ok {
							face := inter.GetSignature()
							if face == nil {
								return nil, nil
							}
							return face.Signature, nil
						}
						return nil, fmt.Errorf("field signature not resolved")
					},
				},
			}
		}),
	})
}
func (m *Hash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HashValue) > 0 {
		i -= len(m.HashValue)
		copy(dAtA[i:], m.HashValue)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.HashValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExternalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BinaryValue) > 0 {
		i -= len(m.BinaryValue)
		copy(dAtA[i:], m.BinaryValue)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.BinaryValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BinaryValue) > 0 {
		i -= len(m.BinaryValue)
		copy(dAtA[i:], m.BinaryValue)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.BinaryValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintSharedTypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSharedTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovSharedTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedHash(r randySharedTypes, easy bool) *Hash {
	this := &Hash{}
	v1 := r.Intn(100)
	this.HashValue = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.HashValue[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSharedTypes(r, 2)
	}
	return this
}

func NewPopulatedExternalId(r randySharedTypes, easy bool) *ExternalId {
	this := &ExternalId{}
	v2 := r.Intn(100)
	this.BinaryValue = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.BinaryValue[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSharedTypes(r, 2)
	}
	return this
}

func NewPopulatedContent(r randySharedTypes, easy bool) *Content {
	this := &Content{}
	v3 := r.Intn(100)
	this.BinaryValue = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.BinaryValue[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSharedTypes(r, 2)
	}
	return this
}

func NewPopulatedSignature(r randySharedTypes, easy bool) *Signature {
	this := &Signature{}
	v4 := r.Intn(100)
	this.PublicKey = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.PublicKey[i] = byte(r.Intn(256))
	}
	v5 := r.Intn(100)
	this.Signature = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSharedTypes(r, 3)
	}
	return this
}

type randySharedTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSharedTypes(r randySharedTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSharedTypes(r randySharedTypes) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneSharedTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedSharedTypes(r randySharedTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSharedTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSharedTypes(dAtA []byte, r randySharedTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSharedTypes(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateSharedTypes(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateSharedTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSharedTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSharedTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSharedTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSharedTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Hash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashValue)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExternalId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BinaryValue)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BinaryValue)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSharedTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSharedTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSharedTypes(x uint64) (n int) {
	return sovSharedTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Hash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashValue = append(m.HashValue[:0], dAtA[iNdEx:postIndex]...)
			if m.HashValue == nil {
				m.HashValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryValue = append(m.BinaryValue[:0], dAtA[iNdEx:postIndex]...)
			if m.BinaryValue == nil {
				m.BinaryValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryValue = append(m.BinaryValue[:0], dAtA[iNdEx:postIndex]...)
			if m.BinaryValue == nil {
				m.BinaryValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSharedTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSharedTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSharedTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSharedTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSharedTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSharedTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSharedTypes
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSharedTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSharedTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSharedTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSharedTypes
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSharedTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSharedTypes   = fmt.Errorf("proto: integer overflow")
)
