// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: events/eventmessages/factomEvents.proto

package eventmessages

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventSource int32

const (
	EventSource_COMMIT_DIRECTORY_BLOCK EventSource = 0
	EventSource_ADD_TO_PROCESSLIST     EventSource = 1
	EventSource_ADD_TO_HOLDING         EventSource = 2
	EventSource_DROP_FROM_HOLDING      EventSource = 3
	EventSource_PROCESS_EVENT          EventSource = 4
	EventSource_NODE_EVENT             EventSource = 5
)

var EventSource_name = map[int32]string{
	0: "COMMIT_DIRECTORY_BLOCK",
	1: "ADD_TO_PROCESSLIST",
	2: "ADD_TO_HOLDING",
	3: "DROP_FROM_HOLDING",
	4: "PROCESS_EVENT",
	5: "NODE_EVENT",
}

var EventSource_value = map[string]int32{
	"COMMIT_DIRECTORY_BLOCK": 0,
	"ADD_TO_PROCESSLIST":     1,
	"ADD_TO_HOLDING":         2,
	"DROP_FROM_HOLDING":      3,
	"PROCESS_EVENT":          4,
	"NODE_EVENT":             5,
}

func (x EventSource) String() string {
	return proto.EnumName(EventSource_name, int32(x))
}

func (EventSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{0}
}

type Level int32

const (
	Level_INFO    Level = 0
	Level_WARNING Level = 1
	Level_ERROR   Level = 2
)

var Level_name = map[int32]string{
	0: "INFO",
	1: "WARNING",
	2: "ERROR",
}

var Level_value = map[string]int32{
	"INFO":    0,
	"WARNING": 1,
	"ERROR":   2,
}

func (x Level) String() string {
	return proto.EnumName(Level_name, int32(x))
}

func (Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{1}
}

type ProcessMessageCode int32

const (
	ProcessMessageCode_OTHER_P    ProcessMessageCode = 0
	ProcessMessageCode_NEW_BLOCK  ProcessMessageCode = 1
	ProcessMessageCode_NEW_MINUTE ProcessMessageCode = 2
)

var ProcessMessageCode_name = map[int32]string{
	0: "OTHER_P",
	1: "NEW_BLOCK",
	2: "NEW_MINUTE",
}

var ProcessMessageCode_value = map[string]int32{
	"OTHER_P":    0,
	"NEW_BLOCK":  1,
	"NEW_MINUTE": 2,
}

func (x ProcessMessageCode) String() string {
	return proto.EnumName(ProcessMessageCode_name, int32(x))
}

func (ProcessMessageCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{2}
}

type NodeMessageCode int32

const (
	NodeMessageCode_OTHER_N       NodeMessageCode = 0
	NodeMessageCode_STARTED       NodeMessageCode = 1
	NodeMessageCode_SYNC_COMPLETE NodeMessageCode = 2
	NodeMessageCode_SHUTDOWN      NodeMessageCode = 3
)

var NodeMessageCode_name = map[int32]string{
	0: "OTHER_N",
	1: "STARTED",
	2: "SYNC_COMPLETE",
	3: "SHUTDOWN",
}

var NodeMessageCode_value = map[string]int32{
	"OTHER_N":       0,
	"STARTED":       1,
	"SYNC_COMPLETE": 2,
	"SHUTDOWN":      3,
}

func (x NodeMessageCode) String() string {
	return proto.EnumName(NodeMessageCode_name, int32(x))
}

func (NodeMessageCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{3}
}

type FactomEvent struct {
	EventSource     EventSource `protobuf:"varint,1,opt,name=eventSource,proto3,enum=eventmessages.EventSource" json:"eventSource,omitempty"`
	IdentityChainID *Hash       `protobuf:"bytes,2,opt,name=IdentityChainID,proto3" json:"IdentityChainID,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*FactomEvent_AnchorEvent
	//	*FactomEvent_CommitChain
	//	*FactomEvent_CommitEntry
	//	*FactomEvent_RevealEntry
	//	*FactomEvent_ProcessEvent
	//	*FactomEvent_NodeEvent
	Value                isFactomEvent_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FactomEvent) Reset()         { *m = FactomEvent{} }
func (m *FactomEvent) String() string { return proto.CompactTextString(m) }
func (*FactomEvent) ProtoMessage()    {}
func (*FactomEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{0}
}
func (m *FactomEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FactomEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FactomEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FactomEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FactomEvent.Merge(m, src)
}
func (m *FactomEvent) XXX_Size() int {
	return m.Size()
}
func (m *FactomEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_FactomEvent.DiscardUnknown(m)
}

var xxx_messageInfo_FactomEvent proto.InternalMessageInfo

type isFactomEvent_Value interface {
	isFactomEvent_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FactomEvent_AnchorEvent struct {
	AnchorEvent *AnchoredEvent `protobuf:"bytes,3,opt,name=anchorEvent,proto3,oneof"`
}
type FactomEvent_CommitChain struct {
	CommitChain *CommitChain `protobuf:"bytes,4,opt,name=commitChain,proto3,oneof"`
}
type FactomEvent_CommitEntry struct {
	CommitEntry *CommitEntry `protobuf:"bytes,5,opt,name=commitEntry,proto3,oneof"`
}
type FactomEvent_RevealEntry struct {
	RevealEntry *RevealEntry `protobuf:"bytes,6,opt,name=revealEntry,proto3,oneof"`
}
type FactomEvent_ProcessEvent struct {
	ProcessEvent *ProcessMessage `protobuf:"bytes,7,opt,name=processEvent,proto3,oneof"`
}
type FactomEvent_NodeEvent struct {
	NodeEvent *NodeMessage `protobuf:"bytes,8,opt,name=nodeEvent,proto3,oneof"`
}

func (*FactomEvent_AnchorEvent) isFactomEvent_Value()  {}
func (*FactomEvent_CommitChain) isFactomEvent_Value()  {}
func (*FactomEvent_CommitEntry) isFactomEvent_Value()  {}
func (*FactomEvent_RevealEntry) isFactomEvent_Value()  {}
func (*FactomEvent_ProcessEvent) isFactomEvent_Value() {}
func (*FactomEvent_NodeEvent) isFactomEvent_Value()    {}

func (m *FactomEvent) GetValue() isFactomEvent_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FactomEvent) GetEventSource() EventSource {
	if m != nil {
		return m.EventSource
	}
	return EventSource_COMMIT_DIRECTORY_BLOCK
}

func (m *FactomEvent) GetIdentityChainID() *Hash {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *FactomEvent) GetAnchorEvent() *AnchoredEvent {
	if x, ok := m.GetValue().(*FactomEvent_AnchorEvent); ok {
		return x.AnchorEvent
	}
	return nil
}

func (m *FactomEvent) GetCommitChain() *CommitChain {
	if x, ok := m.GetValue().(*FactomEvent_CommitChain); ok {
		return x.CommitChain
	}
	return nil
}

func (m *FactomEvent) GetCommitEntry() *CommitEntry {
	if x, ok := m.GetValue().(*FactomEvent_CommitEntry); ok {
		return x.CommitEntry
	}
	return nil
}

func (m *FactomEvent) GetRevealEntry() *RevealEntry {
	if x, ok := m.GetValue().(*FactomEvent_RevealEntry); ok {
		return x.RevealEntry
	}
	return nil
}

func (m *FactomEvent) GetProcessEvent() *ProcessMessage {
	if x, ok := m.GetValue().(*FactomEvent_ProcessEvent); ok {
		return x.ProcessEvent
	}
	return nil
}

func (m *FactomEvent) GetNodeEvent() *NodeMessage {
	if x, ok := m.GetValue().(*FactomEvent_NodeEvent); ok {
		return x.NodeEvent
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FactomEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FactomEvent_OneofMarshaler, _FactomEvent_OneofUnmarshaler, _FactomEvent_OneofSizer, []interface{}{
		(*FactomEvent_AnchorEvent)(nil),
		(*FactomEvent_CommitChain)(nil),
		(*FactomEvent_CommitEntry)(nil),
		(*FactomEvent_RevealEntry)(nil),
		(*FactomEvent_ProcessEvent)(nil),
		(*FactomEvent_NodeEvent)(nil),
	}
}

func _FactomEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FactomEvent)
	// value
	switch x := m.Value.(type) {
	case *FactomEvent_AnchorEvent:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnchorEvent); err != nil {
			return err
		}
	case *FactomEvent_CommitChain:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommitChain); err != nil {
			return err
		}
	case *FactomEvent_CommitEntry:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommitEntry); err != nil {
			return err
		}
	case *FactomEvent_RevealEntry:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RevealEntry); err != nil {
			return err
		}
	case *FactomEvent_ProcessEvent:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProcessEvent); err != nil {
			return err
		}
	case *FactomEvent_NodeEvent:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NodeEvent); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FactomEvent.Value has unexpected type %T", x)
	}
	return nil
}

func _FactomEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FactomEvent)
	switch tag {
	case 3: // value.anchorEvent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AnchoredEvent)
		err := b.DecodeMessage(msg)
		m.Value = &FactomEvent_AnchorEvent{msg}
		return true, err
	case 4: // value.commitChain
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommitChain)
		err := b.DecodeMessage(msg)
		m.Value = &FactomEvent_CommitChain{msg}
		return true, err
	case 5: // value.commitEntry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommitEntry)
		err := b.DecodeMessage(msg)
		m.Value = &FactomEvent_CommitEntry{msg}
		return true, err
	case 6: // value.revealEntry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RevealEntry)
		err := b.DecodeMessage(msg)
		m.Value = &FactomEvent_RevealEntry{msg}
		return true, err
	case 7: // value.processEvent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProcessMessage)
		err := b.DecodeMessage(msg)
		m.Value = &FactomEvent_ProcessEvent{msg}
		return true, err
	case 8: // value.nodeEvent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NodeMessage)
		err := b.DecodeMessage(msg)
		m.Value = &FactomEvent_NodeEvent{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FactomEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FactomEvent)
	// value
	switch x := m.Value.(type) {
	case *FactomEvent_AnchorEvent:
		s := proto.Size(x.AnchorEvent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FactomEvent_CommitChain:
		s := proto.Size(x.CommitChain)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FactomEvent_CommitEntry:
		s := proto.Size(x.CommitEntry)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FactomEvent_RevealEntry:
		s := proto.Size(x.RevealEntry)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FactomEvent_ProcessEvent:
		s := proto.Size(x.ProcessEvent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FactomEvent_NodeEvent:
		s := proto.Size(x.NodeEvent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AnchoredEvent struct {
	DirectoryBlock       *DirectoryBlock    `protobuf:"bytes,1,opt,name=directoryBlock,proto3" json:"directoryBlock,omitempty"`
	AdminBlock           *AdminBlock        `protobuf:"bytes,2,opt,name=adminBlock,proto3" json:"adminBlock,omitempty"`
	FactoidBlock         *FactoidBlock      `protobuf:"bytes,3,opt,name=factoidBlock,proto3" json:"factoidBlock,omitempty"`
	EntryCreditBlock     *EntryCreditBlock  `protobuf:"bytes,4,opt,name=entryCreditBlock,proto3" json:"entryCreditBlock,omitempty"`
	EntryBlocks          []*EntryBlock      `protobuf:"bytes,5,rep,name=entryBlocks,proto3" json:"entryBlocks,omitempty"`
	EntryBlockEntries    []*EntryBlockEntry `protobuf:"bytes,6,rep,name=entryBlockEntries,proto3" json:"entryBlockEntries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AnchoredEvent) Reset()         { *m = AnchoredEvent{} }
func (m *AnchoredEvent) String() string { return proto.CompactTextString(m) }
func (*AnchoredEvent) ProtoMessage()    {}
func (*AnchoredEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{1}
}
func (m *AnchoredEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchoredEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchoredEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnchoredEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchoredEvent.Merge(m, src)
}
func (m *AnchoredEvent) XXX_Size() int {
	return m.Size()
}
func (m *AnchoredEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchoredEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AnchoredEvent proto.InternalMessageInfo

func (m *AnchoredEvent) GetDirectoryBlock() *DirectoryBlock {
	if m != nil {
		return m.DirectoryBlock
	}
	return nil
}

func (m *AnchoredEvent) GetAdminBlock() *AdminBlock {
	if m != nil {
		return m.AdminBlock
	}
	return nil
}

func (m *AnchoredEvent) GetFactoidBlock() *FactoidBlock {
	if m != nil {
		return m.FactoidBlock
	}
	return nil
}

func (m *AnchoredEvent) GetEntryCreditBlock() *EntryCreditBlock {
	if m != nil {
		return m.EntryCreditBlock
	}
	return nil
}

func (m *AnchoredEvent) GetEntryBlocks() []*EntryBlock {
	if m != nil {
		return m.EntryBlocks
	}
	return nil
}

func (m *AnchoredEvent) GetEntryBlockEntries() []*EntryBlockEntry {
	if m != nil {
		return m.EntryBlockEntries
	}
	return nil
}

type DirectoryBlock struct {
	Header               *DirectoryBlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Entries              []*Entry              `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DirectoryBlock) Reset()         { *m = DirectoryBlock{} }
func (m *DirectoryBlock) String() string { return proto.CompactTextString(m) }
func (*DirectoryBlock) ProtoMessage()    {}
func (*DirectoryBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{2}
}
func (m *DirectoryBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryBlock.Merge(m, src)
}
func (m *DirectoryBlock) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryBlock.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryBlock proto.InternalMessageInfo

func (m *DirectoryBlock) GetHeader() *DirectoryBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DirectoryBlock) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type DirectoryBlockHeader struct {
	BodyMerkleRoot        *Hash            `protobuf:"bytes,1,opt,name=bodyMerkleRoot,proto3" json:"bodyMerkleRoot,omitempty"`
	PreviousKeyMerkleRoot *Hash            `protobuf:"bytes,2,opt,name=previousKeyMerkleRoot,proto3" json:"previousKeyMerkleRoot,omitempty"`
	PreviousFullHash      *Hash            `protobuf:"bytes,3,opt,name=previousFullHash,proto3" json:"previousFullHash,omitempty"`
	Timestamp             *types.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BlockHeight           uint32           `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	BlockCount            uint32           `protobuf:"varint,6,opt,name=blockCount,proto3" json:"blockCount,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}         `json:"-"`
	XXX_unrecognized      []byte           `json:"-"`
	XXX_sizecache         int32            `json:"-"`
}

func (m *DirectoryBlockHeader) Reset()         { *m = DirectoryBlockHeader{} }
func (m *DirectoryBlockHeader) String() string { return proto.CompactTextString(m) }
func (*DirectoryBlockHeader) ProtoMessage()    {}
func (*DirectoryBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{3}
}
func (m *DirectoryBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryBlockHeader.Merge(m, src)
}
func (m *DirectoryBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryBlockHeader proto.InternalMessageInfo

func (m *DirectoryBlockHeader) GetBodyMerkleRoot() *Hash {
	if m != nil {
		return m.BodyMerkleRoot
	}
	return nil
}

func (m *DirectoryBlockHeader) GetPreviousKeyMerkleRoot() *Hash {
	if m != nil {
		return m.PreviousKeyMerkleRoot
	}
	return nil
}

func (m *DirectoryBlockHeader) GetPreviousFullHash() *Hash {
	if m != nil {
		return m.PreviousFullHash
	}
	return nil
}

func (m *DirectoryBlockHeader) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *DirectoryBlockHeader) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *DirectoryBlockHeader) GetBlockCount() uint32 {
	if m != nil {
		return m.BlockCount
	}
	return 0
}

type EntryBlock struct {
	EntryBlockHeader     *EntryBlockHeader `protobuf:"bytes,1,opt,name=entryBlockHeader,proto3" json:"entryBlockHeader,omitempty"`
	EntryHashes          []*Hash           `protobuf:"bytes,2,rep,name=entryHashes,proto3" json:"entryHashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EntryBlock) Reset()         { *m = EntryBlock{} }
func (m *EntryBlock) String() string { return proto.CompactTextString(m) }
func (*EntryBlock) ProtoMessage()    {}
func (*EntryBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{4}
}
func (m *EntryBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryBlock.Merge(m, src)
}
func (m *EntryBlock) XXX_Size() int {
	return m.Size()
}
func (m *EntryBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryBlock.DiscardUnknown(m)
}

var xxx_messageInfo_EntryBlock proto.InternalMessageInfo

func (m *EntryBlock) GetEntryBlockHeader() *EntryBlockHeader {
	if m != nil {
		return m.EntryBlockHeader
	}
	return nil
}

func (m *EntryBlock) GetEntryHashes() []*Hash {
	if m != nil {
		return m.EntryHashes
	}
	return nil
}

type EntryBlockHeader struct {
	BodyMerkleRoot        *Hash    `protobuf:"bytes,1,opt,name=bodyMerkleRoot,proto3" json:"bodyMerkleRoot,omitempty"`
	ChainID               *Hash    `protobuf:"bytes,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
	PreviousFullHash      *Hash    `protobuf:"bytes,3,opt,name=previousFullHash,proto3" json:"previousFullHash,omitempty"`
	PreviousKeyMerkleRoot *Hash    `protobuf:"bytes,4,opt,name=previousKeyMerkleRoot,proto3" json:"previousKeyMerkleRoot,omitempty"`
	BlockHeight           uint32   `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	BlockSequence         uint32   `protobuf:"varint,6,opt,name=blockSequence,proto3" json:"blockSequence,omitempty"`
	EntryCount            uint32   `protobuf:"varint,7,opt,name=entryCount,proto3" json:"entryCount,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *EntryBlockHeader) Reset()         { *m = EntryBlockHeader{} }
func (m *EntryBlockHeader) String() string { return proto.CompactTextString(m) }
func (*EntryBlockHeader) ProtoMessage()    {}
func (*EntryBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{5}
}
func (m *EntryBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryBlockHeader.Merge(m, src)
}
func (m *EntryBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *EntryBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_EntryBlockHeader proto.InternalMessageInfo

func (m *EntryBlockHeader) GetBodyMerkleRoot() *Hash {
	if m != nil {
		return m.BodyMerkleRoot
	}
	return nil
}

func (m *EntryBlockHeader) GetChainID() *Hash {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *EntryBlockHeader) GetPreviousFullHash() *Hash {
	if m != nil {
		return m.PreviousFullHash
	}
	return nil
}

func (m *EntryBlockHeader) GetPreviousKeyMerkleRoot() *Hash {
	if m != nil {
		return m.PreviousKeyMerkleRoot
	}
	return nil
}

func (m *EntryBlockHeader) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EntryBlockHeader) GetBlockSequence() uint32 {
	if m != nil {
		return m.BlockSequence
	}
	return 0
}

func (m *EntryBlockHeader) GetEntryCount() uint32 {
	if m != nil {
		return m.EntryCount
	}
	return 0
}

type EntryBlockEntry struct {
	Hash                 *Hash         `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ExternalIDs          []*ExternalId `protobuf:"bytes,2,rep,name=externalIDs,proto3" json:"externalIDs,omitempty"`
	Content              *Content      `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EntryBlockEntry) Reset()         { *m = EntryBlockEntry{} }
func (m *EntryBlockEntry) String() string { return proto.CompactTextString(m) }
func (*EntryBlockEntry) ProtoMessage()    {}
func (*EntryBlockEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{6}
}
func (m *EntryBlockEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryBlockEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryBlockEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryBlockEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryBlockEntry.Merge(m, src)
}
func (m *EntryBlockEntry) XXX_Size() int {
	return m.Size()
}
func (m *EntryBlockEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryBlockEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EntryBlockEntry proto.InternalMessageInfo

func (m *EntryBlockEntry) GetHash() *Hash {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *EntryBlockEntry) GetExternalIDs() []*ExternalId {
	if m != nil {
		return m.ExternalIDs
	}
	return nil
}

func (m *EntryBlockEntry) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

type Entry struct {
	ChainID              *Hash    `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	KeyMerkleRoot        *Hash    `protobuf:"bytes,2,opt,name=keyMerkleRoot,proto3" json:"keyMerkleRoot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{7}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetChainID() *Hash {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *Entry) GetKeyMerkleRoot() *Hash {
	if m != nil {
		return m.KeyMerkleRoot
	}
	return nil
}

type RevealEntry struct {
	Entry                *EntryBlockEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	Timestamp            *types.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RevealEntry) Reset()         { *m = RevealEntry{} }
func (m *RevealEntry) String() string { return proto.CompactTextString(m) }
func (*RevealEntry) ProtoMessage()    {}
func (*RevealEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{8}
}
func (m *RevealEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevealEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevealEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevealEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevealEntry.Merge(m, src)
}
func (m *RevealEntry) XXX_Size() int {
	return m.Size()
}
func (m *RevealEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RevealEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RevealEntry proto.InternalMessageInfo

func (m *RevealEntry) GetEntry() *EntryBlockEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *RevealEntry) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type ProcessMessage struct {
	MessageCode          ProcessMessageCode `protobuf:"varint,1,opt,name=messageCode,proto3,enum=eventmessages.ProcessMessageCode" json:"messageCode,omitempty"`
	Level                Level              `protobuf:"varint,2,opt,name=level,proto3,enum=eventmessages.Level" json:"level,omitempty"`
	MessageText          string             `protobuf:"bytes,3,opt,name=messageText,proto3" json:"messageText,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ProcessMessage) Reset()         { *m = ProcessMessage{} }
func (m *ProcessMessage) String() string { return proto.CompactTextString(m) }
func (*ProcessMessage) ProtoMessage()    {}
func (*ProcessMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{9}
}
func (m *ProcessMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessMessage.Merge(m, src)
}
func (m *ProcessMessage) XXX_Size() int {
	return m.Size()
}
func (m *ProcessMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessMessage proto.InternalMessageInfo

func (m *ProcessMessage) GetMessageCode() ProcessMessageCode {
	if m != nil {
		return m.MessageCode
	}
	return ProcessMessageCode_OTHER_P
}

func (m *ProcessMessage) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return Level_INFO
}

func (m *ProcessMessage) GetMessageText() string {
	if m != nil {
		return m.MessageText
	}
	return ""
}

type NodeMessage struct {
	MessageCode          NodeMessageCode `protobuf:"varint,1,opt,name=messageCode,proto3,enum=eventmessages.NodeMessageCode" json:"messageCode,omitempty"`
	Level                Level           `protobuf:"varint,2,opt,name=level,proto3,enum=eventmessages.Level" json:"level,omitempty"`
	MessageText          string          `protobuf:"bytes,3,opt,name=messageText,proto3" json:"messageText,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NodeMessage) Reset()         { *m = NodeMessage{} }
func (m *NodeMessage) String() string { return proto.CompactTextString(m) }
func (*NodeMessage) ProtoMessage()    {}
func (*NodeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_1671448ba58a28d0, []int{10}
}
func (m *NodeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMessage.Merge(m, src)
}
func (m *NodeMessage) XXX_Size() int {
	return m.Size()
}
func (m *NodeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMessage proto.InternalMessageInfo

func (m *NodeMessage) GetMessageCode() NodeMessageCode {
	if m != nil {
		return m.MessageCode
	}
	return NodeMessageCode_OTHER_N
}

func (m *NodeMessage) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return Level_INFO
}

func (m *NodeMessage) GetMessageText() string {
	if m != nil {
		return m.MessageText
	}
	return ""
}

func init() {
	proto.RegisterEnum("eventmessages.EventSource", EventSource_name, EventSource_value)
	proto.RegisterEnum("eventmessages.Level", Level_name, Level_value)
	proto.RegisterEnum("eventmessages.ProcessMessageCode", ProcessMessageCode_name, ProcessMessageCode_value)
	proto.RegisterEnum("eventmessages.NodeMessageCode", NodeMessageCode_name, NodeMessageCode_value)
	proto.RegisterType((*FactomEvent)(nil), "eventmessages.FactomEvent")
	proto.RegisterType((*AnchoredEvent)(nil), "eventmessages.AnchoredEvent")
	proto.RegisterType((*DirectoryBlock)(nil), "eventmessages.DirectoryBlock")
	proto.RegisterType((*DirectoryBlockHeader)(nil), "eventmessages.DirectoryBlockHeader")
	proto.RegisterType((*EntryBlock)(nil), "eventmessages.EntryBlock")
	proto.RegisterType((*EntryBlockHeader)(nil), "eventmessages.EntryBlockHeader")
	proto.RegisterType((*EntryBlockEntry)(nil), "eventmessages.EntryBlockEntry")
	proto.RegisterType((*Entry)(nil), "eventmessages.Entry")
	proto.RegisterType((*RevealEntry)(nil), "eventmessages.RevealEntry")
	proto.RegisterType((*ProcessMessage)(nil), "eventmessages.ProcessMessage")
	proto.RegisterType((*NodeMessage)(nil), "eventmessages.NodeMessage")
}

func init() {
	proto.RegisterFile("events/eventmessages/factomEvents.proto", fileDescriptor_1671448ba58a28d0)
}

var fileDescriptor_1671448ba58a28d0 = []byte{
	// 1154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xcf, 0x73, 0xdb, 0x44,
	0x14, 0xc7, 0x2d, 0xc7, 0x8e, 0x9b, 0xa7, 0xda, 0x55, 0x96, 0x36, 0x63, 0x02, 0x38, 0xc1, 0xfc,
	0x68, 0xc9, 0x0c, 0x0e, 0x53, 0x60, 0x86, 0x12, 0xa0, 0x4d, 0x64, 0x05, 0x7b, 0x62, 0x4b, 0x99,
	0xb5, 0x4a, 0xa6, 0x5c, 0x3c, 0x8a, 0xb4, 0x8d, 0x35, 0x91, 0xa5, 0x54, 0x92, 0x33, 0xcd, 0xa1,
	0x7f, 0x03, 0x9c, 0x18, 0x2e, 0x9c, 0x38, 0xc1, 0x5f, 0xc2, 0x91, 0x3b, 0x17, 0x26, 0xfc, 0x07,
	0xfc, 0x05, 0x8c, 0x56, 0x6b, 0x6b, 0x25, 0x2b, 0x4e, 0x3b, 0x1d, 0x4e, 0xc9, 0xee, 0x7e, 0xbe,
	0x6f, 0xdf, 0xbe, 0xf7, 0xf6, 0xad, 0x0c, 0x77, 0xc9, 0x39, 0x71, 0xc3, 0x60, 0x9b, 0xfe, 0x19,
	0x93, 0x20, 0x30, 0x4e, 0x48, 0xb0, 0xfd, 0xd4, 0x30, 0x43, 0x6f, 0xac, 0xd0, 0xa5, 0xd6, 0x99,
	0xef, 0x85, 0x1e, 0xaa, 0xa6, 0x88, 0xf5, 0x7c, 0xdd, 0x09, 0x71, 0x89, 0x6f, 0x38, 0xfa, 0xc5,
	0x19, 0x61, 0xba, 0xf5, 0x0f, 0x72, 0x41, 0xc3, 0x1a, 0xdb, 0xee, 0x9e, 0xe3, 0x99, 0xa7, 0x0c,
	0x5b, 0xe0, 0x87, 0x6d, 0xf1, 0xe0, 0x87, 0xb9, 0x20, 0x71, 0x43, 0xff, 0x42, 0xf6, 0x89, 0x65,
	0x87, 0x8c, 0xdb, 0x38, 0xf1, 0xbc, 0x13, 0x87, 0x6c, 0xd3, 0xd1, 0xf1, 0xe4, 0xe9, 0x76, 0x68,
	0x8f, 0x49, 0x10, 0x1a, 0xe3, 0xb3, 0x18, 0x68, 0xfe, 0x54, 0x02, 0x71, 0x3f, 0x39, 0x27, 0xfa,
	0x0a, 0x44, 0x6a, 0x73, 0xe0, 0x4d, 0x7c, 0x93, 0xd4, 0x85, 0x4d, 0xe1, 0x5e, 0xed, 0xfe, 0x7a,
	0x2b, 0xb5, 0x4f, 0x4b, 0x49, 0x08, 0xcc, 0xe3, 0xe8, 0x6b, 0xb8, 0xd5, 0xb5, 0x88, 0x1b, 0xda,
	0xe1, 0x85, 0x3c, 0x32, 0x6c, 0xb7, 0xdb, 0xae, 0x17, 0x37, 0x85, 0x7b, 0xe2, 0xfd, 0x37, 0x32,
	0x16, 0x3a, 0x46, 0x30, 0xc2, 0x59, 0x16, 0x3d, 0x02, 0xd1, 0x70, 0xcd, 0x91, 0xe7, 0xd3, 0x0d,
	0xea, 0x4b, 0x54, 0xfa, 0x76, 0x46, 0xba, 0x4b, 0x09, 0x62, 0x51, 0xa6, 0x53, 0xc0, 0xbc, 0x04,
	0x7d, 0x03, 0xa2, 0xe9, 0x8d, 0xc7, 0x76, 0x48, 0x4d, 0xd6, 0x4b, 0xd4, 0x42, 0xd6, 0x7d, 0x39,
	0x21, 0x22, 0x3d, 0x27, 0x48, 0xf4, 0x4a, 0x14, 0xca, 0x7a, 0x79, 0x81, 0x9e, 0x12, 0x89, 0x9e,
	0x0e, 0x23, 0xbd, 0x4f, 0xce, 0x89, 0xe1, 0xc4, 0xfa, 0xe5, 0x5c, 0x3d, 0x4e, 0x88, 0x48, 0xcf,
	0x09, 0x90, 0x0c, 0x37, 0xcf, 0x7c, 0xcf, 0x24, 0x41, 0x10, 0x87, 0xa0, 0x42, 0x0d, 0xbc, 0x93,
	0x31, 0x70, 0x18, 0x23, 0xfd, 0x78, 0xdc, 0x29, 0xe0, 0x94, 0x08, 0x7d, 0x09, 0x2b, 0xae, 0x67,
	0x91, 0xd8, 0xc2, 0x8d, 0x5c, 0x17, 0x54, 0xcf, 0x22, 0x89, 0x3c, 0xc1, 0xf7, 0x2a, 0x50, 0x3e,
	0x37, 0x9c, 0x09, 0x69, 0xfe, 0xbe, 0x04, 0xd5, 0x54, 0xa8, 0x91, 0x02, 0x35, 0xcb, 0xf6, 0x89,
	0x19, 0x7a, 0xfe, 0x05, 0xad, 0x45, 0x5a, 0x1d, 0xf3, 0xde, 0xb5, 0x53, 0x10, 0xce, 0x88, 0xd0,
	0x03, 0x80, 0xa4, 0xee, 0x59, 0x79, 0xbc, 0x99, 0xcd, 0xf1, 0x0c, 0xc0, 0x1c, 0x8c, 0x1e, 0xc2,
	0x4d, 0xfe, 0x2e, 0xb0, 0x02, 0x79, 0x2b, 0x23, 0xde, 0xe7, 0x10, 0x9c, 0x12, 0xa0, 0x03, 0x90,
	0xb8, 0x3b, 0x12, 0x1b, 0x89, 0x6b, 0x64, 0x23, 0x5b, 0xe2, 0x19, 0x0c, 0xcf, 0x09, 0xd1, 0x0e,
	0x88, 0x74, 0x8e, 0x8e, 0x82, 0x7a, 0x79, 0x73, 0x29, 0xe7, 0x24, 0xca, 0x8c, 0xc0, 0x3c, 0x8d,
	0x7a, 0xb0, 0x9a, 0x0c, 0x23, 0xc8, 0x26, 0x41, 0x7d, 0x99, 0x9a, 0x68, 0x5c, 0x69, 0x82, 0xfe,
	0x87, 0xe7, 0x85, 0xcd, 0x17, 0x50, 0x4b, 0x47, 0x1d, 0xed, 0xc0, 0xf2, 0x88, 0x18, 0x16, 0xf1,
	0x59, 0x92, 0xde, 0x5b, 0x98, 0xa4, 0x0e, 0x45, 0x31, 0x93, 0xa0, 0x16, 0x54, 0x08, 0x73, 0xa9,
	0x48, 0x5d, 0xba, 0x9d, 0xe7, 0x12, 0x9e, 0x42, 0xcd, 0xbf, 0x8a, 0x70, 0x3b, 0xcf, 0x20, 0xda,
	0x81, 0xda, 0xb1, 0x67, 0x5d, 0xf4, 0x89, 0x7f, 0xea, 0x10, 0xec, 0x79, 0x21, 0xf3, 0x26, 0xb7,
	0x1d, 0x64, 0x50, 0xd4, 0x85, 0x3b, 0x67, 0x3e, 0x39, 0xb7, 0xbd, 0x49, 0x70, 0x40, 0x78, 0x1b,
	0x0b, 0x5a, 0x4a, 0xbe, 0x02, 0x3d, 0x04, 0x69, 0xba, 0xb0, 0x3f, 0x71, 0x9c, 0x08, 0x65, 0xc5,
	0x93, 0x6b, 0x65, 0x0e, 0x46, 0x5f, 0xc0, 0xca, 0xac, 0x73, 0xce, 0xba, 0x4a, 0xdc, 0x5b, 0x5b,
	0xd3, 0xde, 0xda, 0xd2, 0xa7, 0x04, 0x4e, 0x60, 0xb4, 0x09, 0xe2, 0x71, 0x1c, 0x11, 0xfb, 0x64,
	0x14, 0xd2, 0x8e, 0x52, 0xc5, 0xfc, 0x14, 0x6a, 0x00, 0xd0, 0xa1, 0xec, 0x4d, 0xdc, 0x90, 0xb6,
	0x8c, 0x2a, 0xe6, 0x66, 0x9a, 0x3f, 0x0a, 0x00, 0x49, 0x0d, 0xcc, 0x6a, 0x98, 0x8b, 0x33, 0x8b,
	0xea, 0xc6, 0x95, 0x85, 0xc3, 0xf2, 0x3b, 0x27, 0x44, 0x9f, 0xb3, 0x1a, 0x8e, 0x0e, 0x39, 0xcb,
	0x76, 0x6e, 0x4c, 0x78, 0xae, 0xf9, 0x6f, 0x11, 0xa4, 0xac, 0xf5, 0xd7, 0x4b, 0xf6, 0xc7, 0x50,
	0x31, 0xaf, 0x7f, 0x31, 0xa6, 0xcc, 0xeb, 0x27, 0xf4, 0xca, 0xe2, 0x2a, 0xbd, 0x72, 0x71, 0x5d,
	0x9f, 0xe1, 0xf7, 0xa1, 0x4a, 0x87, 0x03, 0xf2, 0x6c, 0x42, 0x5c, 0x93, 0xb0, 0x24, 0xa7, 0x27,
	0xa3, 0x3a, 0x88, 0x7b, 0x0c, 0xad, 0x83, 0x4a, 0x5c, 0x07, 0xc9, 0x4c, 0xf3, 0x37, 0x01, 0x6e,
	0x65, 0x7a, 0x01, 0xba, 0x0b, 0xa5, 0x51, 0x74, 0xf6, 0x05, 0x91, 0xa6, 0x00, 0x6d, 0x56, 0xcf,
	0x43, 0xe2, 0xbb, 0x86, 0xd3, 0x6d, 0x4f, 0x13, 0x3d, 0xd7, 0xac, 0xa6, 0x84, 0x85, 0x79, 0x1a,
	0x7d, 0x02, 0x15, 0xd3, 0x73, 0xc3, 0xe4, 0x4d, 0x5e, 0x9b, 0x7b, 0x11, 0xe9, 0x2a, 0x9e, 0x62,
	0xcd, 0x67, 0x50, 0x8e, 0x1d, 0xe4, 0xf2, 0x2a, 0xbc, 0x44, 0x5e, 0x1f, 0x40, 0xf5, 0xf4, 0x65,
	0xef, 0x7a, 0x9a, 0x6c, 0xbe, 0x00, 0x91, 0x7b, 0x58, 0xd1, 0x67, 0x50, 0xa6, 0xb1, 0x63, 0xdb,
	0x5e, 0xd7, 0x54, 0x63, 0x38, 0x7d, 0xcf, 0x8b, 0xaf, 0x70, 0xcf, 0x9b, 0xbf, 0x0a, 0x50, 0x4b,
	0xbf, 0xcb, 0x48, 0x06, 0x91, 0xed, 0x27, 0x7b, 0xd6, 0xf4, 0x5b, 0xea, 0xdd, 0x85, 0x6f, 0x79,
	0x04, 0x62, 0x5e, 0x85, 0xb6, 0xa0, 0xec, 0x90, 0x73, 0xe2, 0x50, 0x6f, 0x6a, 0x73, 0x9d, 0xb8,
	0x17, 0xad, 0xe1, 0x18, 0x89, 0x2a, 0x91, 0x2d, 0xe8, 0xe4, 0x79, 0x9c, 0xab, 0x15, 0xcc, 0x4f,
	0x35, 0x7f, 0x11, 0x40, 0xe4, 0xde, 0xfe, 0xe8, 0x8b, 0x6b, 0xde, 0xc5, 0xc6, 0xd5, 0x1f, 0x0b,
	0xff, 0xb3, 0x7f, 0x5b, 0x3f, 0x08, 0x20, 0x72, 0x5f, 0x97, 0x68, 0x1d, 0xd6, 0x64, 0xad, 0xdf,
	0xef, 0xea, 0xc3, 0x76, 0x17, 0x2b, 0xb2, 0xae, 0xe1, 0x27, 0xc3, 0xbd, 0x9e, 0x26, 0x1f, 0x48,
	0x05, 0xb4, 0x06, 0x68, 0xb7, 0xdd, 0x1e, 0xea, 0xda, 0xf0, 0x10, 0x6b, 0xb2, 0x32, 0x18, 0xf4,
	0xba, 0x03, 0x5d, 0x12, 0x10, 0x82, 0x1a, 0x9b, 0xef, 0x68, 0xbd, 0x76, 0x57, 0xfd, 0x56, 0x2a,
	0xa2, 0x3b, 0xb0, 0xda, 0xc6, 0xda, 0xe1, 0x70, 0x1f, 0x6b, 0xfd, 0xd9, 0xf4, 0x12, 0x5a, 0x85,
	0x2a, 0xd3, 0x0e, 0x95, 0xef, 0x14, 0x55, 0x97, 0x4a, 0xa8, 0x06, 0xa0, 0x6a, 0x6d, 0x85, 0x8d,
	0xcb, 0x5b, 0x1f, 0x41, 0x99, 0x9e, 0x01, 0xdd, 0x80, 0x52, 0x57, 0xdd, 0xd7, 0xa4, 0x02, 0x12,
	0xa1, 0x72, 0xb4, 0x8b, 0xd5, 0xc8, 0x84, 0x80, 0x56, 0xa0, 0xac, 0x60, 0xac, 0x61, 0xa9, 0xb8,
	0xf5, 0x08, 0xd0, 0x7c, 0x36, 0x23, 0x5a, 0xd3, 0x3b, 0x0a, 0x1e, 0x1e, 0x4a, 0x05, 0x54, 0x85,
	0x15, 0x55, 0x39, 0x62, 0x47, 0x10, 0xe8, 0x66, 0xca, 0xd1, 0xb0, 0xdf, 0x55, 0x1f, 0xeb, 0x8a,
	0x54, 0xdc, 0xea, 0xc1, 0xad, 0x4c, 0xb0, 0x13, 0xb9, 0x1a, 0xef, 0x3c, 0xd0, 0x77, 0xb1, 0xae,
	0xb4, 0x25, 0x21, 0x72, 0x7e, 0xf0, 0x44, 0x95, 0x87, 0xb2, 0xd6, 0x3f, 0xec, 0x29, 0x91, 0x1e,
	0xdd, 0x84, 0x1b, 0x83, 0xce, 0x63, 0xbd, 0xad, 0x1d, 0xa9, 0xd2, 0xd2, 0xde, 0xee, 0x1f, 0x97,
	0x0d, 0xe1, 0xcf, 0xcb, 0x86, 0xf0, 0xf7, 0x65, 0x43, 0xf8, 0xf9, 0x9f, 0x46, 0x01, 0x36, 0x4d,
	0x6f, 0xdc, 0x8a, 0x7f, 0xd6, 0xb0, 0x3f, 0x56, 0x3a, 0x5f, 0xdf, 0xa7, 0x7f, 0xe0, 0x1c, 0x2f,
	0xd3, 0xa2, 0xff, 0xf4, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xe8, 0xf6, 0x5d, 0x21, 0x0d,
	0x00, 0x00,
}

func (m *FactomEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FactomEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventSource != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.EventSource))
	}
	if m.IdentityChainID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.IdentityChainID.Size()))
		n1, err1 := m.IdentityChainID.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.Value != nil {
		nn2, err2 := m.Value.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FactomEvent_AnchorEvent) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AnchorEvent != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.AnchorEvent.Size()))
		n3, err3 := m.AnchorEvent.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}
func (m *FactomEvent_CommitChain) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CommitChain != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.CommitChain.Size()))
		n4, err4 := m.CommitChain.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	return i, nil
}
func (m *FactomEvent_CommitEntry) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CommitEntry != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.CommitEntry.Size()))
		n5, err5 := m.CommitEntry.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	return i, nil
}
func (m *FactomEvent_RevealEntry) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RevealEntry != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.RevealEntry.Size()))
		n6, err6 := m.RevealEntry.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	return i, nil
}
func (m *FactomEvent_ProcessEvent) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ProcessEvent != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.ProcessEvent.Size()))
		n7, err7 := m.ProcessEvent.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	return i, nil
}
func (m *FactomEvent_NodeEvent) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.NodeEvent != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.NodeEvent.Size()))
		n8, err8 := m.NodeEvent.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	return i, nil
}
func (m *AnchoredEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchoredEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DirectoryBlock != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.DirectoryBlock.Size()))
		n9, err9 := m.DirectoryBlock.MarshalTo(dAtA[i:])
		if err9 != nil {
			return 0, err9
		}
		i += n9
	}
	if m.AdminBlock != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.AdminBlock.Size()))
		n10, err10 := m.AdminBlock.MarshalTo(dAtA[i:])
		if err10 != nil {
			return 0, err10
		}
		i += n10
	}
	if m.FactoidBlock != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.FactoidBlock.Size()))
		n11, err11 := m.FactoidBlock.MarshalTo(dAtA[i:])
		if err11 != nil {
			return 0, err11
		}
		i += n11
	}
	if m.EntryCreditBlock != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.EntryCreditBlock.Size()))
		n12, err12 := m.EntryCreditBlock.MarshalTo(dAtA[i:])
		if err12 != nil {
			return 0, err12
		}
		i += n12
	}
	if len(m.EntryBlocks) > 0 {
		for _, msg := range m.EntryBlocks {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintFactomEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.EntryBlockEntries) > 0 {
		for _, msg := range m.EntryBlockEntries {
			dAtA[i] = 0x32
			i++
			i = encodeVarintFactomEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DirectoryBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.Header.Size()))
		n13, err13 := m.Header.MarshalTo(dAtA[i:])
		if err13 != nil {
			return 0, err13
		}
		i += n13
	}
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFactomEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DirectoryBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BodyMerkleRoot != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.BodyMerkleRoot.Size()))
		n14, err14 := m.BodyMerkleRoot.MarshalTo(dAtA[i:])
		if err14 != nil {
			return 0, err14
		}
		i += n14
	}
	if m.PreviousKeyMerkleRoot != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.PreviousKeyMerkleRoot.Size()))
		n15, err15 := m.PreviousKeyMerkleRoot.MarshalTo(dAtA[i:])
		if err15 != nil {
			return 0, err15
		}
		i += n15
	}
	if m.PreviousFullHash != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.PreviousFullHash.Size()))
		n16, err16 := m.PreviousFullHash.MarshalTo(dAtA[i:])
		if err16 != nil {
			return 0, err16
		}
		i += n16
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.Timestamp.Size()))
		n17, err17 := m.Timestamp.MarshalTo(dAtA[i:])
		if err17 != nil {
			return 0, err17
		}
		i += n17
	}
	if m.BlockHeight != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.BlockHeight))
	}
	if m.BlockCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.BlockCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EntryBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EntryBlockHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.EntryBlockHeader.Size()))
		n18, err18 := m.EntryBlockHeader.MarshalTo(dAtA[i:])
		if err18 != nil {
			return 0, err18
		}
		i += n18
	}
	if len(m.EntryHashes) > 0 {
		for _, msg := range m.EntryHashes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFactomEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EntryBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BodyMerkleRoot != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.BodyMerkleRoot.Size()))
		n19, err19 := m.BodyMerkleRoot.MarshalTo(dAtA[i:])
		if err19 != nil {
			return 0, err19
		}
		i += n19
	}
	if m.ChainID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.ChainID.Size()))
		n20, err20 := m.ChainID.MarshalTo(dAtA[i:])
		if err20 != nil {
			return 0, err20
		}
		i += n20
	}
	if m.PreviousFullHash != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.PreviousFullHash.Size()))
		n21, err21 := m.PreviousFullHash.MarshalTo(dAtA[i:])
		if err21 != nil {
			return 0, err21
		}
		i += n21
	}
	if m.PreviousKeyMerkleRoot != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.PreviousKeyMerkleRoot.Size()))
		n22, err22 := m.PreviousKeyMerkleRoot.MarshalTo(dAtA[i:])
		if err22 != nil {
			return 0, err22
		}
		i += n22
	}
	if m.BlockHeight != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.BlockHeight))
	}
	if m.BlockSequence != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.BlockSequence))
	}
	if m.EntryCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.EntryCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EntryBlockEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryBlockEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hash != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.Hash.Size()))
		n23, err23 := m.Hash.MarshalTo(dAtA[i:])
		if err23 != nil {
			return 0, err23
		}
		i += n23
	}
	if len(m.ExternalIDs) > 0 {
		for _, msg := range m.ExternalIDs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFactomEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Content != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.Content.Size()))
		n24, err24 := m.Content.MarshalTo(dAtA[i:])
		if err24 != nil {
			return 0, err24
		}
		i += n24
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChainID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.ChainID.Size()))
		n25, err25 := m.ChainID.MarshalTo(dAtA[i:])
		if err25 != nil {
			return 0, err25
		}
		i += n25
	}
	if m.KeyMerkleRoot != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.KeyMerkleRoot.Size()))
		n26, err26 := m.KeyMerkleRoot.MarshalTo(dAtA[i:])
		if err26 != nil {
			return 0, err26
		}
		i += n26
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RevealEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevealEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.Entry.Size()))
		n27, err27 := m.Entry.MarshalTo(dAtA[i:])
		if err27 != nil {
			return 0, err27
		}
		i += n27
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.Timestamp.Size()))
		n28, err28 := m.Timestamp.MarshalTo(dAtA[i:])
		if err28 != nil {
			return 0, err28
		}
		i += n28
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ProcessMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MessageCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.MessageCode))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.Level))
	}
	if len(m.MessageText) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(len(m.MessageText)))
		i += copy(dAtA[i:], m.MessageText)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NodeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MessageCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.MessageCode))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(m.Level))
	}
	if len(m.MessageText) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFactomEvents(dAtA, i, uint64(len(m.MessageText)))
		i += copy(dAtA[i:], m.MessageText)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintFactomEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FactomEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventSource != 0 {
		n += 1 + sovFactomEvents(uint64(m.EventSource))
	}
	if m.IdentityChainID != nil {
		l = m.IdentityChainID.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FactomEvent_AnchorEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnchorEvent != nil {
		l = m.AnchorEvent.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	return n
}
func (m *FactomEvent_CommitChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitChain != nil {
		l = m.CommitChain.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	return n
}
func (m *FactomEvent_CommitEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitEntry != nil {
		l = m.CommitEntry.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	return n
}
func (m *FactomEvent_RevealEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RevealEntry != nil {
		l = m.RevealEntry.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	return n
}
func (m *FactomEvent_ProcessEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProcessEvent != nil {
		l = m.ProcessEvent.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	return n
}
func (m *FactomEvent_NodeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeEvent != nil {
		l = m.NodeEvent.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	return n
}
func (m *AnchoredEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectoryBlock != nil {
		l = m.DirectoryBlock.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.AdminBlock != nil {
		l = m.AdminBlock.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.FactoidBlock != nil {
		l = m.FactoidBlock.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.EntryCreditBlock != nil {
		l = m.EntryCreditBlock.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if len(m.EntryBlocks) > 0 {
		for _, e := range m.EntryBlocks {
			l = e.Size()
			n += 1 + l + sovFactomEvents(uint64(l))
		}
	}
	if len(m.EntryBlockEntries) > 0 {
		for _, e := range m.EntryBlockEntries {
			l = e.Size()
			n += 1 + l + sovFactomEvents(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovFactomEvents(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BodyMerkleRoot != nil {
		l = m.BodyMerkleRoot.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.PreviousKeyMerkleRoot != nil {
		l = m.PreviousKeyMerkleRoot.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.PreviousFullHash != nil {
		l = m.PreviousFullHash.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovFactomEvents(uint64(m.BlockHeight))
	}
	if m.BlockCount != 0 {
		n += 1 + sovFactomEvents(uint64(m.BlockCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EntryBlockHeader != nil {
		l = m.EntryBlockHeader.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if len(m.EntryHashes) > 0 {
		for _, e := range m.EntryHashes {
			l = e.Size()
			n += 1 + l + sovFactomEvents(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BodyMerkleRoot != nil {
		l = m.BodyMerkleRoot.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.ChainID != nil {
		l = m.ChainID.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.PreviousFullHash != nil {
		l = m.PreviousFullHash.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.PreviousKeyMerkleRoot != nil {
		l = m.PreviousKeyMerkleRoot.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovFactomEvents(uint64(m.BlockHeight))
	}
	if m.BlockSequence != 0 {
		n += 1 + sovFactomEvents(uint64(m.BlockSequence))
	}
	if m.EntryCount != 0 {
		n += 1 + sovFactomEvents(uint64(m.EntryCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryBlockEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		l = m.Hash.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if len(m.ExternalIDs) > 0 {
		for _, e := range m.ExternalIDs {
			l = e.Size()
			n += 1 + l + sovFactomEvents(uint64(l))
		}
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainID != nil {
		l = m.ChainID.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.KeyMerkleRoot != nil {
		l = m.KeyMerkleRoot.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RevealEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageCode != 0 {
		n += 1 + sovFactomEvents(uint64(m.MessageCode))
	}
	if m.Level != 0 {
		n += 1 + sovFactomEvents(uint64(m.Level))
	}
	l = len(m.MessageText)
	if l > 0 {
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageCode != 0 {
		n += 1 + sovFactomEvents(uint64(m.MessageCode))
	}
	if m.Level != 0 {
		n += 1 + sovFactomEvents(uint64(m.Level))
	}
	l = len(m.MessageText)
	if l > 0 {
		n += 1 + l + sovFactomEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFactomEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFactomEvents(x uint64) (n int) {
	return sovFactomEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FactomEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactomEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FactomEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FactomEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventSource", wireType)
			}
			m.EventSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventSource |= EventSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdentityChainID == nil {
				m.IdentityChainID = &Hash{}
			}
			if err := m.IdentityChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AnchoredEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FactomEvent_AnchorEvent{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommitChain{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FactomEvent_CommitChain{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CommitEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FactomEvent_CommitEntry{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RevealEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FactomEvent_RevealEntry{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProcessMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FactomEvent_ProcessEvent{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &FactomEvent_NodeEvent{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactomEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchoredEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactomEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchoredEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchoredEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DirectoryBlock == nil {
				m.DirectoryBlock = &DirectoryBlock{}
			}
			if err := m.DirectoryBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminBlock == nil {
				m.AdminBlock = &AdminBlock{}
			}
			if err := m.AdminBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoidBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FactoidBlock == nil {
				m.FactoidBlock = &FactoidBlock{}
			}
			if err := m.FactoidBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryCreditBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryCreditBlock == nil {
				m.EntryCreditBlock = &EntryCreditBlock{}
			}
			if err := m.EntryCreditBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryBlocks = append(m.EntryBlocks, &EntryBlock{})
			if err := m.EntryBlocks[len(m.EntryBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryBlockEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryBlockEntries = append(m.EntryBlockEntries, &EntryBlockEntry{})
			if err := m.EntryBlockEntries[len(m.EntryBlockEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactomEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactomEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &DirectoryBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactomEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactomEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyMerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BodyMerkleRoot == nil {
				m.BodyMerkleRoot = &Hash{}
			}
			if err := m.BodyMerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousKeyMerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousKeyMerkleRoot == nil {
				m.PreviousKeyMerkleRoot = &Hash{}
			}
			if err := m.PreviousKeyMerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousFullHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousFullHash == nil {
				m.PreviousFullHash = &Hash{}
			}
			if err := m.PreviousFullHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCount", wireType)
			}
			m.BlockCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFactomEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactomEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryBlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryBlockHeader == nil {
				m.EntryBlockHeader = &EntryBlockHeader{}
			}
			if err := m.EntryBlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryHashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryHashes = append(m.EntryHashes, &Hash{})
			if err := m.EntryHashes[len(m.EntryHashes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactomEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactomEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyMerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BodyMerkleRoot == nil {
				m.BodyMerkleRoot = &Hash{}
			}
			if err := m.BodyMerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainID == nil {
				m.ChainID = &Hash{}
			}
			if err := m.ChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousFullHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousFullHash == nil {
				m.PreviousFullHash = &Hash{}
			}
			if err := m.PreviousFullHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousKeyMerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousKeyMerkleRoot == nil {
				m.PreviousKeyMerkleRoot = &Hash{}
			}
			if err := m.PreviousKeyMerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSequence", wireType)
			}
			m.BlockSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSequence |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryCount", wireType)
			}
			m.EntryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFactomEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryBlockEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactomEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryBlockEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryBlockEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hash == nil {
				m.Hash = &Hash{}
			}
			if err := m.Hash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIDs = append(m.ExternalIDs, &ExternalId{})
			if err := m.ExternalIDs[len(m.ExternalIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactomEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactomEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainID == nil {
				m.ChainID = &Hash{}
			}
			if err := m.ChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyMerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyMerkleRoot == nil {
				m.KeyMerkleRoot = &Hash{}
			}
			if err := m.KeyMerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactomEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevealEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactomEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevealEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevealEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &EntryBlockEntry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactomEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactomEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageCode", wireType)
			}
			m.MessageCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageCode |= ProcessMessageCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactomEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactomEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageCode", wireType)
			}
			m.MessageCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageCode |= NodeMessageCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFactomEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactomEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactomEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFactomEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFactomEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFactomEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFactomEvents
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFactomEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFactomEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFactomEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFactomEvents
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFactomEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFactomEvents   = fmt.Errorf("proto: integer overflow")
)
