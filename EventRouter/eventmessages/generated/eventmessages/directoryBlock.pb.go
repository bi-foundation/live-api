// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventmessages/directoryBlock.proto

package eventmessages

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/bi-foundation/protobuf-graphql-extension/graphqlproto"
	types "github.com/bi-foundation/protobuf-graphql-extension/graphqlproto/types"
	github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars "github.com/bi-foundation/protobuf-graphql-extension/plugin/graphql/scalars"
	proto "github.com/gogo/protobuf/proto"
	github_com_graphql_go_graphql "github.com/graphql-go/graphql"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ====  DIRECTORY BLOCK DETAILS =====
type DirectoryBlock struct {
	Header               *DirectoryBlockHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Entries              []*DirectoryBlockEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *DirectoryBlock) Reset()         { *m = DirectoryBlock{} }
func (m *DirectoryBlock) String() string { return proto.CompactTextString(m) }
func (*DirectoryBlock) ProtoMessage()    {}
func (*DirectoryBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_470a6f1df5755130, []int{0}
}
func (m *DirectoryBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryBlock.Merge(m, src)
}
func (m *DirectoryBlock) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryBlock.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryBlock proto.InternalMessageInfo

func (m *DirectoryBlock) GetHeader() *DirectoryBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DirectoryBlock) GetEntries() []*DirectoryBlockEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type DirectoryBlockHeader struct {
	BodyMerkleRoot        []byte           `protobuf:"bytes,1,opt,name=bodyMerkleRoot,proto3" json:"bodyMerkleRoot,omitempty"`
	PreviousKeyMerkleRoot []byte           `protobuf:"bytes,2,opt,name=previousKeyMerkleRoot,proto3" json:"previousKeyMerkleRoot,omitempty"`
	PreviousFullHash      []byte           `protobuf:"bytes,3,opt,name=previousFullHash,proto3" json:"previousFullHash,omitempty"`
	Timestamp             *types.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BlockHeight           uint32           `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	BlockCount            uint32           `protobuf:"varint,6,opt,name=blockCount,proto3" json:"blockCount,omitempty"`
	Version               uint32           `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	NetworkID             uint32           `protobuf:"varint,8,opt,name=networkID,proto3" json:"networkID,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}         `json:"-"`
	XXX_unrecognized      []byte           `json:"-"`
	XXX_sizecache         int32            `json:"-"`
}

func (m *DirectoryBlockHeader) Reset()         { *m = DirectoryBlockHeader{} }
func (m *DirectoryBlockHeader) String() string { return proto.CompactTextString(m) }
func (*DirectoryBlockHeader) ProtoMessage()    {}
func (*DirectoryBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_470a6f1df5755130, []int{1}
}
func (m *DirectoryBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryBlockHeader.Merge(m, src)
}
func (m *DirectoryBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryBlockHeader proto.InternalMessageInfo

func (m *DirectoryBlockHeader) GetBodyMerkleRoot() []byte {
	if m != nil {
		return m.BodyMerkleRoot
	}
	return nil
}

func (m *DirectoryBlockHeader) GetPreviousKeyMerkleRoot() []byte {
	if m != nil {
		return m.PreviousKeyMerkleRoot
	}
	return nil
}

func (m *DirectoryBlockHeader) GetPreviousFullHash() []byte {
	if m != nil {
		return m.PreviousFullHash
	}
	return nil
}

func (m *DirectoryBlockHeader) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *DirectoryBlockHeader) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *DirectoryBlockHeader) GetBlockCount() uint32 {
	if m != nil {
		return m.BlockCount
	}
	return 0
}

func (m *DirectoryBlockHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DirectoryBlockHeader) GetNetworkID() uint32 {
	if m != nil {
		return m.NetworkID
	}
	return 0
}

type DirectoryBlockEntry struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	KeyMerkleRoot        []byte   `protobuf:"bytes,2,opt,name=keyMerkleRoot,proto3" json:"keyMerkleRoot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectoryBlockEntry) Reset()         { *m = DirectoryBlockEntry{} }
func (m *DirectoryBlockEntry) String() string { return proto.CompactTextString(m) }
func (*DirectoryBlockEntry) ProtoMessage()    {}
func (*DirectoryBlockEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_470a6f1df5755130, []int{2}
}
func (m *DirectoryBlockEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryBlockEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryBlockEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryBlockEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryBlockEntry.Merge(m, src)
}
func (m *DirectoryBlockEntry) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryBlockEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryBlockEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryBlockEntry proto.InternalMessageInfo

func (m *DirectoryBlockEntry) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *DirectoryBlockEntry) GetKeyMerkleRoot() []byte {
	if m != nil {
		return m.KeyMerkleRoot
	}
	return nil
}

func init() {
	proto.RegisterType((*DirectoryBlock)(nil), "eventmessages.DirectoryBlock")
	proto.RegisterType((*DirectoryBlockHeader)(nil), "eventmessages.DirectoryBlockHeader")
	proto.RegisterType((*DirectoryBlockEntry)(nil), "eventmessages.DirectoryBlockEntry")
}

func init() { proto.RegisterFile("eventmessages/directoryBlock.proto", fileDescriptor_470a6f1df5755130) }

var fileDescriptor_470a6f1df5755130 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xbd, 0x8e, 0xd3, 0x40,
	0x14, 0x85, 0x35, 0x59, 0x48, 0xd8, 0x1b, 0xb2, 0x42, 0x03, 0x48, 0xa3, 0x15, 0x18, 0xcb, 0x20,
	0x14, 0x21, 0xc5, 0x91, 0x16, 0xba, 0xa5, 0x5a, 0x02, 0xda, 0x15, 0x5a, 0x0a, 0x0b, 0x28, 0xe8,
	0xfc, 0x73, 0x13, 0x8f, 0x62, 0xcf, 0x98, 0x99, 0x71, 0x20, 0xcf, 0xc0, 0x5b, 0x50, 0xf1, 0x08,
	0x94, 0x94, 0x94, 0x74, 0xb4, 0xe0, 0xa7, 0xa0, 0x44, 0x99, 0xc4, 0x9b, 0x18, 0x2c, 0x1a, 0xaa,
	0xe8, 0x9e, 0xf3, 0xdd, 0xa3, 0xdc, 0x63, 0x1b, 0x3c, 0x5c, 0xa0, 0x30, 0x39, 0x6a, 0x1d, 0xce,
	0x50, 0x8f, 0x13, 0xae, 0x30, 0x36, 0x52, 0x2d, 0x4f, 0x32, 0x19, 0xcf, 0xfd, 0x42, 0x49, 0x23,
	0xe9, 0xa0, 0xc1, 0x1c, 0xbe, 0x98, 0x71, 0x93, 0x96, 0x91, 0x1f, 0xcb, 0x7c, 0x1c, 0xf1, 0xd1,
	0x54, 0x96, 0x22, 0x09, 0x0d, 0x97, 0x62, 0x6c, 0xf1, 0xa8, 0x9c, 0x8e, 0x66, 0x2a, 0x2c, 0xd2,
	0xb7, 0xd9, 0x08, 0xdf, 0x1b, 0x14, 0x7a, 0x65, 0x6d, 0x14, 0x4b, 0xd4, 0xc3, 0x3a, 0xfe, 0xf0,
	0xf5, 0x7f, 0xe7, 0x99, 0x65, 0x81, 0x7a, 0x6c, 0x78, 0x8e, 0xda, 0x84, 0x79, 0xb1, 0xce, 0xf5,
	0x3e, 0x10, 0x38, 0x98, 0x34, 0xee, 0xa1, 0xc7, 0xd0, 0x4d, 0x31, 0x4c, 0x50, 0x31, 0xe2, 0x92,
	0x61, 0xff, 0xe8, 0xae, 0xdf, 0x38, 0xcd, 0x6f, 0xe2, 0xa7, 0x16, 0x0d, 0x36, 0x2b, 0xf4, 0x31,
	0xf4, 0x50, 0x18, 0xc5, 0x51, 0xb3, 0x8e, 0xbb, 0x37, 0xec, 0x1f, 0x79, 0xff, 0xdc, 0x7e, 0x2a,
	0x8c, 0x5a, 0x06, 0xf5, 0x8a, 0xf7, 0xbd, 0x03, 0x37, 0xda, 0xe2, 0xe9, 0x7d, 0x38, 0x88, 0x64,
	0xb2, 0x3c, 0x47, 0x35, 0xcf, 0x30, 0x90, 0xd2, 0xd8, 0xff, 0x76, 0x35, 0xf8, 0x43, 0xa5, 0x8f,
	0xe0, 0x66, 0xa1, 0x70, 0xc1, 0x65, 0xa9, 0x9f, 0xe3, 0x2e, 0xde, 0xb1, 0x78, 0xbb, 0x49, 0x1f,
	0xc0, 0xb5, 0xda, 0x78, 0x56, 0x66, 0xd9, 0x69, 0xa8, 0x53, 0xb6, 0x67, 0x17, 0xfe, 0xd2, 0xe9,
	0x31, 0xec, 0x5f, 0x74, 0xc8, 0x2e, 0xd9, 0x82, 0x6e, 0xfb, 0xbb, 0x45, 0xfb, 0xb6, 0x68, 0xff,
	0x65, 0x0d, 0x05, 0x5b, 0x9e, 0xba, 0xd0, 0x8f, 0xd6, 0x57, 0xf1, 0x59, 0x6a, 0xd8, 0x65, 0x97,
	0x0c, 0x07, 0xc1, 0xae, 0x44, 0x1d, 0x00, 0x3b, 0x3e, 0x91, 0xa5, 0x30, 0xac, 0x6b, 0x81, 0x1d,
	0x85, 0x32, 0xe8, 0x2d, 0x50, 0xad, 0x9e, 0x2e, 0xeb, 0x59, 0xb3, 0x1e, 0xe9, 0x2d, 0xd8, 0x17,
	0x68, 0xde, 0x49, 0x35, 0x3f, 0x9b, 0xb0, 0x2b, 0xd6, 0xdb, 0x0a, 0xde, 0x2b, 0xb8, 0xde, 0xd2,
	0xfc, 0x2a, 0x2e, 0x4e, 0x43, 0x2e, 0xce, 0x26, 0x9b, 0x42, 0xeb, 0x91, 0xde, 0x83, 0xc1, 0xbc,
	0xa5, 0xc1, 0xa6, 0x78, 0x72, 0xfe, 0xeb, 0xa7, 0x43, 0x3e, 0x55, 0x0e, 0xf9, 0x5c, 0x39, 0xe4,
	0x6b, 0xe5, 0x90, 0x6f, 0x95, 0x43, 0x7e, 0x54, 0x0e, 0xf9, 0xf2, 0xf1, 0x0e, 0x01, 0x37, 0x96,
	0xb9, 0x3f, 0x0d, 0x63, 0x73, 0xf1, 0x93, 0x34, 0xdf, 0x86, 0x37, 0xcd, 0xaf, 0x26, 0xea, 0xda,
	0x06, 0x1f, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x04, 0xc5, 0x8b, 0xec, 0x71, 0x03, 0x00, 0x00,
}

func (this *DirectoryBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DirectoryBlock)
	if !ok {
		that2, ok := that.(DirectoryBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DirectoryBlockHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DirectoryBlockHeader)
	if !ok {
		that2, ok := that.(DirectoryBlockHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BodyMerkleRoot, that1.BodyMerkleRoot) {
		return false
	}
	if !bytes.Equal(this.PreviousKeyMerkleRoot, that1.PreviousKeyMerkleRoot) {
		return false
	}
	if !bytes.Equal(this.PreviousFullHash, that1.PreviousFullHash) {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if this.BlockCount != that1.BlockCount {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.NetworkID != that1.NetworkID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DirectoryBlockEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DirectoryBlockEntry)
	if !ok {
		that2, ok := that.(DirectoryBlockEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ChainID, that1.ChainID) {
		return false
	}
	if !bytes.Equal(this.KeyMerkleRoot, that1.KeyMerkleRoot) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type DirectoryBlockGetter interface {
	GetDirectoryBlock() *DirectoryBlock
}

var GraphQLDirectoryBlockType *github_com_graphql_go_graphql.Object

type DirectoryBlockHeaderGetter interface {
	GetDirectoryBlockHeader() *DirectoryBlockHeader
}

var GraphQLDirectoryBlockHeaderType *github_com_graphql_go_graphql.Object

type DirectoryBlockEntryGetter interface {
	GetDirectoryBlockEntry() *DirectoryBlockEntry
}

var GraphQLDirectoryBlockEntryType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLDirectoryBlockType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "DirectoryBlock",
		Description: "====  DIRECTORY BLOCK DETAILS =====",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"header": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLDirectoryBlockHeaderType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlock)
						if ok {
							if obj.Header == nil {
								return nil, nil
							}
							return obj.GetHeader(), nil
						}
						inter, ok := p.Source.(DirectoryBlockGetter)
						if ok {
							face := inter.GetDirectoryBlock()
							if face == nil {
								return nil, nil
							}
							if face.Header == nil {
								return nil, nil
							}
							return face.GetHeader(), nil
						}
						return nil, fmt.Errorf("field header not resolved")
					},
				},
				"entries": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLDirectoryBlockEntryType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlock)
						if ok {
							return obj.Entries, nil
						}
						inter, ok := p.Source.(DirectoryBlockGetter)
						if ok {
							face := inter.GetDirectoryBlock()
							if face == nil {
								return nil, nil
							}
							return face.Entries, nil
						}
						return nil, fmt.Errorf("field entries not resolved")
					},
				},
			}
		}),
	})
	GraphQLDirectoryBlockHeaderType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "DirectoryBlockHeader",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"bodyMerkleRoot": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlockHeader)
						if ok {
							return obj.BodyMerkleRoot, nil
						}
						inter, ok := p.Source.(DirectoryBlockHeaderGetter)
						if ok {
							face := inter.GetDirectoryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.BodyMerkleRoot, nil
						}
						return nil, fmt.Errorf("field bodyMerkleRoot not resolved")
					},
				},
				"previousKeyMerkleRoot": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlockHeader)
						if ok {
							return obj.PreviousKeyMerkleRoot, nil
						}
						inter, ok := p.Source.(DirectoryBlockHeaderGetter)
						if ok {
							face := inter.GetDirectoryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.PreviousKeyMerkleRoot, nil
						}
						return nil, fmt.Errorf("field previousKeyMerkleRoot not resolved")
					},
				},
				"previousFullHash": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlockHeader)
						if ok {
							return obj.PreviousFullHash, nil
						}
						inter, ok := p.Source.(DirectoryBlockHeaderGetter)
						if ok {
							face := inter.GetDirectoryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.PreviousFullHash, nil
						}
						return nil, fmt.Errorf("field previousFullHash not resolved")
					},
				},
				"timestamp": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.Timestamp,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlockHeader)
						if ok {
							if obj.Timestamp == nil {
								return nil, nil
							}
							return obj.GetTimestamp(), nil
						}
						inter, ok := p.Source.(DirectoryBlockHeaderGetter)
						if ok {
							face := inter.GetDirectoryBlockHeader()
							if face == nil {
								return nil, nil
							}
							if face.Timestamp == nil {
								return nil, nil
							}
							return face.GetTimestamp(), nil
						}
						return nil, fmt.Errorf("field timestamp not resolved")
					},
				},
				"blockHeight": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlockHeader)
						if ok {
							return obj.BlockHeight, nil
						}
						inter, ok := p.Source.(DirectoryBlockHeaderGetter)
						if ok {
							face := inter.GetDirectoryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.BlockHeight, nil
						}
						return nil, fmt.Errorf("field blockHeight not resolved")
					},
				},
				"blockCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlockHeader)
						if ok {
							return obj.BlockCount, nil
						}
						inter, ok := p.Source.(DirectoryBlockHeaderGetter)
						if ok {
							face := inter.GetDirectoryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.BlockCount, nil
						}
						return nil, fmt.Errorf("field blockCount not resolved")
					},
				},
				"version": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlockHeader)
						if ok {
							return obj.Version, nil
						}
						inter, ok := p.Source.(DirectoryBlockHeaderGetter)
						if ok {
							face := inter.GetDirectoryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.Version, nil
						}
						return nil, fmt.Errorf("field version not resolved")
					},
				},
				"networkID": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlockHeader)
						if ok {
							return obj.NetworkID, nil
						}
						inter, ok := p.Source.(DirectoryBlockHeaderGetter)
						if ok {
							face := inter.GetDirectoryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.NetworkID, nil
						}
						return nil, fmt.Errorf("field networkID not resolved")
					},
				},
			}
		}),
	})
	GraphQLDirectoryBlockEntryType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "DirectoryBlockEntry",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"chainID": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlockEntry)
						if ok {
							return obj.ChainID, nil
						}
						inter, ok := p.Source.(DirectoryBlockEntryGetter)
						if ok {
							face := inter.GetDirectoryBlockEntry()
							if face == nil {
								return nil, nil
							}
							return face.ChainID, nil
						}
						return nil, fmt.Errorf("field chainID not resolved")
					},
				},
				"keyMerkleRoot": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*DirectoryBlockEntry)
						if ok {
							return obj.KeyMerkleRoot, nil
						}
						inter, ok := p.Source.(DirectoryBlockEntryGetter)
						if ok {
							face := inter.GetDirectoryBlockEntry()
							if face == nil {
								return nil, nil
							}
							return face.KeyMerkleRoot, nil
						}
						return nil, fmt.Errorf("field keyMerkleRoot not resolved")
					},
				},
			}
		}),
	})
}
func (m *DirectoryBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDirectoryBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectoryBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NetworkID != 0 {
		i = encodeVarintDirectoryBlock(dAtA, i, uint64(m.NetworkID))
		i--
		dAtA[i] = 0x40
	}
	if m.Version != 0 {
		i = encodeVarintDirectoryBlock(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockCount != 0 {
		i = encodeVarintDirectoryBlock(dAtA, i, uint64(m.BlockCount))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockHeight != 0 {
		i = encodeVarintDirectoryBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectoryBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PreviousFullHash) > 0 {
		i -= len(m.PreviousFullHash)
		copy(dAtA[i:], m.PreviousFullHash)
		i = encodeVarintDirectoryBlock(dAtA, i, uint64(len(m.PreviousFullHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PreviousKeyMerkleRoot) > 0 {
		i -= len(m.PreviousKeyMerkleRoot)
		copy(dAtA[i:], m.PreviousKeyMerkleRoot)
		i = encodeVarintDirectoryBlock(dAtA, i, uint64(len(m.PreviousKeyMerkleRoot)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BodyMerkleRoot) > 0 {
		i -= len(m.BodyMerkleRoot)
		copy(dAtA[i:], m.BodyMerkleRoot)
		i = encodeVarintDirectoryBlock(dAtA, i, uint64(len(m.BodyMerkleRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryBlockEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryBlockEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryBlockEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyMerkleRoot) > 0 {
		i -= len(m.KeyMerkleRoot)
		copy(dAtA[i:], m.KeyMerkleRoot)
		i = encodeVarintDirectoryBlock(dAtA, i, uint64(len(m.KeyMerkleRoot)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintDirectoryBlock(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDirectoryBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovDirectoryBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedDirectoryBlock(r randyDirectoryBlock, easy bool) *DirectoryBlock {
	this := &DirectoryBlock{}
	if r.Intn(5) != 0 {
		this.Header = NewPopulatedDirectoryBlockHeader(r, easy)
	}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Entries = make([]*DirectoryBlockEntry, v1)
		for i := 0; i < v1; i++ {
			this.Entries[i] = NewPopulatedDirectoryBlockEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDirectoryBlock(r, 3)
	}
	return this
}

func NewPopulatedDirectoryBlockHeader(r randyDirectoryBlock, easy bool) *DirectoryBlockHeader {
	this := &DirectoryBlockHeader{}
	v2 := r.Intn(100)
	this.BodyMerkleRoot = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.BodyMerkleRoot[i] = byte(r.Intn(256))
	}
	v3 := r.Intn(100)
	this.PreviousKeyMerkleRoot = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.PreviousKeyMerkleRoot[i] = byte(r.Intn(256))
	}
	v4 := r.Intn(100)
	this.PreviousFullHash = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.PreviousFullHash[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.Timestamp = types.NewPopulatedTimestamp(r, easy)
	}
	this.BlockHeight = uint32(r.Uint32())
	this.BlockCount = uint32(r.Uint32())
	this.Version = uint32(r.Uint32())
	this.NetworkID = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDirectoryBlock(r, 9)
	}
	return this
}

func NewPopulatedDirectoryBlockEntry(r randyDirectoryBlock, easy bool) *DirectoryBlockEntry {
	this := &DirectoryBlockEntry{}
	v5 := r.Intn(100)
	this.ChainID = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.ChainID[i] = byte(r.Intn(256))
	}
	v6 := r.Intn(100)
	this.KeyMerkleRoot = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.KeyMerkleRoot[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDirectoryBlock(r, 3)
	}
	return this
}

type randyDirectoryBlock interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDirectoryBlock(r randyDirectoryBlock) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDirectoryBlock(r randyDirectoryBlock) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneDirectoryBlock(r)
	}
	return string(tmps)
}
func randUnrecognizedDirectoryBlock(r randyDirectoryBlock, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDirectoryBlock(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDirectoryBlock(dAtA []byte, r randyDirectoryBlock, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDirectoryBlock(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateDirectoryBlock(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateDirectoryBlock(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDirectoryBlock(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDirectoryBlock(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDirectoryBlock(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDirectoryBlock(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *DirectoryBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovDirectoryBlock(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovDirectoryBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BodyMerkleRoot)
	if l > 0 {
		n += 1 + l + sovDirectoryBlock(uint64(l))
	}
	l = len(m.PreviousKeyMerkleRoot)
	if l > 0 {
		n += 1 + l + sovDirectoryBlock(uint64(l))
	}
	l = len(m.PreviousFullHash)
	if l > 0 {
		n += 1 + l + sovDirectoryBlock(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovDirectoryBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovDirectoryBlock(uint64(m.BlockHeight))
	}
	if m.BlockCount != 0 {
		n += 1 + sovDirectoryBlock(uint64(m.BlockCount))
	}
	if m.Version != 0 {
		n += 1 + sovDirectoryBlock(uint64(m.Version))
	}
	if m.NetworkID != 0 {
		n += 1 + sovDirectoryBlock(uint64(m.NetworkID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryBlockEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovDirectoryBlock(uint64(l))
	}
	l = len(m.KeyMerkleRoot)
	if l > 0 {
		n += 1 + l + sovDirectoryBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDirectoryBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDirectoryBlock(x uint64) (n int) {
	return sovDirectoryBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DirectoryBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectoryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &DirectoryBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &DirectoryBlockEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectoryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectoryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyMerkleRoot = append(m.BodyMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyMerkleRoot == nil {
				m.BodyMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousKeyMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousKeyMerkleRoot = append(m.PreviousKeyMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousKeyMerkleRoot == nil {
				m.PreviousKeyMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousFullHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousFullHash = append(m.PreviousFullHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousFullHash == nil {
				m.PreviousFullHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCount", wireType)
			}
			m.BlockCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkID", wireType)
			}
			m.NetworkID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDirectoryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryBlockEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectoryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryBlockEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryBlockEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyMerkleRoot = append(m.KeyMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyMerkleRoot == nil {
				m.KeyMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectoryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDirectoryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDirectoryBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDirectoryBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDirectoryBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDirectoryBlock
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDirectoryBlock
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDirectoryBlock
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDirectoryBlock(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDirectoryBlock
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDirectoryBlock = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDirectoryBlock   = fmt.Errorf("proto: integer overflow")
)
