// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventmessages/entryBlock.proto

package eventmessages

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/bi-foundation/protobuf-graphql-extension/graphqlproto"
	github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars "github.com/bi-foundation/protobuf-graphql-extension/plugin/graphql/scalars"
	proto "github.com/gogo/protobuf/proto"
	github_com_graphql_go_graphql "github.com/graphql-go/graphql"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EntryBlock struct {
	Header               *EntryBlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	EntryHashes          [][]byte          `protobuf:"bytes,2,rep,name=entryHashes,proto3" json:"entryHashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EntryBlock) Reset()         { *m = EntryBlock{} }
func (m *EntryBlock) String() string { return proto.CompactTextString(m) }
func (*EntryBlock) ProtoMessage()    {}
func (*EntryBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_d83f69270bc17aac, []int{0}
}
func (m *EntryBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryBlock.Merge(m, src)
}
func (m *EntryBlock) XXX_Size() int {
	return m.Size()
}
func (m *EntryBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryBlock.DiscardUnknown(m)
}

var xxx_messageInfo_EntryBlock proto.InternalMessageInfo

func (m *EntryBlock) GetHeader() *EntryBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EntryBlock) GetEntryHashes() [][]byte {
	if m != nil {
		return m.EntryHashes
	}
	return nil
}

type EntryBlockHeader struct {
	BodyMerkleRoot        []byte   `protobuf:"bytes,1,opt,name=bodyMerkleRoot,proto3" json:"bodyMerkleRoot,omitempty"`
	ChainID               []byte   `protobuf:"bytes,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
	PreviousFullHash      []byte   `protobuf:"bytes,3,opt,name=previousFullHash,proto3" json:"previousFullHash,omitempty"`
	PreviousKeyMerkleRoot []byte   `protobuf:"bytes,4,opt,name=previousKeyMerkleRoot,proto3" json:"previousKeyMerkleRoot,omitempty"`
	BlockHeight           uint32   `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	BlockSequence         uint32   `protobuf:"varint,6,opt,name=blockSequence,proto3" json:"blockSequence,omitempty"`
	EntryCount            uint32   `protobuf:"varint,7,opt,name=entryCount,proto3" json:"entryCount,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *EntryBlockHeader) Reset()         { *m = EntryBlockHeader{} }
func (m *EntryBlockHeader) String() string { return proto.CompactTextString(m) }
func (*EntryBlockHeader) ProtoMessage()    {}
func (*EntryBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_d83f69270bc17aac, []int{1}
}
func (m *EntryBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryBlockHeader.Merge(m, src)
}
func (m *EntryBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *EntryBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_EntryBlockHeader proto.InternalMessageInfo

func (m *EntryBlockHeader) GetBodyMerkleRoot() []byte {
	if m != nil {
		return m.BodyMerkleRoot
	}
	return nil
}

func (m *EntryBlockHeader) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *EntryBlockHeader) GetPreviousFullHash() []byte {
	if m != nil {
		return m.PreviousFullHash
	}
	return nil
}

func (m *EntryBlockHeader) GetPreviousKeyMerkleRoot() []byte {
	if m != nil {
		return m.PreviousKeyMerkleRoot
	}
	return nil
}

func (m *EntryBlockHeader) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EntryBlockHeader) GetBlockSequence() uint32 {
	if m != nil {
		return m.BlockSequence
	}
	return 0
}

func (m *EntryBlockHeader) GetEntryCount() uint32 {
	if m != nil {
		return m.EntryCount
	}
	return 0
}

type EntryBlockEntry struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ExternalIDs          [][]byte `protobuf:"bytes,2,rep,name=externalIDs,proto3" json:"externalIDs,omitempty"`
	Content              []byte   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Version              uint32   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	ChainID              []byte   `protobuf:"bytes,5,opt,name=chainID,proto3" json:"chainID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntryBlockEntry) Reset()         { *m = EntryBlockEntry{} }
func (m *EntryBlockEntry) String() string { return proto.CompactTextString(m) }
func (*EntryBlockEntry) ProtoMessage()    {}
func (*EntryBlockEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_d83f69270bc17aac, []int{2}
}
func (m *EntryBlockEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryBlockEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryBlockEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryBlockEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryBlockEntry.Merge(m, src)
}
func (m *EntryBlockEntry) XXX_Size() int {
	return m.Size()
}
func (m *EntryBlockEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryBlockEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EntryBlockEntry proto.InternalMessageInfo

func (m *EntryBlockEntry) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *EntryBlockEntry) GetExternalIDs() [][]byte {
	if m != nil {
		return m.ExternalIDs
	}
	return nil
}

func (m *EntryBlockEntry) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *EntryBlockEntry) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *EntryBlockEntry) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func init() {
	proto.RegisterType((*EntryBlock)(nil), "eventmessages.EntryBlock")
	proto.RegisterType((*EntryBlockHeader)(nil), "eventmessages.EntryBlockHeader")
	proto.RegisterType((*EntryBlockEntry)(nil), "eventmessages.EntryBlockEntry")
}

func init() { proto.RegisterFile("eventmessages/entryBlock.proto", fileDescriptor_d83f69270bc17aac) }

var fileDescriptor_d83f69270bc17aac = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xb1, 0x6e, 0xd4, 0x40,
	0x10, 0x86, 0xb5, 0x97, 0xe4, 0x22, 0x4d, 0x62, 0x88, 0x56, 0x42, 0x5a, 0x51, 0x6c, 0xac, 0x13,
	0x42, 0x27, 0xa4, 0xf3, 0x49, 0x80, 0x44, 0x1f, 0x02, 0x4a, 0x84, 0x42, 0x61, 0x3a, 0xba, 0xb5,
	0x3d, 0x67, 0x5b, 0xf1, 0xed, 0x5e, 0xd6, 0xeb, 0x53, 0xf2, 0x20, 0xb4, 0x14, 0x54, 0x3c, 0x02,
	0x25, 0x25, 0x25, 0x8f, 0x00, 0x7e, 0x0a, 0x4a, 0xe4, 0xb9, 0x73, 0x6c, 0x1f, 0x54, 0xde, 0xf9,
	0xe7, 0x5f, 0xff, 0x3b, 0x9f, 0x06, 0x24, 0xae, 0x51, 0xbb, 0x25, 0x96, 0xa5, 0x4a, 0xb1, 0x9c,
	0xa3, 0x76, 0xf6, 0xee, 0xac, 0x30, 0xf1, 0x75, 0xb0, 0xb2, 0xc6, 0x19, 0xee, 0x0d, 0xfa, 0x8f,
	0xdf, 0xa7, 0xb9, 0xcb, 0xaa, 0x28, 0x88, 0xcd, 0x72, 0x1e, 0xe5, 0xb3, 0x85, 0xa9, 0x74, 0xa2,
	0x5c, 0x6e, 0xf4, 0x9c, 0xec, 0x51, 0xb5, 0x98, 0xa5, 0x56, 0xad, 0xb2, 0x9b, 0x62, 0x86, 0xb7,
	0x0e, 0x75, 0xd9, 0xb4, 0xb6, 0x0a, 0x39, 0xda, 0x62, 0xf3, 0xfb, 0x49, 0x0a, 0xf0, 0xe6, 0x3e,
	0x92, 0xbf, 0x82, 0x71, 0x86, 0x2a, 0x41, 0x2b, 0x98, 0xcf, 0xa6, 0x47, 0xcf, 0x4f, 0x83, 0x41,
	0x7a, 0xd0, 0x59, 0x2f, 0xc8, 0x16, 0x6e, 0xed, 0xdc, 0x87, 0x23, 0x7a, 0xf9, 0x85, 0x2a, 0x33,
	0x2c, 0xc5, 0xc8, 0xdf, 0x9b, 0x1e, 0x87, 0x7d, 0x69, 0xf2, 0x79, 0x04, 0x27, 0xbb, 0xd7, 0xf9,
	0x53, 0x78, 0x10, 0x99, 0xe4, 0xee, 0x0a, 0xed, 0x75, 0x81, 0xa1, 0x31, 0x8e, 0x72, 0x8f, 0xc3,
	0x1d, 0x95, 0x0b, 0x38, 0x8c, 0x33, 0x95, 0xeb, 0xcb, 0x73, 0x31, 0x22, 0x43, 0x5b, 0xf2, 0x67,
	0x70, 0xb2, 0xb2, 0xb8, 0xce, 0x4d, 0x55, 0xbe, 0xad, 0x8a, 0xa2, 0x09, 0x13, 0x7b, 0x64, 0xf9,
	0x47, 0xe7, 0x2f, 0xe1, 0x51, 0xab, 0xbd, 0xc3, 0x7e, 0xe8, 0x3e, 0x5d, 0xf8, 0x7f, 0xb3, 0x19,
	0x2d, 0xda, 0x3c, 0x39, 0x4f, 0x33, 0x27, 0x0e, 0x7c, 0x36, 0xf5, 0xc2, 0xbe, 0xc4, 0x9f, 0x80,
	0x47, 0xe5, 0x07, 0xbc, 0xa9, 0x50, 0xc7, 0x28, 0xc6, 0xe4, 0x19, 0x8a, 0x5c, 0x02, 0x10, 0x8f,
	0xd7, 0xa6, 0xd2, 0x4e, 0x1c, 0x92, 0xa5, 0xa7, 0x4c, 0x3e, 0x31, 0x78, 0xd8, 0x01, 0xa2, 0x13,
	0xe7, 0xb0, 0x9f, 0x35, 0x13, 0x6d, 0xa8, 0xd0, 0x99, 0x50, 0xdf, 0x3a, 0xb4, 0x5a, 0x15, 0x97,
	0xe7, 0x1d, 0xea, 0x4e, 0x22, 0x5a, 0x46, 0x3b, 0xd4, 0x6e, 0x8b, 0xa2, 0x2d, 0x9b, 0xce, 0x1a,
	0x6d, 0xb3, 0x13, 0x34, 0xb3, 0x17, 0xb6, 0x65, 0x9f, 0xf0, 0xc1, 0x80, 0xf0, 0xd9, 0xd5, 0x9f,
	0xdf, 0x92, 0x7d, 0xad, 0x25, 0xfb, 0x56, 0x4b, 0xf6, 0xa3, 0x96, 0xec, 0x67, 0x2d, 0xd9, 0xaf,
	0x5a, 0xb2, 0xef, 0x5f, 0x4e, 0x19, 0xf8, 0xb1, 0x59, 0x06, 0x0b, 0x15, 0xbb, 0xfb, 0x4f, 0x32,
	0xdc, 0x99, 0x8f, 0xc3, 0x05, 0x8e, 0xc6, 0xb4, 0x77, 0x2f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff,
	0xf3, 0x5b, 0x51, 0xba, 0xf8, 0x02, 0x00, 0x00,
}

func (this *EntryBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryBlock)
	if !ok {
		that2, ok := that.(EntryBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if len(this.EntryHashes) != len(that1.EntryHashes) {
		return false
	}
	for i := range this.EntryHashes {
		if !bytes.Equal(this.EntryHashes[i], that1.EntryHashes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EntryBlockHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryBlockHeader)
	if !ok {
		that2, ok := that.(EntryBlockHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BodyMerkleRoot, that1.BodyMerkleRoot) {
		return false
	}
	if !bytes.Equal(this.ChainID, that1.ChainID) {
		return false
	}
	if !bytes.Equal(this.PreviousFullHash, that1.PreviousFullHash) {
		return false
	}
	if !bytes.Equal(this.PreviousKeyMerkleRoot, that1.PreviousKeyMerkleRoot) {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if this.BlockSequence != that1.BlockSequence {
		return false
	}
	if this.EntryCount != that1.EntryCount {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EntryBlockEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryBlockEntry)
	if !ok {
		that2, ok := that.(EntryBlockEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	if len(this.ExternalIDs) != len(that1.ExternalIDs) {
		return false
	}
	for i := range this.ExternalIDs {
		if !bytes.Equal(this.ExternalIDs[i], that1.ExternalIDs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Content, that1.Content) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !bytes.Equal(this.ChainID, that1.ChainID) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type EntryBlockGetter interface {
	GetEntryBlock() *EntryBlock
}

var GraphQLEntryBlockType *github_com_graphql_go_graphql.Object

type EntryBlockHeaderGetter interface {
	GetEntryBlockHeader() *EntryBlockHeader
}

var GraphQLEntryBlockHeaderType *github_com_graphql_go_graphql.Object

type EntryBlockEntryGetter interface {
	GetEntryBlockEntry() *EntryBlockEntry
}

var GraphQLEntryBlockEntryType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLEntryBlockType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "EntryBlock",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"header": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLEntryBlockHeaderType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlock)
						if ok {
							if obj.Header == nil {
								return nil, nil
							}
							return obj.GetHeader(), nil
						}
						inter, ok := p.Source.(EntryBlockGetter)
						if ok {
							face := inter.GetEntryBlock()
							if face == nil {
								return nil, nil
							}
							if face.Header == nil {
								return nil, nil
							}
							return face.GetHeader(), nil
						}
						return nil, fmt.Errorf("field header not resolved")
					},
				},
				"entryHashes": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlock)
						if ok {
							return obj.EntryHashes, nil
						}
						inter, ok := p.Source.(EntryBlockGetter)
						if ok {
							face := inter.GetEntryBlock()
							if face == nil {
								return nil, nil
							}
							return face.EntryHashes, nil
						}
						return nil, fmt.Errorf("field entryHashes not resolved")
					},
				},
			}
		}),
	})
	GraphQLEntryBlockHeaderType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "EntryBlockHeader",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"bodyMerkleRoot": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockHeader)
						if ok {
							return obj.BodyMerkleRoot, nil
						}
						inter, ok := p.Source.(EntryBlockHeaderGetter)
						if ok {
							face := inter.GetEntryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.BodyMerkleRoot, nil
						}
						return nil, fmt.Errorf("field bodyMerkleRoot not resolved")
					},
				},
				"chainID": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockHeader)
						if ok {
							return obj.ChainID, nil
						}
						inter, ok := p.Source.(EntryBlockHeaderGetter)
						if ok {
							face := inter.GetEntryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.ChainID, nil
						}
						return nil, fmt.Errorf("field chainID not resolved")
					},
				},
				"previousFullHash": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockHeader)
						if ok {
							return obj.PreviousFullHash, nil
						}
						inter, ok := p.Source.(EntryBlockHeaderGetter)
						if ok {
							face := inter.GetEntryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.PreviousFullHash, nil
						}
						return nil, fmt.Errorf("field previousFullHash not resolved")
					},
				},
				"previousKeyMerkleRoot": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockHeader)
						if ok {
							return obj.PreviousKeyMerkleRoot, nil
						}
						inter, ok := p.Source.(EntryBlockHeaderGetter)
						if ok {
							face := inter.GetEntryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.PreviousKeyMerkleRoot, nil
						}
						return nil, fmt.Errorf("field previousKeyMerkleRoot not resolved")
					},
				},
				"blockHeight": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockHeader)
						if ok {
							return obj.BlockHeight, nil
						}
						inter, ok := p.Source.(EntryBlockHeaderGetter)
						if ok {
							face := inter.GetEntryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.BlockHeight, nil
						}
						return nil, fmt.Errorf("field blockHeight not resolved")
					},
				},
				"blockSequence": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockHeader)
						if ok {
							return obj.BlockSequence, nil
						}
						inter, ok := p.Source.(EntryBlockHeaderGetter)
						if ok {
							face := inter.GetEntryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.BlockSequence, nil
						}
						return nil, fmt.Errorf("field blockSequence not resolved")
					},
				},
				"entryCount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockHeader)
						if ok {
							return obj.EntryCount, nil
						}
						inter, ok := p.Source.(EntryBlockHeaderGetter)
						if ok {
							face := inter.GetEntryBlockHeader()
							if face == nil {
								return nil, nil
							}
							return face.EntryCount, nil
						}
						return nil, fmt.Errorf("field entryCount not resolved")
					},
				},
			}
		}),
	})
	GraphQLEntryBlockEntryType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "EntryBlockEntry",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"hash": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockEntry)
						if ok {
							return obj.Hash, nil
						}
						inter, ok := p.Source.(EntryBlockEntryGetter)
						if ok {
							face := inter.GetEntryBlockEntry()
							if face == nil {
								return nil, nil
							}
							return face.Hash, nil
						}
						return nil, fmt.Errorf("field hash not resolved")
					},
				},
				"externalIDs": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockEntry)
						if ok {
							return obj.ExternalIDs, nil
						}
						inter, ok := p.Source.(EntryBlockEntryGetter)
						if ok {
							face := inter.GetEntryBlockEntry()
							if face == nil {
								return nil, nil
							}
							return face.ExternalIDs, nil
						}
						return nil, fmt.Errorf("field externalIDs not resolved")
					},
				},
				"content": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockEntry)
						if ok {
							return obj.Content, nil
						}
						inter, ok := p.Source.(EntryBlockEntryGetter)
						if ok {
							face := inter.GetEntryBlockEntry()
							if face == nil {
								return nil, nil
							}
							return face.Content, nil
						}
						return nil, fmt.Errorf("field content not resolved")
					},
				},
				"version": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockEntry)
						if ok {
							return obj.Version, nil
						}
						inter, ok := p.Source.(EntryBlockEntryGetter)
						if ok {
							face := inter.GetEntryBlockEntry()
							if face == nil {
								return nil, nil
							}
							return face.Version, nil
						}
						return nil, fmt.Errorf("field version not resolved")
					},
				},
				"chainID": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockEntry)
						if ok {
							return obj.ChainID, nil
						}
						inter, ok := p.Source.(EntryBlockEntryGetter)
						if ok {
							face := inter.GetEntryBlockEntry()
							if face == nil {
								return nil, nil
							}
							return face.ChainID, nil
						}
						return nil, fmt.Errorf("field chainID not resolved")
					},
				},
			}
		}),
	})
}
func (m *EntryBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntryBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EntryHashes) > 0 {
		for iNdEx := len(m.EntryHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EntryHashes[iNdEx])
			copy(dAtA[i:], m.EntryHashes[iNdEx])
			i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.EntryHashes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntryBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntryBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntryBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EntryCount != 0 {
		i = encodeVarintEntryBlock(dAtA, i, uint64(m.EntryCount))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockSequence != 0 {
		i = encodeVarintEntryBlock(dAtA, i, uint64(m.BlockSequence))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEntryBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PreviousKeyMerkleRoot) > 0 {
		i -= len(m.PreviousKeyMerkleRoot)
		copy(dAtA[i:], m.PreviousKeyMerkleRoot)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.PreviousKeyMerkleRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PreviousFullHash) > 0 {
		i -= len(m.PreviousFullHash)
		copy(dAtA[i:], m.PreviousFullHash)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.PreviousFullHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BodyMerkleRoot) > 0 {
		i -= len(m.BodyMerkleRoot)
		copy(dAtA[i:], m.BodyMerkleRoot)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.BodyMerkleRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntryBlockEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryBlockEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntryBlockEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Version != 0 {
		i = encodeVarintEntryBlock(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExternalIDs) > 0 {
		for iNdEx := len(m.ExternalIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExternalIDs[iNdEx])
			copy(dAtA[i:], m.ExternalIDs[iNdEx])
			i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.ExternalIDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntryBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntryBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedEntryBlock(r randyEntryBlock, easy bool) *EntryBlock {
	this := &EntryBlock{}
	if r.Intn(5) != 0 {
		this.Header = NewPopulatedEntryBlockHeader(r, easy)
	}
	v1 := r.Intn(10)
	this.EntryHashes = make([][]byte, v1)
	for i := 0; i < v1; i++ {
		v2 := r.Intn(100)
		this.EntryHashes[i] = make([]byte, v2)
		for j := 0; j < v2; j++ {
			this.EntryHashes[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntryBlock(r, 3)
	}
	return this
}

func NewPopulatedEntryBlockHeader(r randyEntryBlock, easy bool) *EntryBlockHeader {
	this := &EntryBlockHeader{}
	v3 := r.Intn(100)
	this.BodyMerkleRoot = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.BodyMerkleRoot[i] = byte(r.Intn(256))
	}
	v4 := r.Intn(100)
	this.ChainID = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.ChainID[i] = byte(r.Intn(256))
	}
	v5 := r.Intn(100)
	this.PreviousFullHash = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.PreviousFullHash[i] = byte(r.Intn(256))
	}
	v6 := r.Intn(100)
	this.PreviousKeyMerkleRoot = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.PreviousKeyMerkleRoot[i] = byte(r.Intn(256))
	}
	this.BlockHeight = uint32(r.Uint32())
	this.BlockSequence = uint32(r.Uint32())
	this.EntryCount = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntryBlock(r, 8)
	}
	return this
}

func NewPopulatedEntryBlockEntry(r randyEntryBlock, easy bool) *EntryBlockEntry {
	this := &EntryBlockEntry{}
	v7 := r.Intn(100)
	this.Hash = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Hash[i] = byte(r.Intn(256))
	}
	v8 := r.Intn(10)
	this.ExternalIDs = make([][]byte, v8)
	for i := 0; i < v8; i++ {
		v9 := r.Intn(100)
		this.ExternalIDs[i] = make([]byte, v9)
		for j := 0; j < v9; j++ {
			this.ExternalIDs[i][j] = byte(r.Intn(256))
		}
	}
	v10 := r.Intn(100)
	this.Content = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.Content[i] = byte(r.Intn(256))
	}
	this.Version = uint32(r.Uint32())
	v11 := r.Intn(100)
	this.ChainID = make([]byte, v11)
	for i := 0; i < v11; i++ {
		this.ChainID[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedEntryBlock(r, 6)
	}
	return this
}

type randyEntryBlock interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEntryBlock(r randyEntryBlock) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEntryBlock(r randyEntryBlock) string {
	v12 := r.Intn(100)
	tmps := make([]rune, v12)
	for i := 0; i < v12; i++ {
		tmps[i] = randUTF8RuneEntryBlock(r)
	}
	return string(tmps)
}
func randUnrecognizedEntryBlock(r randyEntryBlock, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldEntryBlock(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldEntryBlock(dAtA []byte, r randyEntryBlock, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateEntryBlock(dAtA, uint64(key))
		v13 := r.Int63()
		if r.Intn(2) == 0 {
			v13 *= -1
		}
		dAtA = encodeVarintPopulateEntryBlock(dAtA, uint64(v13))
	case 1:
		dAtA = encodeVarintPopulateEntryBlock(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateEntryBlock(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateEntryBlock(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateEntryBlock(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateEntryBlock(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *EntryBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	if len(m.EntryHashes) > 0 {
		for _, b := range m.EntryHashes {
			l = len(b)
			n += 1 + l + sovEntryBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BodyMerkleRoot)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	l = len(m.PreviousFullHash)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	l = len(m.PreviousKeyMerkleRoot)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEntryBlock(uint64(m.BlockHeight))
	}
	if m.BlockSequence != 0 {
		n += 1 + sovEntryBlock(uint64(m.BlockSequence))
	}
	if m.EntryCount != 0 {
		n += 1 + sovEntryBlock(uint64(m.EntryCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryBlockEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	if len(m.ExternalIDs) > 0 {
		for _, b := range m.ExternalIDs {
			l = len(b)
			n += 1 + l + sovEntryBlock(uint64(l))
		}
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEntryBlock(uint64(m.Version))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEntryBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntryBlock(x uint64) (n int) {
	return sovEntryBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EntryBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &EntryBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryHashes = append(m.EntryHashes, make([]byte, postIndex-iNdEx))
			copy(m.EntryHashes[len(m.EntryHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyMerkleRoot = append(m.BodyMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyMerkleRoot == nil {
				m.BodyMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousFullHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousFullHash = append(m.PreviousFullHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousFullHash == nil {
				m.PreviousFullHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousKeyMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousKeyMerkleRoot = append(m.PreviousKeyMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousKeyMerkleRoot == nil {
				m.PreviousKeyMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSequence", wireType)
			}
			m.BlockSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSequence |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryCount", wireType)
			}
			m.EntryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryBlockEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryBlockEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryBlockEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIDs = append(m.ExternalIDs, make([]byte, postIndex-iNdEx))
			copy(m.ExternalIDs[len(m.ExternalIDs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntryBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntryBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntryBlock
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEntryBlock
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEntryBlock
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEntryBlock(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEntryBlock
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEntryBlock = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntryBlock   = fmt.Errorf("proto: integer overflow")
)
