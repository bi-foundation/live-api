// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventmessages/generalTypes.proto

package eventmessages

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/bi-foundation/protobuf-graphql-extension/graphqlproto"
	github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars "github.com/bi-foundation/protobuf-graphql-extension/plugin/graphql/scalars"
	proto "github.com/gogo/protobuf/proto"
	github_com_graphql_go_graphql "github.com/graphql-go/graphql"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EntityState int32

const (
	EntityState_REQUESTED                    EntityState = 0
	EntityState_HOLDING_QUEUE                EntityState = 1
	EntityState_ACCEPTED                     EntityState = 2
	EntityState_REJECTED                     EntityState = 3
	EntityState_COMMITTED_TO_DIRECTORY_BLOCK EntityState = 4
)

var EntityState_name = map[int32]string{
	0: "REQUESTED",
	1: "HOLDING_QUEUE",
	2: "ACCEPTED",
	3: "REJECTED",
	4: "COMMITTED_TO_DIRECTORY_BLOCK",
}

var EntityState_value = map[string]int32{
	"REQUESTED":                    0,
	"HOLDING_QUEUE":                1,
	"ACCEPTED":                     2,
	"REJECTED":                     3,
	"COMMITTED_TO_DIRECTORY_BLOCK": 4,
}

func (x EntityState) String() string {
	return proto.EnumName(EntityState_name, int32(x))
}

func (EntityState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b8d2649d86180690, []int{0}
}

type Hash struct {
	HashValue            []byte   `protobuf:"bytes,1,opt,name=hashValue,proto3" json:"hashValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hash) Reset()         { *m = Hash{} }
func (m *Hash) String() string { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()    {}
func (*Hash) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8d2649d86180690, []int{0}
}
func (m *Hash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hash.Merge(m, src)
}
func (m *Hash) XXX_Size() int {
	return m.Size()
}
func (m *Hash) XXX_DiscardUnknown() {
	xxx_messageInfo_Hash.DiscardUnknown(m)
}

var xxx_messageInfo_Hash proto.InternalMessageInfo

func (m *Hash) GetHashValue() []byte {
	if m != nil {
		return m.HashValue
	}
	return nil
}

type ExternalId struct {
	BinaryValue          []byte   `protobuf:"bytes,1,opt,name=binaryValue,proto3" json:"binaryValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExternalId) Reset()         { *m = ExternalId{} }
func (m *ExternalId) String() string { return proto.CompactTextString(m) }
func (*ExternalId) ProtoMessage()    {}
func (*ExternalId) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8d2649d86180690, []int{1}
}
func (m *ExternalId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalId.Merge(m, src)
}
func (m *ExternalId) XXX_Size() int {
	return m.Size()
}
func (m *ExternalId) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalId.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalId proto.InternalMessageInfo

func (m *ExternalId) GetBinaryValue() []byte {
	if m != nil {
		return m.BinaryValue
	}
	return nil
}

type Content struct {
	BinaryValue          []byte   `protobuf:"bytes,1,opt,name=binaryValue,proto3" json:"binaryValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8d2649d86180690, []int{2}
}
func (m *Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return m.Size()
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetBinaryValue() []byte {
	if m != nil {
		return m.BinaryValue
	}
	return nil
}

type Signature struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8d2649d86180690, []int{3}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type TransAddress struct {
	Amount               uint64   `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Address              *Hash    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransAddress) Reset()         { *m = TransAddress{} }
func (m *TransAddress) String() string { return proto.CompactTextString(m) }
func (*TransAddress) ProtoMessage()    {}
func (*TransAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8d2649d86180690, []int{4}
}
func (m *TransAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransAddress.Merge(m, src)
}
func (m *TransAddress) XXX_Size() int {
	return m.Size()
}
func (m *TransAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_TransAddress.DiscardUnknown(m)
}

var xxx_messageInfo_TransAddress proto.InternalMessageInfo

func (m *TransAddress) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransAddress) GetAddress() *Hash {
	if m != nil {
		return m.Address
	}
	return nil
}

type EntryBlockEntry struct {
	Hash                 *Hash         `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ExternalIDs          []*ExternalId `protobuf:"bytes,2,rep,name=externalIDs,proto3" json:"externalIDs,omitempty"`
	Content              *Content      `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EntryBlockEntry) Reset()         { *m = EntryBlockEntry{} }
func (m *EntryBlockEntry) String() string { return proto.CompactTextString(m) }
func (*EntryBlockEntry) ProtoMessage()    {}
func (*EntryBlockEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8d2649d86180690, []int{5}
}
func (m *EntryBlockEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryBlockEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryBlockEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryBlockEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryBlockEntry.Merge(m, src)
}
func (m *EntryBlockEntry) XXX_Size() int {
	return m.Size()
}
func (m *EntryBlockEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryBlockEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EntryBlockEntry proto.InternalMessageInfo

func (m *EntryBlockEntry) GetHash() *Hash {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *EntryBlockEntry) GetExternalIDs() []*ExternalId {
	if m != nil {
		return m.ExternalIDs
	}
	return nil
}

func (m *EntryBlockEntry) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

type Entry struct {
	ChainID              *Hash    `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	KeyMerkleRoot        *Hash    `protobuf:"bytes,2,opt,name=keyMerkleRoot,proto3" json:"keyMerkleRoot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8d2649d86180690, []int{6}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetChainID() *Hash {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *Entry) GetKeyMerkleRoot() *Hash {
	if m != nil {
		return m.KeyMerkleRoot
	}
	return nil
}

func init() {
	proto.RegisterEnum("eventmessages.EntityState", EntityState_name, EntityState_value)
	proto.RegisterType((*Hash)(nil), "eventmessages.Hash")
	proto.RegisterType((*ExternalId)(nil), "eventmessages.ExternalId")
	proto.RegisterType((*Content)(nil), "eventmessages.Content")
	proto.RegisterType((*Signature)(nil), "eventmessages.Signature")
	proto.RegisterType((*TransAddress)(nil), "eventmessages.TransAddress")
	proto.RegisterType((*EntryBlockEntry)(nil), "eventmessages.EntryBlockEntry")
	proto.RegisterType((*Entry)(nil), "eventmessages.Entry")
}

func init() { proto.RegisterFile("eventmessages/generalTypes.proto", fileDescriptor_b8d2649d86180690) }

var fileDescriptor_b8d2649d86180690 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xd9, 0x36, 0x34, 0x74, 0x92, 0x88, 0xb0, 0x48, 0x55, 0x40, 0x95, 0x89, 0x2c, 0x24,
	0x2a, 0x50, 0x1c, 0x54, 0x4e, 0x88, 0x53, 0x63, 0xaf, 0xda, 0xd0, 0xa6, 0xa1, 0x8e, 0x83, 0x04,
	0x97, 0x68, 0xed, 0x6c, 0x62, 0x2b, 0xce, 0x6e, 0xea, 0x5d, 0xa3, 0xfa, 0x75, 0x38, 0xc1, 0x1b,
	0x70, 0xe4, 0xc8, 0x91, 0x47, 0x80, 0x3c, 0x05, 0x47, 0x64, 0x27, 0x4e, 0x93, 0x4a, 0x54, 0x9c,
	0xec, 0xf9, 0xe7, 0xdb, 0xd9, 0x7f, 0x7f, 0x69, 0xa0, 0xce, 0x3e, 0x31, 0xae, 0xa6, 0x4c, 0x4a,
	0x3a, 0x66, 0xb2, 0x39, 0x66, 0x9c, 0x45, 0x34, 0x74, 0x92, 0x19, 0x93, 0xc6, 0x2c, 0x12, 0x4a,
	0xe0, 0xca, 0x06, 0xf1, 0xf8, 0x7c, 0x1c, 0x28, 0x3f, 0x76, 0x0d, 0x4f, 0x4c, 0x9b, 0x6e, 0xd0,
	0x18, 0x89, 0x98, 0x0f, 0xa9, 0x0a, 0x04, 0x6f, 0x66, 0xb8, 0x1b, 0x8f, 0x1a, 0xe3, 0x88, 0xce,
	0xfc, 0xcb, 0xb0, 0xc1, 0xae, 0x14, 0xe3, 0x32, 0x6d, 0x2d, 0x95, 0x8c, 0xc8, 0x8b, 0xc5, 0x78,
	0xfd, 0x29, 0x14, 0x4e, 0xa8, 0xf4, 0xf1, 0x3e, 0xec, 0xfa, 0x54, 0xfa, 0xef, 0x69, 0x18, 0xb3,
	0x1a, 0xaa, 0xa3, 0x83, 0xb2, 0x7d, 0x2d, 0xe8, 0x06, 0x00, 0xb9, 0x52, 0x2c, 0xe2, 0x34, 0x6c,
	0x0f, 0x71, 0x1d, 0x4a, 0x6e, 0xc0, 0x69, 0x94, 0xac, 0xd3, 0xeb, 0x92, 0xfe, 0x02, 0x8a, 0xa6,
	0xe0, 0x8a, 0x71, 0xf5, 0x1f, 0xf0, 0x31, 0xec, 0xf6, 0x82, 0x31, 0xa7, 0x2a, 0x8e, 0x58, 0xea,
	0x63, 0x16, 0xbb, 0x61, 0xe0, 0x9d, 0xb2, 0x24, 0xf7, 0xb1, 0x12, 0xd2, 0xae, 0xcc, 0xd1, 0xda,
	0xd6, 0xa2, 0xbb, 0x12, 0xf4, 0x3e, 0x94, 0x9d, 0x88, 0x72, 0x79, 0x34, 0x1c, 0x46, 0x4c, 0x4a,
	0xbc, 0x07, 0x3b, 0x74, 0x2a, 0x62, 0xae, 0xb2, 0x41, 0x05, 0x7b, 0x59, 0xe1, 0x06, 0x14, 0xe9,
	0x02, 0xc9, 0x66, 0x94, 0x0e, 0x1f, 0x1a, 0x1b, 0x21, 0x1b, 0x69, 0x22, 0x76, 0xce, 0xe8, 0x5f,
	0x11, 0xdc, 0x27, 0x5c, 0x45, 0x49, 0x2b, 0x14, 0xde, 0x24, 0xfb, 0xc3, 0xcf, 0xa0, 0x90, 0xa6,
	0x93, 0x0d, 0xfe, 0xc7, 0xf9, 0x0c, 0xc0, 0x6f, 0xa0, 0xc4, 0xf2, 0xe4, 0xac, 0xf4, 0xbe, 0xed,
	0x83, 0xd2, 0xe1, 0xa3, 0x1b, 0xfc, 0x75, 0xb6, 0xf6, 0x3a, 0x8d, 0x5f, 0x42, 0xd1, 0x5b, 0xc4,
	0x58, 0xdb, 0xce, 0x2e, 0xda, 0xbb, 0x71, 0x70, 0x19, 0xb2, 0x9d, 0x63, 0xfa, 0x25, 0xdc, 0x5d,
	0x18, 0x6c, 0x40, 0xd1, 0xf3, 0x69, 0xc0, 0xdb, 0xd6, 0x6d, 0x1e, 0x73, 0x06, 0xbf, 0x86, 0xca,
	0x84, 0x25, 0x1d, 0x16, 0x4d, 0x42, 0x66, 0x0b, 0xa1, 0x6e, 0x0b, 0x66, 0x93, 0x7c, 0x3e, 0x85,
	0x12, 0xe1, 0x2a, 0x50, 0x49, 0x4f, 0x51, 0xc5, 0x70, 0x05, 0x76, 0x6d, 0x72, 0xd1, 0x27, 0x3d,
	0x87, 0x58, 0xd5, 0x3b, 0xf8, 0x01, 0x54, 0x4e, 0xba, 0x67, 0x56, 0xfb, 0xfc, 0x78, 0x70, 0xd1,
	0x27, 0x7d, 0x52, 0x45, 0xb8, 0x0c, 0xf7, 0x8e, 0x4c, 0x93, 0xbc, 0x4b, 0x81, 0xad, 0xb4, 0xb2,
	0xc9, 0x5b, 0x62, 0xa6, 0xd5, 0x36, 0xae, 0xc3, 0xbe, 0xd9, 0xed, 0x74, 0xda, 0x8e, 0x43, 0xac,
	0x81, 0xd3, 0x1d, 0x58, 0x6d, 0x9b, 0x98, 0x4e, 0xd7, 0xfe, 0x30, 0x68, 0x9d, 0x75, 0xcd, 0xd3,
	0x6a, 0xa1, 0xd5, 0xf9, 0xf3, 0x5b, 0x43, 0x5f, 0xe6, 0x1a, 0xfa, 0x36, 0xd7, 0xd0, 0x8f, 0xb9,
	0x86, 0x7e, 0xce, 0x35, 0xf4, 0x6b, 0xae, 0xa1, 0xef, 0x9f, 0x9f, 0x20, 0xa8, 0x7b, 0x62, 0x6a,
	0x8c, 0xa8, 0xa7, 0x56, 0x9f, 0xe1, 0xe6, 0x13, 0x3e, 0x6e, 0xee, 0x93, 0xbb, 0x93, 0xad, 0xc1,
	0xab, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x12, 0x1e, 0x4f, 0x89, 0x03, 0x00, 0x00,
}

func (this *Hash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hash)
	if !ok {
		that2, ok := that.(Hash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.HashValue, that1.HashValue) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ExternalId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExternalId)
	if !ok {
		that2, ok := that.(ExternalId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BinaryValue, that1.BinaryValue) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Content) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Content)
	if !ok {
		that2, ok := that.(Content)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BinaryValue, that1.BinaryValue) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Signature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Signature)
	if !ok {
		that2, ok := that.(Signature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TransAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransAddress)
	if !ok {
		that2, ok := that.(TransAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *EntryBlockEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EntryBlockEntry)
	if !ok {
		that2, ok := that.(EntryBlockEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hash.Equal(that1.Hash) {
		return false
	}
	if len(this.ExternalIDs) != len(that1.ExternalIDs) {
		return false
	}
	for i := range this.ExternalIDs {
		if !this.ExternalIDs[i].Equal(that1.ExternalIDs[i]) {
			return false
		}
	}
	if !this.Content.Equal(that1.Content) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Entry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Entry)
	if !ok {
		that2, ok := that.(Entry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChainID.Equal(that1.ChainID) {
		return false
	}
	if !this.KeyMerkleRoot.Equal(that1.KeyMerkleRoot) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

var GraphQLEntityStateEnum *github_com_graphql_go_graphql.Enum

type HashGetter interface {
	GetHash() *Hash
}

var GraphQLHashType *github_com_graphql_go_graphql.Object

type ExternalIdGetter interface {
	GetExternalId() *ExternalId
}

var GraphQLExternalIdType *github_com_graphql_go_graphql.Object

type ContentGetter interface {
	GetContent() *Content
}

var GraphQLContentType *github_com_graphql_go_graphql.Object

type SignatureGetter interface {
	GetSignature() *Signature
}

var GraphQLSignatureType *github_com_graphql_go_graphql.Object

type TransAddressGetter interface {
	GetTransAddress() *TransAddress
}

var GraphQLTransAddressType *github_com_graphql_go_graphql.Object

type EntryBlockEntryGetter interface {
	GetEntryBlockEntry() *EntryBlockEntry
}

var GraphQLEntryBlockEntryType *github_com_graphql_go_graphql.Object

type EntryGetter interface {
	GetEntry() *Entry
}

var GraphQLEntryType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLEntityStateEnum = github_com_graphql_go_graphql.NewEnum(github_com_graphql_go_graphql.EnumConfig{
		Name: "EntityState",
		Values: github_com_graphql_go_graphql.EnumValueConfigMap{
			"REQUESTED": &github_com_graphql_go_graphql.EnumValueConfig{
				Value: 0,
			},
			"HOLDING_QUEUE": &github_com_graphql_go_graphql.EnumValueConfig{
				Value: 1,
			},
			"ACCEPTED": &github_com_graphql_go_graphql.EnumValueConfig{
				Value: 2,
			},
			"REJECTED": &github_com_graphql_go_graphql.EnumValueConfig{
				Value: 3,
			},
			"COMMITTED_TO_DIRECTORY_BLOCK": &github_com_graphql_go_graphql.EnumValueConfig{
				Value: 4,
			},
		},
	})
	GraphQLHashType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "Hash",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"hashValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Hash)
						if ok {
							return obj.HashValue, nil
						}
						inter, ok := p.Source.(HashGetter)
						if ok {
							face := inter.GetHash()
							if face == nil {
								return nil, nil
							}
							return face.HashValue, nil
						}
						return nil, fmt.Errorf("field hashValue not resolved")
					},
				},
			}
		}),
	})
	GraphQLExternalIdType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "ExternalId",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"binaryValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ExternalId)
						if ok {
							return obj.BinaryValue, nil
						}
						inter, ok := p.Source.(ExternalIdGetter)
						if ok {
							face := inter.GetExternalId()
							if face == nil {
								return nil, nil
							}
							return face.BinaryValue, nil
						}
						return nil, fmt.Errorf("field binaryValue not resolved")
					},
				},
			}
		}),
	})
	GraphQLContentType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "Content",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"binaryValue": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Content)
						if ok {
							return obj.BinaryValue, nil
						}
						inter, ok := p.Source.(ContentGetter)
						if ok {
							face := inter.GetContent()
							if face == nil {
								return nil, nil
							}
							return face.BinaryValue, nil
						}
						return nil, fmt.Errorf("field binaryValue not resolved")
					},
				},
			}
		}),
	})
	GraphQLSignatureType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "Signature",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"publicKey": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Signature)
						if ok {
							return obj.PublicKey, nil
						}
						inter, ok := p.Source.(SignatureGetter)
						if ok {
							face := inter.GetSignature()
							if face == nil {
								return nil, nil
							}
							return face.PublicKey, nil
						}
						return nil, fmt.Errorf("field publicKey not resolved")
					},
				},
				"signature": &github_com_graphql_go_graphql.Field{
					Type:        github_com_bi_foundation_protobuf_graphql_extension_plugin_graphql_scalars.ByteString,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Signature)
						if ok {
							return obj.Signature, nil
						}
						inter, ok := p.Source.(SignatureGetter)
						if ok {
							face := inter.GetSignature()
							if face == nil {
								return nil, nil
							}
							return face.Signature, nil
						}
						return nil, fmt.Errorf("field signature not resolved")
					},
				},
			}
		}),
	})
	GraphQLTransAddressType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "TransAddress",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"amount": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TransAddress)
						if ok {
							return obj.Amount, nil
						}
						inter, ok := p.Source.(TransAddressGetter)
						if ok {
							face := inter.GetTransAddress()
							if face == nil {
								return nil, nil
							}
							return face.Amount, nil
						}
						return nil, fmt.Errorf("field amount not resolved")
					},
				},
				"address": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*TransAddress)
						if ok {
							if obj.Address == nil {
								return nil, nil
							}
							return obj.GetAddress(), nil
						}
						inter, ok := p.Source.(TransAddressGetter)
						if ok {
							face := inter.GetTransAddress()
							if face == nil {
								return nil, nil
							}
							if face.Address == nil {
								return nil, nil
							}
							return face.GetAddress(), nil
						}
						return nil, fmt.Errorf("field address not resolved")
					},
				},
			}
		}),
	})
	GraphQLEntryBlockEntryType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "EntryBlockEntry",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"hash": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockEntry)
						if ok {
							if obj.Hash == nil {
								return nil, nil
							}
							return obj.GetHash(), nil
						}
						inter, ok := p.Source.(EntryBlockEntryGetter)
						if ok {
							face := inter.GetEntryBlockEntry()
							if face == nil {
								return nil, nil
							}
							if face.Hash == nil {
								return nil, nil
							}
							return face.GetHash(), nil
						}
						return nil, fmt.Errorf("field hash not resolved")
					},
				},
				"externalIDs": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLExternalIdType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockEntry)
						if ok {
							return obj.ExternalIDs, nil
						}
						inter, ok := p.Source.(EntryBlockEntryGetter)
						if ok {
							face := inter.GetEntryBlockEntry()
							if face == nil {
								return nil, nil
							}
							return face.ExternalIDs, nil
						}
						return nil, fmt.Errorf("field externalIDs not resolved")
					},
				},
				"content": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLContentType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*EntryBlockEntry)
						if ok {
							if obj.Content == nil {
								return nil, nil
							}
							return obj.GetContent(), nil
						}
						inter, ok := p.Source.(EntryBlockEntryGetter)
						if ok {
							face := inter.GetEntryBlockEntry()
							if face == nil {
								return nil, nil
							}
							if face.Content == nil {
								return nil, nil
							}
							return face.GetContent(), nil
						}
						return nil, fmt.Errorf("field content not resolved")
					},
				},
			}
		}),
	})
	GraphQLEntryType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "Entry",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"chainID": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Entry)
						if ok {
							if obj.ChainID == nil {
								return nil, nil
							}
							return obj.GetChainID(), nil
						}
						inter, ok := p.Source.(EntryGetter)
						if ok {
							face := inter.GetEntry()
							if face == nil {
								return nil, nil
							}
							if face.ChainID == nil {
								return nil, nil
							}
							return face.GetChainID(), nil
						}
						return nil, fmt.Errorf("field chainID not resolved")
					},
				},
				"keyMerkleRoot": &github_com_graphql_go_graphql.Field{
					Type:        GraphQLHashType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Entry)
						if ok {
							if obj.KeyMerkleRoot == nil {
								return nil, nil
							}
							return obj.GetKeyMerkleRoot(), nil
						}
						inter, ok := p.Source.(EntryGetter)
						if ok {
							face := inter.GetEntry()
							if face == nil {
								return nil, nil
							}
							if face.KeyMerkleRoot == nil {
								return nil, nil
							}
							return face.GetKeyMerkleRoot(), nil
						}
						return nil, fmt.Errorf("field keyMerkleRoot not resolved")
					},
				},
			}
		}),
	})
}
func (m *Hash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HashValue) > 0 {
		i -= len(m.HashValue)
		copy(dAtA[i:], m.HashValue)
		i = encodeVarintGeneralTypes(dAtA, i, uint64(len(m.HashValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExternalId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BinaryValue) > 0 {
		i -= len(m.BinaryValue)
		copy(dAtA[i:], m.BinaryValue)
		i = encodeVarintGeneralTypes(dAtA, i, uint64(len(m.BinaryValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BinaryValue) > 0 {
		i -= len(m.BinaryValue)
		copy(dAtA[i:], m.BinaryValue)
		i = encodeVarintGeneralTypes(dAtA, i, uint64(len(m.BinaryValue)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintGeneralTypes(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintGeneralTypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGeneralTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != 0 {
		i = encodeVarintGeneralTypes(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EntryBlockEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryBlockEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntryBlockEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGeneralTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExternalIDs) > 0 {
		for iNdEx := len(m.ExternalIDs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExternalIDs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGeneralTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Hash != nil {
		{
			size, err := m.Hash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGeneralTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.KeyMerkleRoot != nil {
		{
			size, err := m.KeyMerkleRoot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGeneralTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChainID != nil {
		{
			size, err := m.ChainID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGeneralTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGeneralTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovGeneralTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedHash(r randyGeneralTypes, easy bool) *Hash {
	this := &Hash{}
	v1 := r.Intn(100)
	this.HashValue = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.HashValue[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGeneralTypes(r, 2)
	}
	return this
}

func NewPopulatedExternalId(r randyGeneralTypes, easy bool) *ExternalId {
	this := &ExternalId{}
	v2 := r.Intn(100)
	this.BinaryValue = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.BinaryValue[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGeneralTypes(r, 2)
	}
	return this
}

func NewPopulatedContent(r randyGeneralTypes, easy bool) *Content {
	this := &Content{}
	v3 := r.Intn(100)
	this.BinaryValue = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.BinaryValue[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGeneralTypes(r, 2)
	}
	return this
}

func NewPopulatedSignature(r randyGeneralTypes, easy bool) *Signature {
	this := &Signature{}
	v4 := r.Intn(100)
	this.PublicKey = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.PublicKey[i] = byte(r.Intn(256))
	}
	v5 := r.Intn(100)
	this.Signature = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGeneralTypes(r, 3)
	}
	return this
}

func NewPopulatedTransAddress(r randyGeneralTypes, easy bool) *TransAddress {
	this := &TransAddress{}
	this.Amount = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.Address = NewPopulatedHash(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGeneralTypes(r, 3)
	}
	return this
}

func NewPopulatedEntryBlockEntry(r randyGeneralTypes, easy bool) *EntryBlockEntry {
	this := &EntryBlockEntry{}
	if r.Intn(5) != 0 {
		this.Hash = NewPopulatedHash(r, easy)
	}
	if r.Intn(5) != 0 {
		v6 := r.Intn(5)
		this.ExternalIDs = make([]*ExternalId, v6)
		for i := 0; i < v6; i++ {
			this.ExternalIDs[i] = NewPopulatedExternalId(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.Content = NewPopulatedContent(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGeneralTypes(r, 4)
	}
	return this
}

func NewPopulatedEntry(r randyGeneralTypes, easy bool) *Entry {
	this := &Entry{}
	if r.Intn(5) != 0 {
		this.ChainID = NewPopulatedHash(r, easy)
	}
	if r.Intn(5) != 0 {
		this.KeyMerkleRoot = NewPopulatedHash(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedGeneralTypes(r, 3)
	}
	return this
}

type randyGeneralTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGeneralTypes(r randyGeneralTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGeneralTypes(r randyGeneralTypes) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneGeneralTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedGeneralTypes(r randyGeneralTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGeneralTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGeneralTypes(dAtA []byte, r randyGeneralTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGeneralTypes(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateGeneralTypes(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateGeneralTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGeneralTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGeneralTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGeneralTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGeneralTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Hash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashValue)
	if l > 0 {
		n += 1 + l + sovGeneralTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExternalId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BinaryValue)
	if l > 0 {
		n += 1 + l + sovGeneralTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BinaryValue)
	if l > 0 {
		n += 1 + l + sovGeneralTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovGeneralTypes(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovGeneralTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovGeneralTypes(uint64(m.Amount))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovGeneralTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryBlockEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		l = m.Hash.Size()
		n += 1 + l + sovGeneralTypes(uint64(l))
	}
	if len(m.ExternalIDs) > 0 {
		for _, e := range m.ExternalIDs {
			l = e.Size()
			n += 1 + l + sovGeneralTypes(uint64(l))
		}
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovGeneralTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainID != nil {
		l = m.ChainID.Size()
		n += 1 + l + sovGeneralTypes(uint64(l))
	}
	if m.KeyMerkleRoot != nil {
		l = m.KeyMerkleRoot.Size()
		n += 1 + l + sovGeneralTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGeneralTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGeneralTypes(x uint64) (n int) {
	return sovGeneralTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Hash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneralTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashValue = append(m.HashValue[:0], dAtA[iNdEx:postIndex]...)
			if m.HashValue == nil {
				m.HashValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneralTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneralTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryValue = append(m.BinaryValue[:0], dAtA[iNdEx:postIndex]...)
			if m.BinaryValue == nil {
				m.BinaryValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneralTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneralTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryValue = append(m.BinaryValue[:0], dAtA[iNdEx:postIndex]...)
			if m.BinaryValue == nil {
				m.BinaryValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneralTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneralTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneralTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneralTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Hash{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneralTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryBlockEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneralTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryBlockEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryBlockEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hash == nil {
				m.Hash = &Hash{}
			}
			if err := m.Hash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIDs = append(m.ExternalIDs, &ExternalId{})
			if err := m.ExternalIDs[len(m.ExternalIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneralTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeneralTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainID == nil {
				m.ChainID = &Hash{}
			}
			if err := m.ChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyMerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyMerkleRoot == nil {
				m.KeyMerkleRoot = &Hash{}
			}
			if err := m.KeyMerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeneralTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGeneralTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGeneralTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGeneralTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeneralTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGeneralTypes
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGeneralTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGeneralTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGeneralTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGeneralTypes
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGeneralTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGeneralTypes   = fmt.Errorf("proto: integer overflow")
)
