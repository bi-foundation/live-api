basePath: /live/feed/v0.1
definitions:
  models.ApiError:
    properties:
      code:
        description: Error code.
        type: integer
      details:
        description: Error details
        type: string
      message:
        description: Error message.
        type: string
    type: object
  models.Credentials:
    properties:
      accessToken:
        description: Access token for setting the bearer token when authenticating
          on at the callback url. This is required when the callback type is set on
          BEARER_TOKEN.
        type: string
      basicAuthPassword:
        description: Password for authenticating with basic authentication. This is
          required when the callback type is set on BASIC_AUTH.
        type: string
      basicAuthUsername:
        description: Username for authenticating with basic authentication. This is
          required when the callback type is set on BASIC_AUTH.
        type: string
    type: object
  models.Filter:
    properties:
      filtering:
        description: Define a Filter on an EventType to filter the event. This allows
          to reduce the network traffic. The filtering is done with GraphQL
        example: '{ identityChainID { hashValue } value { ... on NodeMessage { messageCode
          messageText } } }'
        type: string
    type: object
  models.Subscription:
    properties:
      callbackType:
        description: |-
          Type of callback.
          - HTTP to deliver the events to a http/https endpoint.
          - BEARER_TOKEN to deliver the events to a http/https endpoint with a bearer token for authentication.
          - BASIC_AUTH to deliver the events to a http/https endpoint with a basic authentication.
        enum:
        - HTTP
        - BEARER_TOKEN
        - BASIC_AUTH
        example: HTTP
        type: string
      callbackUrl:
        description: The callback endpoint to receive the events.
        example: https://server.com/events
        type: string
      credentials:
        $ref: '#/definitions/models.Credentials'
        description: Credentials of the callback endpoint where events are delivered.
        type: object
      filters:
        additionalProperties:
          properties:
            filtering:
              description: Define a Filter on an EventType to filter the event. This
                allows to reduce the network traffic. The filtering is done with GraphQL
              example: '{ identityChainID { hashValue } value { ... on NodeMessage
                { messageCode messageText } } }'
              type: string
          type: object
        description: The emitted event can be filter to receive not all data from
          an event type. Subscribe on one or more event types. For every event type
          a filtering can be defined.
        type: object
      id:
        description: The id of the subscription.
        type: string
      info:
        description: Information of the subscription. An information message can be
          for example about why the subscription is suspended.
        type: string
      status:
        description: Status of subscription. Normally a subscription is active. When
          events fail to be delivered the subscription will be suspended. The subscription
          can become active again by updating the subscription. When the subscription
          is suspended, the error information is set in the info field.
        enum:
        - ACTIVE
        - SUSPENDED
        example: ACTIVE
        type: string
    required:
    - callbackType
    - callbackUrl
    - id
    type: object
host: localhost:8700
info:
  contact: {}
  description: The live feed API is a service for receiving events from the factom
    blockchain. The API is connected to a factomd node. The received events will be
    emitted to the subscriptions in the API. Users can subscribe a callback url where
    able to receive different types of events.
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  title: Live Feed API
  version: "0.1"
paths:
  /subscriptions:
    post:
      consumes:
      - application/json
      description: Subscribe an application to receive events.
      parameters:
      - description: subscription to be created
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/models.Subscription'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: subscription created
          schema:
            $ref: '#/definitions/models.Subscription'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ApiError'
      summary: subscribe an application
  /subscriptions/{id}:
    delete:
      consumes:
      - application/json
      description: Unsubscribe an application from receiving events.
      parameters:
      - description: subscription id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: subscription deleted
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ApiError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ApiError'
      summary: delete a subscription
    get:
      consumes:
      - application/json
      description: Return a subscription with the given id.
      parameters:
      - description: subscription id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: subscription
          schema:
            $ref: '#/definitions/models.Subscription'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ApiError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ApiError'
      summary: get a subscription
    put:
      consumes:
      - application/json
      description: Update a subscription for receiving events. Updating the subscription
        can be used to change the endpoint url, adjust the filtering, add of remove
        the subscription for event types. When the subscription failed to deliver
        and got SUSPENDED, the endpoint can used to re-ACTIVATE the subscription.
      parameters:
      - description: subscription id
        in: path
        name: id
        required: true
        type: integer
      - description: subscription to be updated
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/models.Subscription'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: subscription updated
          schema:
            $ref: '#/definitions/models.Subscription'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ApiError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ApiError'
      summary: update a subscription
schemes:
- http
- https
swagger: "2.0"
