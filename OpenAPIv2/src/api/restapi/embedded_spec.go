// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Factom Live API",
    "license": {
      "name": "MIT"
    },
    "version": "0.0.1"
  },
  "host": "liveapi.factom.com",
  "basePath": "/v1",
  "paths": {
    "/subscriptions": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "List all subscriptions",
        "operationId": "listSubscriptions",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "How many items to return at one time (max 100)",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of subscriptions",
            "schema": {
              "$ref": "#/definitions/Subscriptions"
            },
            "headers": {
              "x-next": {
                "type": "string",
                "description": "A link to the next page of responses"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Create a subscription",
        "operationId": "createSubscriptions",
        "responses": {
          "201": {
            "description": "Null response"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Info for a specific subscription",
        "operationId": "getSubscriptionById",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the subscription to retrieve",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "schema": {
              "$ref": "#/definitions/Subscriptions"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Subscription": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "Subscriptions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Subscription"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Factom Live API",
    "license": {
      "name": "MIT"
    },
    "version": "0.0.1"
  },
  "host": "liveapi.factom.com",
  "basePath": "/v1",
  "paths": {
    "/subscriptions": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "List all subscriptions",
        "operationId": "listSubscriptions",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "How many items to return at one time (max 100)",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of subscriptions",
            "schema": {
              "$ref": "#/definitions/Subscriptions"
            },
            "headers": {
              "x-next": {
                "type": "string",
                "description": "A link to the next page of responses"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Create a subscription",
        "operationId": "createSubscriptions",
        "responses": {
          "201": {
            "description": "Null response"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Info for a specific subscription",
        "operationId": "getSubscriptionById",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the subscription to retrieve",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "schema": {
              "$ref": "#/definitions/Subscriptions"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Subscription": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "Subscriptions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Subscription"
      }
    }
  }
}`))
}
